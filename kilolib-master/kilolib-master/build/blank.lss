
build/blank.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_6>
      1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      2c:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__vector_11>
      30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      38:	0c 94 91 07 	jmp	0xf22	; 0xf22 <__vector_14>
      3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      5c:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__vector_23>
      60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <wdt_init>:

#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
      74:	14 be       	out	0x34, r1	; 52
    MCUSR = 0;
    wdt_disable();
      76:	88 e1       	ldi	r24, 0x18	; 24
      78:	0f b6       	in	r0, 0x3f	; 63
      7a:	f8 94       	cli
      7c:	80 93 60 00 	sts	0x0060, r24
      80:	10 92 60 00 	sts	0x0060, r1
      84:	0f be       	out	0x3f, r0	; 63

00000086 <__do_copy_data>:
      86:	12 e0       	ldi	r17, 0x02	; 2
      88:	a0 e0       	ldi	r26, 0x00	; 0
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	ee e8       	ldi	r30, 0x8E	; 142
      8e:	fa e2       	ldi	r31, 0x2A	; 42
      90:	02 c0       	rjmp	.+4      	; 0x96 <.do_copy_data_start>

00000092 <.do_copy_data_loop>:
      92:	05 90       	lpm	r0, Z+
      94:	0d 92       	st	X+, r0

00000096 <.do_copy_data_start>:
      96:	a6 31       	cpi	r26, 0x16	; 22
      98:	b1 07       	cpc	r27, r17
      9a:	d9 f7       	brne	.-10     	; 0x92 <.do_copy_data_loop>

0000009c <__do_clear_bss>:
      9c:	12 e0       	ldi	r17, 0x02	; 2
      9e:	a6 e1       	ldi	r26, 0x16	; 22
      a0:	b2 e0       	ldi	r27, 0x02	; 2
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
      a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
      a6:	af 37       	cpi	r26, 0x7F	; 127
      a8:	b1 07       	cpc	r27, r17
      aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
      ac:	0e 94 67 00 	call	0xce	; 0xce <main>
      b0:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <_exit>

000000b4 <__bad_interrupt>:
      b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <message_rx>:
		new_message = 0;
	}
}

void message_rx(message_t *message, distance_measurement_t *distance, direction *dir)
{
      b8:	fa 01       	movw	r30, r20
    // Set the flag on message reception.
    new_message = 1;
      ba:	81 e0       	ldi	r24, 0x01	; 1
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	90 93 17 02 	sts	0x0217, r25
      c2:	80 93 16 02 	sts	0x0216, r24
		message_dir = *dir;
      c6:	80 81       	ld	r24, Z
      c8:	80 93 1f 02 	sts	0x021F, r24
}
      cc:	08 95       	ret

000000ce <main>:

int main()
{
    kilo_init();
      ce:	0e 94 09 08 	call	0x1012	; 0x1012 <kilo_init>
    // Register the message_rx callback function.
    kilo_message_rx = message_rx;
      d2:	8c e5       	ldi	r24, 0x5C	; 92
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	90 93 01 01 	sts	0x0101, r25
      da:	80 93 00 01 	sts	0x0100, r24
    kilo_start(setup, loop);
      de:	82 eb       	ldi	r24, 0xB2	; 178
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	68 e7       	ldi	r22, 0x78	; 120
      e4:	70 e0       	ldi	r23, 0x00	; 0
      e6:	0e 94 a8 0a 	call	0x1550	; 0x1550 <kilo_start>

    return 0;
}
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	08 95       	ret

000000f0 <loop>:
int count = 0;
direction message_dir;

void loop()
{
	if(new_message == 1){
      f0:	80 91 16 02 	lds	r24, 0x0216
      f4:	90 91 17 02 	lds	r25, 0x0217
      f8:	01 97       	sbiw	r24, 0x01	; 1
      fa:	09 f0       	breq	.+2      	; 0xfe <loop+0xe>
      fc:	08 95       	ret
		switch(message_dir){
      fe:	80 91 1f 02 	lds	r24, 0x021F
     102:	82 30       	cpi	r24, 0x02	; 2
     104:	09 f1       	breq	.+66     	; 0x148 <loop+0x58>
     106:	83 30       	cpi	r24, 0x03	; 3
     108:	b8 f0       	brcs	.+46     	; 0x138 <loop+0x48>
     10a:	84 30       	cpi	r24, 0x04	; 4
     10c:	e9 f0       	breq	.+58     	; 0x148 <loop+0x58>
     10e:	84 30       	cpi	r24, 0x04	; 4
     110:	f8 f4       	brcc	.+62     	; 0x150 <loop+0x60>
				break;
			case NORTH_WEST:
				set_color(RGB(0,0,1));
				break;
			case NORTH:
					set_color(RGB(1,0,0));
     112:	81 e0       	ldi	r24, 0x01	; 1
     114:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>

			default:
				set_color(RGB(1,1,1));
				break;
		}
		delay(200);
     118:	88 ec       	ldi	r24, 0xC8	; 200
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <delay>
		set_color(RGB(0,0,0));
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>
		delay(100);
     126:	84 e6       	ldi	r24, 0x64	; 100
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <delay>
		new_message = 0;
     12e:	10 92 17 02 	sts	0x0217, r1
     132:	10 92 16 02 	sts	0x0216, r1
     136:	08 95       	ret
direction message_dir;

void loop()
{
	if(new_message == 1){
		switch(message_dir){
     138:	88 23       	and	r24, r24
     13a:	59 f3       	breq	.-42     	; 0x112 <loop+0x22>
     13c:	81 30       	cpi	r24, 0x01	; 1
     13e:	71 f0       	breq	.+28     	; 0x15c <loop+0x6c>
			case SOUTH_WEST:
					set_color(RGB(0,1,1));
					break;

			default:
				set_color(RGB(1,1,1));
     140:	85 e1       	ldi	r24, 0x15	; 21
     142:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>
     146:	e8 cf       	rjmp	.-48     	; 0x118 <loop+0x28>
					break;
			case SOUTH_EAST:
					set_color(RGB(0,1,1));
					break;
			case SOUTH_WEST:
					set_color(RGB(0,1,1));
     148:	84 e1       	ldi	r24, 0x14	; 20
     14a:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>
     14e:	e4 cf       	rjmp	.-56     	; 0x118 <loop+0x28>
direction message_dir;

void loop()
{
	if(new_message == 1){
		switch(message_dir){
     150:	85 30       	cpi	r24, 0x05	; 5
     152:	b1 f7       	brne	.-20     	; 0x140 <loop+0x50>
				break;
			case NORTH_EAST:
				set_color(RGB(0,1,0));
				break;
			case NORTH_WEST:
				set_color(RGB(0,0,1));
     154:	80 e1       	ldi	r24, 0x10	; 16
     156:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>
     15a:	de cf       	rjmp	.-68     	; 0x118 <loop+0x28>
		switch(message_dir){
			case SOUTH:
				set_color(RGB(1,0,0));
				break;
			case NORTH_EAST:
				set_color(RGB(0,1,0));
     15c:	84 e0       	ldi	r24, 0x04	; 4
     15e:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>
     162:	da cf       	rjmp	.-76     	; 0x118 <loop+0x28>

00000164 <setup>:
#include "kilolib.h"

void setup() {
	set_color(RGB(1,0,0));
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>
	delay(200);
     16a:	88 ec       	ldi	r24, 0xC8	; 200
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <delay>
	set_color(RGB(0,1,0));
     172:	84 e0       	ldi	r24, 0x04	; 4
     174:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>
	delay(200);
     178:	88 ec       	ldi	r24, 0xC8	; 200
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <delay>
	set_color(RGB(0,0,1));
     180:	80 e1       	ldi	r24, 0x10	; 16
     182:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>
	delay(200);
     186:	88 ec       	ldi	r24, 0xC8	; 200
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <delay>
	set_color(RGB(0,0,0));
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>
	delay(200);
     194:	88 ec       	ldi	r24, 0xC8	; 200
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <delay>

}
     19c:	08 95       	ret

0000019e <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d, direction *dir) { }
     19e:	08 95       	ret

000001a0 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	08 95       	ret

000001a6 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     1a6:	08 95       	ret

000001a8 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     1a8:	1f 92       	push	r1
     1aa:	0f 92       	push	r0
     1ac:	0f b6       	in	r0, 0x3f	; 63
     1ae:	0f 92       	push	r0
     1b0:	11 24       	eor	r1, r1
     1b2:	8f 93       	push	r24
    wdt_disable();
     1b4:	88 e1       	ldi	r24, 0x18	; 24
     1b6:	0f b6       	in	r0, 0x3f	; 63
     1b8:	f8 94       	cli
     1ba:	80 93 60 00 	sts	0x0060, r24
     1be:	10 92 60 00 	sts	0x0060, r1
     1c2:	0f be       	out	0x3f, r0	; 63
}
     1c4:	8f 91       	pop	r24
     1c6:	0f 90       	pop	r0
     1c8:	0f be       	out	0x3f, r0	; 63
     1ca:	0f 90       	pop	r0
     1cc:	1f 90       	pop	r1
     1ce:	18 95       	reti

000001d0 <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     1d0:	00 97       	sbiw	r24, 0x00	; 0
     1d2:	39 f0       	breq	.+14     	; 0x1e2 <delay+0x12>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1d4:	20 ed       	ldi	r18, 0xD0	; 208
     1d6:	37 e0       	ldi	r19, 0x07	; 7
     1d8:	f9 01       	movw	r30, r18
     1da:	31 97       	sbiw	r30, 0x01	; 1
     1dc:	f1 f7       	brne	.-4      	; 0x1da <delay+0xa>
        _delay_ms(1);
        ms--;
     1de:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     1e0:	d9 f7       	brne	.-10     	; 0x1d8 <delay+0x8>
     1e2:	08 95       	ret

000001e4 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     1e4:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     1e8:	60 93 b4 00 	sts	0x00B4, r22
}
     1ec:	08 95       	ret

000001ee <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     1ee:	8f ef       	ldi	r24, 0xFF	; 255
     1f0:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     1f4:	80 93 b4 00 	sts	0x00B4, r24
     1f8:	80 ed       	ldi	r24, 0xD0	; 208
     1fa:	97 e0       	ldi	r25, 0x07	; 7
     1fc:	fc 01       	movw	r30, r24
     1fe:	31 97       	sbiw	r30, 0x01	; 1
     200:	f1 f7       	brne	.-4      	; 0x1fe <spinup_motors+0x10>
     202:	fc 01       	movw	r30, r24
     204:	31 97       	sbiw	r30, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <spinup_motors+0x16>
     208:	fc 01       	movw	r30, r24
     20a:	31 97       	sbiw	r30, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <spinup_motors+0x1c>
     20e:	fc 01       	movw	r30, r24
     210:	31 97       	sbiw	r30, 0x01	; 1
     212:	f1 f7       	brne	.-4      	; 0x210 <spinup_motors+0x22>
     214:	fc 01       	movw	r30, r24
     216:	31 97       	sbiw	r30, 0x01	; 1
     218:	f1 f7       	brne	.-4      	; 0x216 <spinup_motors+0x28>
     21a:	fc 01       	movw	r30, r24
     21c:	31 97       	sbiw	r30, 0x01	; 1
     21e:	f1 f7       	brne	.-4      	; 0x21c <spinup_motors+0x2e>
     220:	fc 01       	movw	r30, r24
     222:	31 97       	sbiw	r30, 0x01	; 1
     224:	f1 f7       	brne	.-4      	; 0x222 <spinup_motors+0x34>
     226:	fc 01       	movw	r30, r24
     228:	31 97       	sbiw	r30, 0x01	; 1
     22a:	f1 f7       	brne	.-4      	; 0x228 <spinup_motors+0x3a>
     22c:	fc 01       	movw	r30, r24
     22e:	31 97       	sbiw	r30, 0x01	; 1
     230:	f1 f7       	brne	.-4      	; 0x22e <spinup_motors+0x40>
     232:	fc 01       	movw	r30, r24
     234:	31 97       	sbiw	r30, 0x01	; 1
     236:	f1 f7       	brne	.-4      	; 0x234 <spinup_motors+0x46>
     238:	fc 01       	movw	r30, r24
     23a:	31 97       	sbiw	r30, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <spinup_motors+0x4c>
     23e:	fc 01       	movw	r30, r24
     240:	31 97       	sbiw	r30, 0x01	; 1
     242:	f1 f7       	brne	.-4      	; 0x240 <spinup_motors+0x52>
     244:	fc 01       	movw	r30, r24
     246:	31 97       	sbiw	r30, 0x01	; 1
     248:	f1 f7       	brne	.-4      	; 0x246 <spinup_motors+0x58>
     24a:	fc 01       	movw	r30, r24
     24c:	31 97       	sbiw	r30, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <spinup_motors+0x5e>
     250:	01 97       	sbiw	r24, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <spinup_motors+0x62>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     254:	08 95       	ret

00000256 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     256:	80 91 47 02 	lds	r24, 0x0247
     25a:	88 23       	and	r24, r24
     25c:	f9 f4       	brne	.+62     	; 0x29c <get_ambientlight+0x46>
        cli();
     25e:	f8 94       	cli
        adc_setup_conversion(7);
     260:	87 e0       	ldi	r24, 0x07	; 7
     262:	80 93 7c 00 	sts	0x007C, r24
     266:	83 e8       	ldi	r24, 0x83	; 131
     268:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     26c:	80 91 7a 00 	lds	r24, 0x007A
     270:	80 64       	ori	r24, 0x40	; 64
     272:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     276:	80 91 7a 00 	lds	r24, 0x007A
     27a:	86 fd       	sbrc	r24, 6
     27c:	fc cf       	rjmp	.-8      	; 0x276 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     27e:	20 91 78 00 	lds	r18, 0x0078
     282:	30 91 79 00 	lds	r19, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     286:	10 92 7c 00 	sts	0x007C, r1
     28a:	83 ea       	ldi	r24, 0xA3	; 163
     28c:	80 93 7a 00 	sts	0x007A, r24
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	80 93 7b 00 	sts	0x007B, r24
        sei();                                    // reenable interrupts
     296:	78 94       	sei
    }
    return light;
}
     298:	c9 01       	movw	r24, r18
     29a:	08 95       	ret
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     29c:	2f ef       	ldi	r18, 0xFF	; 255
     29e:	3f ef       	ldi	r19, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     2a0:	c9 01       	movw	r24, r18
     2a2:	08 95       	ret

000002a4 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     2a4:	80 91 47 02 	lds	r24, 0x0247
     2a8:	88 23       	and	r24, r24
     2aa:	f9 f4       	brne	.+62     	; 0x2ea <get_temperature+0x46>
        cli();
     2ac:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     2ae:	88 ec       	ldi	r24, 0xC8	; 200
     2b0:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     2b4:	87 e8       	ldi	r24, 0x87	; 135
     2b6:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     2ba:	80 91 7a 00 	lds	r24, 0x007A
     2be:	80 64       	ori	r24, 0x40	; 64
     2c0:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     2c4:	80 91 7a 00 	lds	r24, 0x007A
     2c8:	86 fd       	sbrc	r24, 6
     2ca:	fc cf       	rjmp	.-8      	; 0x2c4 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     2cc:	20 91 78 00 	lds	r18, 0x0078
     2d0:	30 91 79 00 	lds	r19, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     2d4:	10 92 7c 00 	sts	0x007C, r1
     2d8:	83 ea       	ldi	r24, 0xA3	; 163
     2da:	80 93 7a 00 	sts	0x007A, r24
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	80 93 7b 00 	sts	0x007B, r24
        sei();                                    // reenable interrupts
     2e4:	78 94       	sei
    }
    return temp;
}
     2e6:	c9 01       	movw	r24, r18
     2e8:	08 95       	ret
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     2ea:	2f ef       	ldi	r18, 0xFF	; 255
     2ec:	3f ef       	ldi	r19, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     2ee:	c9 01       	movw	r24, r18
     2f0:	08 95       	ret

000002f2 <rand_hard>:

uint8_t rand_hard() {
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	b0 e0       	ldi	r27, 0x00	; 0
     2f8:	60 e0       	ldi	r22, 0x00	; 0
     2fa:	70 e0       	ldi	r23, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     2fc:	f3 ea       	ldi	r31, 0xA3	; 163
     2fe:	a1 e0       	ldi	r26, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     300:	56 e0       	ldi	r21, 0x06	; 6
     302:	e3 e8       	ldi	r30, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     304:	c1 e0       	ldi	r28, 0x01	; 1
     306:	d0 e0       	ldi	r29, 0x00	; 0
        sei();                                    // reenable interrupts
    }
    return temp;
}

uint8_t rand_hard() {
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     30c:	f8 94       	cli
            adc_setup_conversion(6);
     30e:	50 93 7c 00 	sts	0x007C, r21
     312:	e0 93 7a 00 	sts	0x007A, r30
            adc_start_conversion();
     316:	80 91 7a 00 	lds	r24, 0x007A
     31a:	80 64       	ori	r24, 0x40	; 64
     31c:	80 93 7a 00 	sts	0x007A, r24
            adc_finish_conversion();
     320:	80 91 7a 00 	lds	r24, 0x007A
     324:	86 fd       	sbrc	r24, 6
     326:	fc cf       	rjmp	.-8      	; 0x320 <rand_hard+0x2e>
            a = ADCW&0x1;
     328:	80 91 78 00 	lds	r24, 0x0078
     32c:	90 91 79 00 	lds	r25, 0x0079
     330:	48 2f       	mov	r20, r24
     332:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     334:	80 91 7a 00 	lds	r24, 0x007A
     338:	80 64       	ori	r24, 0x40	; 64
     33a:	80 93 7a 00 	sts	0x007A, r24
            adc_finish_conversion();
     33e:	80 91 7a 00 	lds	r24, 0x007A
     342:	86 fd       	sbrc	r24, 6
     344:	fc cf       	rjmp	.-8      	; 0x33e <rand_hard+0x4c>
            b = ADCW&0x1;
     346:	80 91 78 00 	lds	r24, 0x0078
     34a:	90 91 79 00 	lds	r25, 0x0079
            adc_trigger_high_gain();
     34e:	10 92 7c 00 	sts	0x007C, r1
     352:	f0 93 7a 00 	sts	0x007A, r31
     356:	a0 93 7b 00 	sts	0x007B, r26
            sei();
     35a:	78 94       	sei
            tries++;
        } while (a == b && tries < 128);
     35c:	81 70       	andi	r24, 0x01	; 1
     35e:	48 17       	cp	r20, r24
     360:	29 f4       	brne	.+10     	; 0x36c <rand_hard+0x7a>
     362:	2f 5f       	subi	r18, 0xFF	; 255
     364:	3f 4f       	sbci	r19, 0xFF	; 255
     366:	20 38       	cpi	r18, 0x80	; 128
     368:	31 05       	cpc	r19, r1
     36a:	81 f6       	brne	.-96     	; 0x30c <rand_hard+0x1a>
        if (a)
     36c:	44 23       	and	r20, r20
     36e:	41 f0       	breq	.+16     	; 0x380 <rand_hard+0x8e>
            num |= (1<<i);
     370:	ce 01       	movw	r24, r28
     372:	06 2e       	mov	r0, r22
     374:	02 c0       	rjmp	.+4      	; 0x37a <rand_hard+0x88>
     376:	88 0f       	add	r24, r24
     378:	99 1f       	adc	r25, r25
     37a:	0a 94       	dec	r0
     37c:	e2 f7       	brpl	.-8      	; 0x376 <rand_hard+0x84>
     37e:	b8 2b       	or	r27, r24
     380:	6f 5f       	subi	r22, 0xFF	; 255
     382:	7f 4f       	sbci	r23, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     384:	68 30       	cpi	r22, 0x08	; 8
     386:	71 05       	cpc	r23, r1
     388:	09 f0       	breq	.+2      	; 0x38c <rand_hard+0x9a>
     38a:	be cf       	rjmp	.-132    	; 0x308 <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     38c:	8b 2f       	mov	r24, r27
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	08 95       	ret

00000394 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     394:	80 91 08 01 	lds	r24, 0x0108
     398:	98 2f       	mov	r25, r24
     39a:	99 0f       	add	r25, r25
     39c:	99 0f       	add	r25, r25
     39e:	99 0f       	add	r25, r25
     3a0:	98 27       	eor	r25, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     3a2:	20 91 1c 02 	lds	r18, 0x021C
     3a6:	82 2f       	mov	r24, r18
     3a8:	86 95       	lsr	r24
     3aa:	86 95       	lsr	r24
     3ac:	89 27       	eor	r24, r25
     3ae:	92 95       	swap	r25
     3b0:	96 95       	lsr	r25
     3b2:	97 70       	andi	r25, 0x07	; 7
     3b4:	89 27       	eor	r24, r25
     3b6:	80 93 08 01 	sts	0x0108, r24
     3ba:	2f 5f       	subi	r18, 0xFF	; 255
     3bc:	20 93 1c 02 	sts	0x021C, r18
    return seed;
}
     3c0:	08 95       	ret

000003c2 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     3c2:	80 93 08 01 	sts	0x0108, r24
}
     3c6:	08 95       	ret

000003c8 <get_voltage>:

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     3c8:	80 91 47 02 	lds	r24, 0x0247
     3cc:	88 23       	and	r24, r24
     3ce:	b9 f4       	brne	.+46     	; 0x3fe <get_voltage+0x36>
        cli();                                    // disable interrupts
     3d0:	f8 94       	cli
        adc_setup_conversion(6);
     3d2:	86 e0       	ldi	r24, 0x06	; 6
     3d4:	80 93 7c 00 	sts	0x007C, r24
     3d8:	83 e8       	ldi	r24, 0x83	; 131
     3da:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     3de:	80 91 7a 00 	lds	r24, 0x007A
     3e2:	80 64       	ori	r24, 0x40	; 64
     3e4:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     3e8:	80 91 7a 00 	lds	r24, 0x007A
     3ec:	86 fd       	sbrc	r24, 6
     3ee:	fc cf       	rjmp	.-8      	; 0x3e8 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     3f0:	20 91 78 00 	lds	r18, 0x0078
     3f4:	30 91 79 00 	lds	r19, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     3f8:	78 94       	sei
    }
    return voltage;
}
     3fa:	c9 01       	movw	r24, r18
     3fc:	08 95       	ret
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     3fe:	2f ef       	ldi	r18, 0xFF	; 255
     400:	3f ef       	ldi	r19, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     402:	c9 01       	movw	r24, r18
     404:	08 95       	ret

00000406 <get_direction>:

direction get_direction(){ return rx_direction;}
     406:	80 91 7b 02 	lds	r24, 0x027B
     40a:	08 95       	ret

0000040c <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     40c:	2f 92       	push	r2
     40e:	3f 92       	push	r3
     410:	4f 92       	push	r4
     412:	5f 92       	push	r5
     414:	6f 92       	push	r6
     416:	7f 92       	push	r7
     418:	8f 92       	push	r8
     41a:	9f 92       	push	r9
     41c:	af 92       	push	r10
     41e:	bf 92       	push	r11
     420:	cf 92       	push	r12
     422:	df 92       	push	r13
     424:	ef 92       	push	r14
     426:	ff 92       	push	r15
     428:	0f 93       	push	r16
     42a:	1f 93       	push	r17
     42c:	df 93       	push	r29
     42e:	cf 93       	push	r28
     430:	00 d0       	rcall	.+0      	; 0x432 <estimate_distance+0x26>
     432:	00 d0       	rcall	.+0      	; 0x434 <estimate_distance+0x28>
     434:	0f 92       	push	r0
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
     43a:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     43c:	dc 01       	movw	r26, r24
     43e:	12 96       	adiw	r26, 0x02	; 2
     440:	4d 90       	ld	r4, X+
     442:	5c 90       	ld	r5, X
     444:	13 97       	sbiw	r26, 0x03	; 3
     446:	b4 e8       	ldi	r27, 0x84	; 132
     448:	4b 16       	cp	r4, r27
     44a:	b3 e0       	ldi	r27, 0x03	; 3
     44c:	5b 06       	cpc	r5, r27
     44e:	0c f4       	brge	.+2      	; 0x452 <estimate_distance+0x46>
     450:	9d c0       	rjmp	.+314    	; 0x58c <estimate_distance+0x180>
     452:	ef ef       	ldi	r30, 0xFF	; 255
     454:	ed 83       	std	Y+5, r30	; 0x05
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     456:	bd eb       	ldi	r27, 0xBD	; 189
     458:	4b 16       	cp	r4, r27
     45a:	b2 e0       	ldi	r27, 0x02	; 2
     45c:	5b 06       	cpc	r5, r27
     45e:	d4 f4       	brge	.+52     	; 0x494 <estimate_distance+0x88>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     460:	8d 81       	ldd	r24, Y+5	; 0x05
     462:	8f 5d       	subi	r24, 0xDF	; 223
    }
}
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	cf 91       	pop	r28
     470:	df 91       	pop	r29
     472:	1f 91       	pop	r17
     474:	0f 91       	pop	r16
     476:	ff 90       	pop	r15
     478:	ef 90       	pop	r14
     47a:	df 90       	pop	r13
     47c:	cf 90       	pop	r12
     47e:	bf 90       	pop	r11
     480:	af 90       	pop	r10
     482:	9f 90       	pop	r9
     484:	8f 90       	pop	r8
     486:	7f 90       	pop	r7
     488:	6f 90       	pop	r6
     48a:	5f 90       	pop	r5
     48c:	4f 90       	pop	r4
     48e:	3f 90       	pop	r3
     490:	2f 90       	pop	r2
     492:	08 95       	ret
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     494:	f1 01       	movw	r30, r2
     496:	00 81       	ld	r16, Z
     498:	11 81       	ldd	r17, Z+1	; 0x01
     49a:	80 91 48 02 	lds	r24, 0x0248
     49e:	90 91 49 02 	lds	r25, 0x0249
     4a2:	80 17       	cp	r24, r16
     4a4:	91 07       	cpc	r25, r17
     4a6:	08 f4       	brcc	.+2      	; 0x4aa <estimate_distance+0x9e>
     4a8:	43 c1       	rjmp	.+646    	; 0x730 <estimate_distance+0x324>
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     4aa:	e0 90 4a 02 	lds	r14, 0x024A
     4ae:	f0 90 4b 02 	lds	r15, 0x024B
     4b2:	e0 16       	cp	r14, r16
     4b4:	f1 06       	cpc	r15, r17
     4b6:	08 f4       	brcc	.+2      	; 0x4ba <estimate_distance+0xae>
     4b8:	15 c2       	rjmp	.+1066   	; 0x8e4 <estimate_distance+0x4d8>
     4ba:	e0 90 4c 02 	lds	r14, 0x024C
     4be:	f0 90 4d 02 	lds	r15, 0x024D
     4c2:	e0 16       	cp	r14, r16
     4c4:	f1 06       	cpc	r15, r17
     4c6:	08 f4       	brcc	.+2      	; 0x4ca <estimate_distance+0xbe>
     4c8:	16 c2       	rjmp	.+1068   	; 0x8f6 <estimate_distance+0x4ea>
     4ca:	e0 90 4e 02 	lds	r14, 0x024E
     4ce:	f0 90 4f 02 	lds	r15, 0x024F
     4d2:	e0 16       	cp	r14, r16
     4d4:	f1 06       	cpc	r15, r17
     4d6:	08 f4       	brcc	.+2      	; 0x4da <estimate_distance+0xce>
     4d8:	17 c2       	rjmp	.+1070   	; 0x908 <__stack+0x9>
     4da:	e0 90 50 02 	lds	r14, 0x0250
     4de:	f0 90 51 02 	lds	r15, 0x0251
     4e2:	e0 16       	cp	r14, r16
     4e4:	f1 06       	cpc	r15, r17
     4e6:	08 f4       	brcc	.+2      	; 0x4ea <estimate_distance+0xde>
     4e8:	18 c2       	rjmp	.+1072   	; 0x91a <__stack+0x1b>
     4ea:	e0 90 52 02 	lds	r14, 0x0252
     4ee:	f0 90 53 02 	lds	r15, 0x0253
     4f2:	e0 16       	cp	r14, r16
     4f4:	f1 06       	cpc	r15, r17
     4f6:	08 f4       	brcc	.+2      	; 0x4fa <estimate_distance+0xee>
     4f8:	6e c1       	rjmp	.+732    	; 0x7d6 <estimate_distance+0x3ca>
     4fa:	e0 90 54 02 	lds	r14, 0x0254
     4fe:	f0 90 55 02 	lds	r15, 0x0255
     502:	e0 16       	cp	r14, r16
     504:	f1 06       	cpc	r15, r17
     506:	08 f4       	brcc	.+2      	; 0x50a <estimate_distance+0xfe>
     508:	11 c2       	rjmp	.+1058   	; 0x92c <__stack+0x2d>
     50a:	e0 90 56 02 	lds	r14, 0x0256
     50e:	f0 90 57 02 	lds	r15, 0x0257
     512:	e0 16       	cp	r14, r16
     514:	f1 06       	cpc	r15, r17
     516:	08 f4       	brcc	.+2      	; 0x51a <estimate_distance+0x10e>
     518:	12 c2       	rjmp	.+1060   	; 0x93e <__stack+0x3f>
     51a:	e0 90 58 02 	lds	r14, 0x0258
     51e:	f0 90 59 02 	lds	r15, 0x0259
     522:	e0 16       	cp	r14, r16
     524:	f1 06       	cpc	r15, r17
     526:	08 f4       	brcc	.+2      	; 0x52a <estimate_distance+0x11e>
     528:	13 c2       	rjmp	.+1062   	; 0x950 <__stack+0x51>
     52a:	e0 90 5a 02 	lds	r14, 0x025A
     52e:	f0 90 5b 02 	lds	r15, 0x025B
     532:	e0 16       	cp	r14, r16
     534:	f1 06       	cpc	r15, r17
     536:	08 f4       	brcc	.+2      	; 0x53a <estimate_distance+0x12e>
     538:	14 c2       	rjmp	.+1064   	; 0x962 <__stack+0x63>
     53a:	e0 90 5c 02 	lds	r14, 0x025C
     53e:	f0 90 5d 02 	lds	r15, 0x025D
     542:	e0 16       	cp	r14, r16
     544:	f1 06       	cpc	r15, r17
     546:	08 f4       	brcc	.+2      	; 0x54a <estimate_distance+0x13e>
     548:	15 c2       	rjmp	.+1066   	; 0x974 <__stack+0x75>
     54a:	e0 90 5e 02 	lds	r14, 0x025E
     54e:	f0 90 5f 02 	lds	r15, 0x025F
     552:	e0 16       	cp	r14, r16
     554:	f1 06       	cpc	r15, r17
     556:	08 f4       	brcc	.+2      	; 0x55a <estimate_distance+0x14e>
     558:	1a c2       	rjmp	.+1076   	; 0x98e <__stack+0x8f>
     55a:	e0 90 60 02 	lds	r14, 0x0260
     55e:	f0 90 61 02 	lds	r15, 0x0261
     562:	e0 16       	cp	r14, r16
     564:	f1 06       	cpc	r15, r17
     566:	08 f4       	brcc	.+2      	; 0x56a <estimate_distance+0x15e>
     568:	1b c2       	rjmp	.+1078   	; 0x9a0 <__stack+0xa1>
     56a:	e0 90 62 02 	lds	r14, 0x0262
     56e:	f0 90 63 02 	lds	r15, 0x0263
     572:	e0 16       	cp	r14, r16
     574:	f1 06       	cpc	r15, r17
     576:	08 f4       	brcc	.+2      	; 0x57a <estimate_distance+0x16e>
     578:	1c c2       	rjmp	.+1080   	; 0x9b2 <__stack+0xb3>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     57a:	8a e5       	ldi	r24, 0x5A	; 90
     57c:	38 2e       	mov	r3, r24
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     57e:	2d 81       	ldd	r18, Y+5	; 0x05
     580:	2f 3f       	cpi	r18, 0xFF	; 255
     582:	09 f0       	breq	.+2      	; 0x586 <estimate_distance+0x17a>
     584:	da c0       	rjmp	.+436    	; 0x73a <estimate_distance+0x32e>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     586:	83 2d       	mov	r24, r3
     588:	8f 5d       	subi	r24, 0xDF	; 223
     58a:	6c cf       	rjmp	.-296    	; 0x464 <estimate_distance+0x58>
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
     58c:	80 91 21 02 	lds	r24, 0x0221
     590:	90 91 22 02 	lds	r25, 0x0222
     594:	84 15       	cp	r24, r4
     596:	95 05       	cpc	r25, r5
     598:	08 f4       	brcc	.+2      	; 0x59c <estimate_distance+0x190>
     59a:	c8 c0       	rjmp	.+400    	; 0x72c <estimate_distance+0x320>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     59c:	e0 90 23 02 	lds	r14, 0x0223
     5a0:	f0 90 24 02 	lds	r15, 0x0224
     5a4:	e4 14       	cp	r14, r4
     5a6:	f5 04       	cpc	r15, r5
     5a8:	08 f4       	brcc	.+2      	; 0x5ac <estimate_distance+0x1a0>
     5aa:	a1 c1       	rjmp	.+834    	; 0x8ee <estimate_distance+0x4e2>
     5ac:	e0 90 25 02 	lds	r14, 0x0225
     5b0:	f0 90 26 02 	lds	r15, 0x0226
     5b4:	e4 14       	cp	r14, r4
     5b6:	f5 04       	cpc	r15, r5
     5b8:	08 f4       	brcc	.+2      	; 0x5bc <estimate_distance+0x1b0>
     5ba:	a2 c1       	rjmp	.+836    	; 0x900 <__stack+0x1>
     5bc:	e0 90 27 02 	lds	r14, 0x0227
     5c0:	f0 90 28 02 	lds	r15, 0x0228
     5c4:	e4 14       	cp	r14, r4
     5c6:	f5 04       	cpc	r15, r5
     5c8:	08 f4       	brcc	.+2      	; 0x5cc <estimate_distance+0x1c0>
     5ca:	a3 c1       	rjmp	.+838    	; 0x912 <__stack+0x13>
     5cc:	e0 90 29 02 	lds	r14, 0x0229
     5d0:	f0 90 2a 02 	lds	r15, 0x022A
     5d4:	e4 14       	cp	r14, r4
     5d6:	f5 04       	cpc	r15, r5
     5d8:	08 f4       	brcc	.+2      	; 0x5dc <estimate_distance+0x1d0>
     5da:	a4 c1       	rjmp	.+840    	; 0x924 <__stack+0x25>
     5dc:	e0 90 2b 02 	lds	r14, 0x022B
     5e0:	f0 90 2c 02 	lds	r15, 0x022C
     5e4:	e4 14       	cp	r14, r4
     5e6:	f5 04       	cpc	r15, r5
     5e8:	08 f4       	brcc	.+2      	; 0x5ec <estimate_distance+0x1e0>
     5ea:	60 c1       	rjmp	.+704    	; 0x8ac <estimate_distance+0x4a0>
     5ec:	e0 90 2d 02 	lds	r14, 0x022D
     5f0:	f0 90 2e 02 	lds	r15, 0x022E
     5f4:	e4 14       	cp	r14, r4
     5f6:	f5 04       	cpc	r15, r5
     5f8:	08 f4       	brcc	.+2      	; 0x5fc <estimate_distance+0x1f0>
     5fa:	9d c1       	rjmp	.+826    	; 0x936 <__stack+0x37>
     5fc:	e0 90 2f 02 	lds	r14, 0x022F
     600:	f0 90 30 02 	lds	r15, 0x0230
     604:	e4 14       	cp	r14, r4
     606:	f5 04       	cpc	r15, r5
     608:	08 f4       	brcc	.+2      	; 0x60c <estimate_distance+0x200>
     60a:	9e c1       	rjmp	.+828    	; 0x948 <__stack+0x49>
     60c:	e0 90 31 02 	lds	r14, 0x0231
     610:	f0 90 32 02 	lds	r15, 0x0232
     614:	e4 14       	cp	r14, r4
     616:	f5 04       	cpc	r15, r5
     618:	08 f4       	brcc	.+2      	; 0x61c <estimate_distance+0x210>
     61a:	9f c1       	rjmp	.+830    	; 0x95a <__stack+0x5b>
     61c:	e0 90 33 02 	lds	r14, 0x0233
     620:	f0 90 34 02 	lds	r15, 0x0234
     624:	e4 14       	cp	r14, r4
     626:	f5 04       	cpc	r15, r5
     628:	08 f4       	brcc	.+2      	; 0x62c <estimate_distance+0x220>
     62a:	a0 c1       	rjmp	.+832    	; 0x96c <__stack+0x6d>
     62c:	e0 90 35 02 	lds	r14, 0x0235
     630:	f0 90 36 02 	lds	r15, 0x0236
     634:	e4 14       	cp	r14, r4
     636:	f5 04       	cpc	r15, r5
     638:	08 f4       	brcc	.+2      	; 0x63c <estimate_distance+0x230>
     63a:	a1 c1       	rjmp	.+834    	; 0x97e <__stack+0x7f>
     63c:	e0 90 37 02 	lds	r14, 0x0237
     640:	f0 90 38 02 	lds	r15, 0x0238
     644:	e4 14       	cp	r14, r4
     646:	f5 04       	cpc	r15, r5
     648:	08 f4       	brcc	.+2      	; 0x64c <estimate_distance+0x240>
     64a:	9d c1       	rjmp	.+826    	; 0x986 <__stack+0x87>
     64c:	e0 90 39 02 	lds	r14, 0x0239
     650:	f0 90 3a 02 	lds	r15, 0x023A
     654:	e4 14       	cp	r14, r4
     656:	f5 04       	cpc	r15, r5
     658:	08 f4       	brcc	.+2      	; 0x65c <estimate_distance+0x250>
     65a:	9e c1       	rjmp	.+828    	; 0x998 <__stack+0x99>
     65c:	e0 90 3b 02 	lds	r14, 0x023B
     660:	f0 90 3c 02 	lds	r15, 0x023C
     664:	e4 14       	cp	r14, r4
     666:	f5 04       	cpc	r15, r5
     668:	08 f4       	brcc	.+2      	; 0x66c <estimate_distance+0x260>
     66a:	9f c1       	rjmp	.+830    	; 0x9aa <__stack+0xab>
     66c:	0c e0       	ldi	r16, 0x0C	; 12
     66e:	10 e0       	ldi	r17, 0x00	; 0
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	a0 ed       	ldi	r26, 0xD0	; 208
     676:	b0 e4       	ldi	r27, 0x40	; 64
     678:	89 83       	std	Y+1, r24	; 0x01
     67a:	9a 83       	std	Y+2, r25	; 0x02
     67c:	ab 83       	std	Y+3, r26	; 0x03
     67e:	bc 83       	std	Y+4, r27	; 0x04
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     680:	00 0f       	add	r16, r16
     682:	11 1f       	adc	r17, r17
     684:	0f 5d       	subi	r16, 0xDF	; 223
     686:	1d 4f       	sbci	r17, 0xFD	; 253
     688:	d8 01       	movw	r26, r16
     68a:	8d 91       	ld	r24, X+
     68c:	9c 91       	ld	r25, X
     68e:	b7 01       	movw	r22, r14
     690:	68 1b       	sub	r22, r24
     692:	79 0b       	sbc	r23, r25
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 a6 11 	call	0x234c	; 0x234c <__floatunsisf>
     69c:	9b 01       	movw	r18, r22
     69e:	ac 01       	movw	r20, r24
     6a0:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__addsf3>
     6a4:	3b 01       	movw	r6, r22
     6a6:	4c 01       	movw	r8, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     6a8:	b2 01       	movw	r22, r4
     6aa:	88 27       	eor	r24, r24
     6ac:	77 fd       	sbrc	r23, 7
     6ae:	80 95       	com	r24
     6b0:	98 2f       	mov	r25, r24
     6b2:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__floatsisf>
     6b6:	5b 01       	movw	r10, r22
     6b8:	6c 01       	movw	r12, r24
     6ba:	b7 01       	movw	r22, r14
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 a6 11 	call	0x234c	; 0x234c <__floatunsisf>
     6c4:	7b 01       	movw	r14, r22
     6c6:	8c 01       	movw	r16, r24
     6c8:	c4 01       	movw	r24, r8
     6ca:	b3 01       	movw	r22, r6
     6cc:	29 81       	ldd	r18, Y+1	; 0x01
     6ce:	3a 81       	ldd	r19, Y+2	; 0x02
     6d0:	4b 81       	ldd	r20, Y+3	; 0x03
     6d2:	5c 81       	ldd	r21, Y+4	; 0x04
     6d4:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     6d8:	9b 01       	movw	r18, r22
     6da:	ac 01       	movw	r20, r24
     6dc:	c8 01       	movw	r24, r16
     6de:	b7 01       	movw	r22, r14
     6e0:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__subsf3>
     6e4:	9b 01       	movw	r18, r22
     6e6:	ac 01       	movw	r20, r24
     6e8:	c6 01       	movw	r24, r12
     6ea:	b5 01       	movw	r22, r10
     6ec:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__subsf3>
            b=((int)((int)b/(int)slope));
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	40 e2       	ldi	r20, 0x20	; 32
     6f6:	51 e4       	ldi	r21, 0x41	; 65
     6f8:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     6fc:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__fixsfsi>
     700:	7b 01       	movw	r14, r22
     702:	8c 01       	movw	r16, r24
     704:	c4 01       	movw	r24, r8
     706:	b3 01       	movw	r22, r6
     708:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__fixsfsi>
     70c:	9b 01       	movw	r18, r22
     70e:	ac 01       	movw	r20, r24
     710:	c7 01       	movw	r24, r14
     712:	b9 01       	movw	r22, r18
     714:	0e 94 33 14 	call	0x2866	; 0x2866 <__divmodhi4>
            dist_high=b;
     718:	88 27       	eor	r24, r24
     71a:	77 fd       	sbrc	r23, 7
     71c:	80 95       	com	r24
     71e:	98 2f       	mov	r25, r24
     720:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__floatsisf>
     724:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
     728:	6d 83       	std	Y+5, r22	; 0x05
     72a:	95 ce       	rjmp	.-726    	; 0x456 <estimate_distance+0x4a>
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
     72c:	1d 82       	std	Y+5, r1	; 0x05
     72e:	93 ce       	rjmp	.-730    	; 0x456 <estimate_distance+0x4a>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     730:	33 24       	eor	r3, r3
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     732:	2d 81       	ldd	r18, Y+5	; 0x05
     734:	2f 3f       	cpi	r18, 0xFF	; 255
     736:	09 f4       	brne	.+2      	; 0x73a <estimate_distance+0x32e>
     738:	26 cf       	rjmp	.-436    	; 0x586 <estimate_distance+0x17a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     73a:	b2 01       	movw	r22, r4
     73c:	88 27       	eor	r24, r24
     73e:	77 fd       	sbrc	r23, 7
     740:	80 95       	com	r24
     742:	98 2f       	mov	r25, r24
     744:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__floatsisf>
     748:	5b 01       	movw	r10, r22
     74a:	6c 01       	movw	r12, r24
     74c:	ad 81       	ldd	r26, Y+5	; 0x05
     74e:	6a 2f       	mov	r22, r26
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	0e 94 a6 11 	call	0x234c	; 0x234c <__floatunsisf>
     75a:	7b 01       	movw	r14, r22
     75c:	8c 01       	movw	r16, r24
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	81 e6       	ldi	r24, 0x61	; 97
     764:	94 e4       	ldi	r25, 0x44	; 68
     766:	a6 01       	movw	r20, r12
     768:	95 01       	movw	r18, r10
     76a:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__subsf3>
     76e:	9b 01       	movw	r18, r22
     770:	ac 01       	movw	r20, r24
     772:	c8 01       	movw	r24, r16
     774:	b7 01       	movw	r22, r14
     776:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     77a:	3b 01       	movw	r6, r22
     77c:	4c 01       	movw	r8, r24
     77e:	63 2d       	mov	r22, r3
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e 94 a6 11 	call	0x234c	; 0x234c <__floatunsisf>
     78a:	7b 01       	movw	r14, r22
     78c:	8c 01       	movw	r16, r24
     78e:	c6 01       	movw	r24, r12
     790:	b5 01       	movw	r22, r10
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	4f e2       	ldi	r20, 0x2F	; 47
     798:	54 e4       	ldi	r21, 0x44	; 68
     79a:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__subsf3>
     79e:	9b 01       	movw	r18, r22
     7a0:	ac 01       	movw	r20, r24
     7a2:	c8 01       	movw	r24, r16
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     7aa:	9b 01       	movw	r18, r22
     7ac:	ac 01       	movw	r20, r24
     7ae:	c4 01       	movw	r24, r8
     7b0:	b3 01       	movw	r22, r6
     7b2:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__addsf3>
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	48 e4       	ldi	r20, 0x48	; 72
     7bc:	53 e4       	ldi	r21, 0x43	; 67
     7be:	0e 94 18 10 	call	0x2030	; 0x2030 <__divsf3>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	44 e0       	ldi	r20, 0x04	; 4
     7c8:	52 e4       	ldi	r21, 0x42	; 66
     7ca:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__addsf3>
     7ce:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
     7d2:	86 2f       	mov	r24, r22
     7d4:	47 ce       	rjmp	.-882    	; 0x464 <estimate_distance+0x58>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     7d6:	a5 e0       	ldi	r26, 0x05	; 5
     7d8:	3a 2e       	mov	r3, r26
     7da:	e5 e0       	ldi	r30, 0x05	; 5
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     7de:	ee 0f       	add	r30, r30
     7e0:	ff 1f       	adc	r31, r31
     7e2:	ea 5b       	subi	r30, 0xBA	; 186
     7e4:	fd 4f       	sbci	r31, 0xFD	; 253
     7e6:	80 81       	ld	r24, Z
     7e8:	91 81       	ldd	r25, Z+1	; 0x01
     7ea:	b7 01       	movw	r22, r14
     7ec:	68 1b       	sub	r22, r24
     7ee:	79 0b       	sbc	r23, r25
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 a6 11 	call	0x234c	; 0x234c <__floatunsisf>
     7f8:	9b 01       	movw	r18, r22
     7fa:	ac 01       	movw	r20, r24
     7fc:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__addsf3>
     800:	3b 01       	movw	r6, r22
     802:	4c 01       	movw	r8, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     804:	b8 01       	movw	r22, r16
     806:	88 27       	eor	r24, r24
     808:	77 fd       	sbrc	r23, 7
     80a:	80 95       	com	r24
     80c:	98 2f       	mov	r25, r24
     80e:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__floatsisf>
     812:	5b 01       	movw	r10, r22
     814:	6c 01       	movw	r12, r24
     816:	b7 01       	movw	r22, r14
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 a6 11 	call	0x234c	; 0x234c <__floatunsisf>
     820:	7b 01       	movw	r14, r22
     822:	8c 01       	movw	r16, r24
     824:	63 2d       	mov	r22, r3
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	0e 94 a6 11 	call	0x234c	; 0x234c <__floatunsisf>
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	5f e3       	ldi	r21, 0x3F	; 63
     838:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	50 e0       	ldi	r21, 0x00	; 0
     844:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__addsf3>
     848:	a4 01       	movw	r20, r8
     84a:	93 01       	movw	r18, r6
     84c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     850:	9b 01       	movw	r18, r22
     852:	ac 01       	movw	r20, r24
     854:	c8 01       	movw	r24, r16
     856:	b7 01       	movw	r22, r14
     858:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__subsf3>
     85c:	9b 01       	movw	r18, r22
     85e:	ac 01       	movw	r20, r24
     860:	c6 01       	movw	r24, r12
     862:	b5 01       	movw	r22, r10
     864:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__subsf3>
                b=((int)((int)b/(int)slope));
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	40 e2       	ldi	r20, 0x20	; 32
     86e:	51 e4       	ldi	r21, 0x41	; 65
     870:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     874:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__fixsfsi>
     878:	7b 01       	movw	r14, r22
     87a:	8c 01       	movw	r16, r24
     87c:	c4 01       	movw	r24, r8
     87e:	b3 01       	movw	r22, r6
     880:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__fixsfsi>
     884:	9b 01       	movw	r18, r22
     886:	ac 01       	movw	r20, r24
     888:	c7 01       	movw	r24, r14
     88a:	b9 01       	movw	r22, r18
     88c:	0e 94 33 14 	call	0x2866	; 0x2866 <__divmodhi4>
                dist_low=b;
     890:	88 27       	eor	r24, r24
     892:	77 fd       	sbrc	r23, 7
     894:	80 95       	com	r24
     896:	98 2f       	mov	r25, r24
     898:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__floatsisf>
     89c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
     8a0:	36 2e       	mov	r3, r22
            }
        }
    }

    if (dist_low != 255) {
     8a2:	ff ef       	ldi	r31, 0xFF	; 255
     8a4:	6f 17       	cp	r22, r31
     8a6:	09 f0       	breq	.+2      	; 0x8aa <estimate_distance+0x49e>
     8a8:	44 cf       	rjmp	.-376    	; 0x732 <estimate_distance+0x326>
     8aa:	da cd       	rjmp	.-1100   	; 0x460 <estimate_distance+0x54>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     8ac:	85 e0       	ldi	r24, 0x05	; 5
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	65 e0       	ldi	r22, 0x05	; 5
     8b2:	8c 01       	movw	r16, r24
     8b4:	01 50       	subi	r16, 0x01	; 1
     8b6:	10 40       	sbci	r17, 0x00	; 0
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0e 94 a6 11 	call	0x234c	; 0x234c <__floatunsisf>
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	40 e0       	ldi	r20, 0x00	; 0
     8c8:	5f e3       	ldi	r21, 0x3F	; 63
     8ca:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulsf3>
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	40 e0       	ldi	r20, 0x00	; 0
     8d4:	50 e0       	ldi	r21, 0x00	; 0
     8d6:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__addsf3>
     8da:	69 83       	std	Y+1, r22	; 0x01
     8dc:	7a 83       	std	Y+2, r23	; 0x02
     8de:	8b 83       	std	Y+3, r24	; 0x03
     8e0:	9c 83       	std	Y+4, r25	; 0x04
     8e2:	ce ce       	rjmp	.-612    	; 0x680 <estimate_distance+0x274>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     8e4:	33 24       	eor	r3, r3
     8e6:	33 94       	inc	r3
     8e8:	e1 e0       	ldi	r30, 0x01	; 1
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	78 cf       	rjmp	.-272    	; 0x7de <estimate_distance+0x3d2>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	61 e0       	ldi	r22, 0x01	; 1
     8f4:	de cf       	rjmp	.-68     	; 0x8b2 <estimate_distance+0x4a6>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     8f6:	92 e0       	ldi	r25, 0x02	; 2
     8f8:	39 2e       	mov	r3, r25
     8fa:	e2 e0       	ldi	r30, 0x02	; 2
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	6f cf       	rjmp	.-290    	; 0x7de <estimate_distance+0x3d2>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     900:	82 e0       	ldi	r24, 0x02	; 2
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	62 e0       	ldi	r22, 0x02	; 2
     906:	d5 cf       	rjmp	.-86     	; 0x8b2 <estimate_distance+0x4a6>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     908:	83 e0       	ldi	r24, 0x03	; 3
     90a:	38 2e       	mov	r3, r24
     90c:	e3 e0       	ldi	r30, 0x03	; 3
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	66 cf       	rjmp	.-308    	; 0x7de <estimate_distance+0x3d2>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	63 e0       	ldi	r22, 0x03	; 3
     918:	cc cf       	rjmp	.-104    	; 0x8b2 <estimate_distance+0x4a6>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     91a:	b4 e0       	ldi	r27, 0x04	; 4
     91c:	3b 2e       	mov	r3, r27
     91e:	e4 e0       	ldi	r30, 0x04	; 4
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	5d cf       	rjmp	.-326    	; 0x7de <estimate_distance+0x3d2>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     924:	84 e0       	ldi	r24, 0x04	; 4
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	64 e0       	ldi	r22, 0x04	; 4
     92a:	c3 cf       	rjmp	.-122    	; 0x8b2 <estimate_distance+0x4a6>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     92c:	f6 e0       	ldi	r31, 0x06	; 6
     92e:	3f 2e       	mov	r3, r31
     930:	e6 e0       	ldi	r30, 0x06	; 6
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	54 cf       	rjmp	.-344    	; 0x7de <estimate_distance+0x3d2>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     936:	86 e0       	ldi	r24, 0x06	; 6
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	66 e0       	ldi	r22, 0x06	; 6
     93c:	ba cf       	rjmp	.-140    	; 0x8b2 <estimate_distance+0x4a6>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     93e:	e7 e0       	ldi	r30, 0x07	; 7
     940:	3e 2e       	mov	r3, r30
     942:	e7 e0       	ldi	r30, 0x07	; 7
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	4b cf       	rjmp	.-362    	; 0x7de <estimate_distance+0x3d2>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     948:	87 e0       	ldi	r24, 0x07	; 7
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	67 e0       	ldi	r22, 0x07	; 7
     94e:	b1 cf       	rjmp	.-158    	; 0x8b2 <estimate_distance+0x4a6>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     950:	78 e0       	ldi	r23, 0x08	; 8
     952:	37 2e       	mov	r3, r23
     954:	e8 e0       	ldi	r30, 0x08	; 8
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	42 cf       	rjmp	.-380    	; 0x7de <estimate_distance+0x3d2>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     95a:	88 e0       	ldi	r24, 0x08	; 8
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	68 e0       	ldi	r22, 0x08	; 8
     960:	a8 cf       	rjmp	.-176    	; 0x8b2 <estimate_distance+0x4a6>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     962:	69 e0       	ldi	r22, 0x09	; 9
     964:	36 2e       	mov	r3, r22
     966:	e9 e0       	ldi	r30, 0x09	; 9
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	39 cf       	rjmp	.-398    	; 0x7de <estimate_distance+0x3d2>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     96c:	89 e0       	ldi	r24, 0x09	; 9
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	69 e0       	ldi	r22, 0x09	; 9
     972:	9f cf       	rjmp	.-194    	; 0x8b2 <estimate_distance+0x4a6>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     974:	5a e0       	ldi	r21, 0x0A	; 10
     976:	35 2e       	mov	r3, r21
     978:	ea e0       	ldi	r30, 0x0A	; 10
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	30 cf       	rjmp	.-416    	; 0x7de <estimate_distance+0x3d2>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     97e:	8a e0       	ldi	r24, 0x0A	; 10
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	6a e0       	ldi	r22, 0x0A	; 10
     984:	96 cf       	rjmp	.-212    	; 0x8b2 <estimate_distance+0x4a6>
     986:	8b e0       	ldi	r24, 0x0B	; 11
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	6b e0       	ldi	r22, 0x0B	; 11
     98c:	92 cf       	rjmp	.-220    	; 0x8b2 <estimate_distance+0x4a6>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     98e:	4b e0       	ldi	r20, 0x0B	; 11
     990:	34 2e       	mov	r3, r20
     992:	eb e0       	ldi	r30, 0x0B	; 11
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	23 cf       	rjmp	.-442    	; 0x7de <estimate_distance+0x3d2>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     998:	8c e0       	ldi	r24, 0x0C	; 12
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	6c e0       	ldi	r22, 0x0C	; 12
     99e:	89 cf       	rjmp	.-238    	; 0x8b2 <estimate_distance+0x4a6>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     9a0:	3c e0       	ldi	r19, 0x0C	; 12
     9a2:	33 2e       	mov	r3, r19
     9a4:	ec e0       	ldi	r30, 0x0C	; 12
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	1a cf       	rjmp	.-460    	; 0x7de <estimate_distance+0x3d2>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     9aa:	8d e0       	ldi	r24, 0x0D	; 13
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	6d e0       	ldi	r22, 0x0D	; 13
     9b0:	80 cf       	rjmp	.-256    	; 0x8b2 <estimate_distance+0x4a6>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     9b2:	2d e0       	ldi	r18, 0x0D	; 13
     9b4:	32 2e       	mov	r3, r18
     9b6:	ed e0       	ldi	r30, 0x0D	; 13
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	11 cf       	rjmp	.-478    	; 0x7de <estimate_distance+0x3d2>

000009bc <set_color>:
    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);*/

        if(rgb&(1<<0) ||rgb&(1<<1)){
     9bc:	28 2f       	mov	r18, r24
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	c9 01       	movw	r24, r18
     9c2:	83 70       	andi	r24, 0x03	; 3
     9c4:	90 70       	andi	r25, 0x00	; 0
     9c6:	89 2b       	or	r24, r25
     9c8:	b1 f4       	brne	.+44     	; 0x9f6 <set_color+0x3a>
          DDRD |= 1;
          PORTD |= 1;
        }
        else{
          DDRD &= ~(1);
     9ca:	50 98       	cbi	0x0a, 0	; 10
        }
        if(rgb&(1<<2) ||rgb&(1<<3)){
     9cc:	c9 01       	movw	r24, r18
     9ce:	8c 70       	andi	r24, 0x0C	; 12
     9d0:	90 70       	andi	r25, 0x00	; 0
     9d2:	89 2b       	or	r24, r25
     9d4:	39 f4       	brne	.+14     	; 0x9e4 <set_color+0x28>
          DDRD |= 1<<1;
          PORTD |= 1<<1;
        }
        else{
          DDRD &= ~(1<<1);
     9d6:	51 98       	cbi	0x0a, 1	; 10
        }
        if(rgb&(1<<4) ||rgb&(1<<5)){
     9d8:	20 73       	andi	r18, 0x30	; 48
     9da:	30 70       	andi	r19, 0x00	; 0
     9dc:	23 2b       	or	r18, r19
     9de:	41 f4       	brne	.+16     	; 0x9f0 <set_color+0x34>
          DDRD |= 1<<2;
          PORTD |= 1<<2;
        }
        else{
          DDRD &= ~(1<<2);
     9e0:	52 98       	cbi	0x0a, 2	; 10
     9e2:	08 95       	ret
        }
        else{
          DDRD &= ~(1);
        }
        if(rgb&(1<<2) ||rgb&(1<<3)){
          DDRD |= 1<<1;
     9e4:	51 9a       	sbi	0x0a, 1	; 10
          PORTD |= 1<<1;
     9e6:	59 9a       	sbi	0x0b, 1	; 11
        }
        else{
          DDRD &= ~(1<<1);
        }
        if(rgb&(1<<4) ||rgb&(1<<5)){
     9e8:	20 73       	andi	r18, 0x30	; 48
     9ea:	30 70       	andi	r19, 0x00	; 0
     9ec:	23 2b       	or	r18, r19
     9ee:	c1 f3       	breq	.-16     	; 0x9e0 <set_color+0x24>
          DDRD |= 1<<2;
     9f0:	52 9a       	sbi	0x0a, 2	; 10
          PORTD |= 1<<2;
     9f2:	5a 9a       	sbi	0x0b, 2	; 11
     9f4:	08 95       	ret
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);*/

        if(rgb&(1<<0) ||rgb&(1<<1)){
          DDRD |= 1;
     9f6:	50 9a       	sbi	0x0a, 0	; 10
          PORTD |= 1;
     9f8:	58 9a       	sbi	0x0b, 0	; 11
     9fa:	e8 cf       	rjmp	.-48     	; 0x9cc <set_color+0x10>

000009fc <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     9fc:	1f 92       	push	r1
     9fe:	0f 92       	push	r0
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	0f 92       	push	r0
     a04:	11 24       	eor	r1, r1
     a06:	8f 93       	push	r24
     a08:	9f 93       	push	r25
    rx_timer_off();
     a0a:	10 92 81 00 	sts	0x0081, r1
     a0e:	10 92 85 00 	sts	0x0085, r1
     a12:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     a16:	91 e0       	ldi	r25, 0x01	; 1
     a18:	90 93 20 02 	sts	0x0220, r25
    rx_leadingbyte = 1;
     a1c:	90 93 64 02 	sts	0x0264, r25
    rx_busy = 0;
     a20:	10 92 47 02 	sts	0x0247, r1
    adc_trigger_high_gain();
     a24:	10 92 7c 00 	sts	0x007C, r1
     a28:	83 ea       	ldi	r24, 0xA3	; 163
     a2a:	80 93 7a 00 	sts	0x007A, r24
     a2e:	90 93 7b 00 	sts	0x007B, r25
}
     a32:	9f 91       	pop	r25
     a34:	8f 91       	pop	r24
     a36:	0f 90       	pop	r0
     a38:	0f be       	out	0x3f, r0	; 63
     a3a:	0f 90       	pop	r0
     a3c:	1f 90       	pop	r1
     a3e:	18 95       	reti

00000a40 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     a40:	1f 92       	push	r1
     a42:	0f 92       	push	r0
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	0f 92       	push	r0
     a48:	11 24       	eor	r1, r1
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	2f 93       	push	r18
     a50:	3f 93       	push	r19
     a52:	4f 93       	push	r20
     a54:	5f 93       	push	r21
     a56:	6f 93       	push	r22
     a58:	7f 93       	push	r23
     a5a:	8f 93       	push	r24
     a5c:	9f 93       	push	r25
     a5e:	af 93       	push	r26
     a60:	bf 93       	push	r27
     a62:	ef 93       	push	r30
     a64:	ff 93       	push	r31
    DDRB &= ~((1<<1)|(1<<2)|(1<<6));
     a66:	84 b1       	in	r24, 0x04	; 4
     a68:	89 7b       	andi	r24, 0xB9	; 185
     a6a:	84 b9       	out	0x04, r24	; 4
    uint16_t timer = TCNT1;
     a6c:	60 91 84 00 	lds	r22, 0x0084
     a70:	70 91 85 00 	lds	r23, 0x0085
    uint8_t pb = PINB;
     a74:	93 b1       	in	r25, 0x03	; 3

    rx_busy = 1;
     a76:	01 e0       	ldi	r16, 0x01	; 1
     a78:	00 93 47 02 	sts	0x0247, r16
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     a7c:	80 91 20 02 	lds	r24, 0x0220
     a80:	88 23       	and	r24, r24
     a82:	d9 f1       	breq	.+118    	; 0xafa <__vector_23+0xba>
    adc_trigger_high_gain();
}

/*ISIR*/
static inline void estimate_direction(uint8_t pb){
  switch(pb & 0x46){							  // see PB1, PB2, PB6
     a84:	89 2f       	mov	r24, r25
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	86 74       	andi	r24, 0x46	; 70
     a8a:	90 70       	andi	r25, 0x00	; 0
     a8c:	86 30       	cpi	r24, 0x06	; 6
     a8e:	91 05       	cpc	r25, r1
     a90:	09 f4       	brne	.+2      	; 0xa94 <__vector_23+0x54>
     a92:	f7 c0       	rjmp	.+494    	; 0xc82 <__vector_23+0x242>
     a94:	87 30       	cpi	r24, 0x07	; 7
     a96:	91 05       	cpc	r25, r1
     a98:	0c f0       	brlt	.+2      	; 0xa9c <__vector_23+0x5c>
     a9a:	c0 c0       	rjmp	.+384    	; 0xc1c <__vector_23+0x1dc>
     a9c:	82 30       	cpi	r24, 0x02	; 2
     a9e:	91 05       	cpc	r25, r1
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <__vector_23+0x64>
     aa2:	06 c1       	rjmp	.+524    	; 0xcb0 <__vector_23+0x270>
     aa4:	04 97       	sbiw	r24, 0x04	; 4
     aa6:	09 f4       	brne	.+2      	; 0xaaa <__vector_23+0x6a>
     aa8:	00 c1       	rjmp	.+512    	; 0xcaa <__vector_23+0x26a>
		case 0x44:
			rx_direction = NORTH;
      set_color(RGB(1, 0, 0));
			break;
		default:
			rx_direction = NONE;
     aaa:	86 e0       	ldi	r24, 0x06	; 6
     aac:	80 93 7b 02 	sts	0x027B, r24
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
        /*ISIR*/
        estimate_direction(pb);
        rx_timer_on();
     ab0:	10 92 85 00 	sts	0x0085, r1
     ab4:	10 92 84 00 	sts	0x0084, r1
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	80 93 81 00 	sts	0x0081, r24
        rx_bytevalue = 0;
     abe:	10 92 78 02 	sts	0x0278, r1
        rx_leadingbit = 0;
     ac2:	10 92 20 02 	sts	0x0220, r1
        if (rx_leadingbyte) {
     ac6:	80 91 64 02 	lds	r24, 0x0264
     aca:	88 23       	and	r24, r24
     acc:	09 f4       	brne	.+2      	; 0xad0 <__vector_23+0x90>
     ace:	93 c0       	rjmp	.+294    	; 0xbf6 <__vector_23+0x1b6>
            adc_finish_conversion();
     ad0:	80 91 7a 00 	lds	r24, 0x007A
     ad4:	86 fd       	sbrc	r24, 6
     ad6:	fc cf       	rjmp	.-8      	; 0xad0 <__vector_23+0x90>
            rx_dist.high_gain = ADCW;
     ad8:	80 91 78 00 	lds	r24, 0x0078
     adc:	90 91 79 00 	lds	r25, 0x0079
     ae0:	90 93 42 02 	sts	0x0242, r25
     ae4:	80 93 41 02 	sts	0x0241, r24
            adc_trigger_low_gain();
     ae8:	91 e0       	ldi	r25, 0x01	; 1
     aea:	90 93 7c 00 	sts	0x007C, r25
     aee:	83 ea       	ldi	r24, 0xA3	; 163
     af0:	80 93 7a 00 	sts	0x007A, r24
     af4:	90 93 7b 00 	sts	0x007B, r25
     af8:	7e c0       	rjmp	.+252    	; 0xbf6 <__vector_23+0x1b6>
        }
    } else {

        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     afa:	cb 01       	movw	r24, r22
     afc:	87 58       	subi	r24, 0x87	; 135
     afe:	90 40       	sbci	r25, 0x00	; 0
     b00:	84 57       	subi	r24, 0x74	; 116
     b02:	99 40       	sbci	r25, 0x09	; 9
     b04:	08 f0       	brcs	.+2      	; 0xb08 <__vector_23+0xc8>
     b06:	64 c0       	rjmp	.+200    	; 0xbd0 <__vector_23+0x190>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     b08:	66 58       	subi	r22, 0x86	; 134
     b0a:	70 40       	sbci	r23, 0x00	; 0
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	24 ef       	ldi	r18, 0xF4	; 244
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	40 e0       	ldi	r20, 0x00	; 0
     b16:	50 e0       	ldi	r21, 0x00	; 0
     b18:	0e 94 14 14 	call	0x2828	; 0x2828 <__mulsi3>
     b1c:	bc 01       	movw	r22, r24
     b1e:	88 27       	eor	r24, r24
     b20:	99 27       	eor	r25, r25
            if (bitindex <= 7) { // Data bit received.
     b22:	68 30       	cpi	r22, 0x08	; 8
     b24:	08 f4       	brcc	.+2      	; 0xb28 <__vector_23+0xe8>
     b26:	b4 c0       	rjmp	.+360    	; 0xc90 <__vector_23+0x250>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     b28:	00 93 20 02 	sts	0x0220, r16
                if (rx_leadingbyte) {
     b2c:	80 91 64 02 	lds	r24, 0x0264
     b30:	88 23       	and	r24, r24
     b32:	09 f0       	breq	.+2      	; 0xb36 <__vector_23+0xf6>
     b34:	83 c0       	rjmp	.+262    	; 0xc3c <__vector_23+0x1fc>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     b36:	80 91 3e 02 	lds	r24, 0x023E
     b3a:	e0 91 06 01 	lds	r30, 0x0106
     b3e:	f0 91 07 01 	lds	r31, 0x0107
     b42:	e8 0f       	add	r30, r24
     b44:	f1 1d       	adc	r31, r1
     b46:	80 91 78 02 	lds	r24, 0x0278
     b4a:	80 83       	st	Z, r24
                    rx_byteindex++;
     b4c:	80 91 3e 02 	lds	r24, 0x023E
     b50:	8f 5f       	subi	r24, 0xFF	; 255
     b52:	80 93 3e 02 	sts	0x023E, r24

                    if (rx_byteindex == sizeof(message_t)) {
     b56:	8c 30       	cpi	r24, 0x0C	; 12
     b58:	09 f0       	breq	.+2      	; 0xb5c <__vector_23+0x11c>
     b5a:	4d c0       	rjmp	.+154    	; 0xbf6 <__vector_23+0x1b6>
                        rx_timer_off();
     b5c:	10 92 81 00 	sts	0x0081, r1
     b60:	10 92 85 00 	sts	0x0085, r1
     b64:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
     b68:	00 93 64 02 	sts	0x0264, r16
                        rx_busy = 0;
     b6c:	10 92 47 02 	sts	0x0247, r1
                        if (rx_msg.crc == message_crc(&rx_msg))
     b70:	00 91 74 02 	lds	r16, 0x0274
     b74:	10 91 75 02 	lds	r17, 0x0275
     b78:	8a e6       	ldi	r24, 0x6A	; 106
     b7a:	92 e0       	ldi	r25, 0x02	; 2
     b7c:	0e 94 0c 0c 	call	0x1818	; 0x1818 <message_crc>
     b80:	08 17       	cp	r16, r24
     b82:	19 07       	cpc	r17, r25
     b84:	c1 f5       	brne	.+112    	; 0xbf6 <__vector_23+0x1b6>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     b86:	90 91 73 02 	lds	r25, 0x0273
     b8a:	97 ff       	sbrs	r25, 7
     b8c:	a7 c0       	rjmp	.+334    	; 0xcdc <__vector_23+0x29c>
        kilo_message_rx(&rx_msg, &rx_dist, &rx_direction);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     b8e:	89 2f       	mov	r24, r25
     b90:	88 58       	subi	r24, 0x88	; 136
     b92:	83 30       	cpi	r24, 0x03	; 3
     b94:	30 f0       	brcs	.+12     	; 0xba2 <__vector_23+0x162>
        motors_off();
     b96:	53 98       	cbi	0x0a, 3	; 10
     b98:	23 98       	cbi	0x04, 3	; 4
     b9a:	10 92 b4 00 	sts	0x00B4, r1
     b9e:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
     ba2:	96 38       	cpi	r25, 0x86	; 134
     ba4:	09 f4       	brne	.+2      	; 0xba8 <__vector_23+0x168>
     ba6:	10 c1       	rjmp	.+544    	; 0xdc8 <__vector_23+0x388>
     ba8:	97 38       	cpi	r25, 0x87	; 135
     baa:	08 f0       	brcs	.+2      	; 0xbae <__vector_23+0x16e>
     bac:	a3 c0       	rjmp	.+326    	; 0xcf4 <__vector_23+0x2b4>
     bae:	93 38       	cpi	r25, 0x83	; 131
     bb0:	09 f4       	brne	.+2      	; 0xbb4 <__vector_23+0x174>
     bb2:	0e c1       	rjmp	.+540    	; 0xdd0 <__vector_23+0x390>
     bb4:	94 38       	cpi	r25, 0x84	; 132
     bb6:	08 f0       	brcs	.+2      	; 0xbba <__vector_23+0x17a>
     bb8:	a6 c0       	rjmp	.+332    	; 0xd06 <__vector_23+0x2c6>
     bba:	90 38       	cpi	r25, 0x80	; 128
     bbc:	e1 f4       	brne	.+56     	; 0xbf6 <__vector_23+0x1b6>
        case BOOT:
            tx_timer_off();
     bbe:	80 91 6e 00 	lds	r24, 0x006E
     bc2:	8d 7f       	andi	r24, 0xFD	; 253
     bc4:	80 93 6e 00 	sts	0x006E, r24
     bc8:	16 bc       	out	0x26, r1	; 38
            bootload();
     bca:	e0 e0       	ldi	r30, 0x00	; 0
     bcc:	f0 e7       	ldi	r31, 0x70	; 112
     bce:	09 95       	icall
        }
    } else {

        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
     bd0:	10 92 81 00 	sts	0x0081, r1
     bd4:	10 92 85 00 	sts	0x0085, r1
     bd8:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
     bdc:	00 93 20 02 	sts	0x0220, r16
            rx_leadingbyte = 1;
     be0:	00 93 64 02 	sts	0x0264, r16
            rx_busy = 0;
     be4:	10 92 47 02 	sts	0x0247, r1
            adc_trigger_high_gain();
     be8:	10 92 7c 00 	sts	0x007C, r1
     bec:	83 ea       	ldi	r24, 0xA3	; 163
     bee:	80 93 7a 00 	sts	0x007A, r24
     bf2:	00 93 7b 00 	sts	0x007B, r16
                    }
                }
            }
        }
    }
}
     bf6:	ff 91       	pop	r31
     bf8:	ef 91       	pop	r30
     bfa:	bf 91       	pop	r27
     bfc:	af 91       	pop	r26
     bfe:	9f 91       	pop	r25
     c00:	8f 91       	pop	r24
     c02:	7f 91       	pop	r23
     c04:	6f 91       	pop	r22
     c06:	5f 91       	pop	r21
     c08:	4f 91       	pop	r20
     c0a:	3f 91       	pop	r19
     c0c:	2f 91       	pop	r18
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	0f 90       	pop	r0
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	0f 90       	pop	r0
     c18:	1f 90       	pop	r1
     c1a:	18 95       	reti
    adc_trigger_high_gain();
}

/*ISIR*/
static inline void estimate_direction(uint8_t pb){
  switch(pb & 0x46){							  // see PB1, PB2, PB6
     c1c:	82 34       	cpi	r24, 0x42	; 66
     c1e:	91 05       	cpc	r25, r1
     c20:	09 f4       	brne	.+2      	; 0xc24 <__vector_23+0x1e4>
     c22:	50 c0       	rjmp	.+160    	; 0xcc4 <__vector_23+0x284>
     c24:	84 34       	cpi	r24, 0x44	; 68
     c26:	91 05       	cpc	r25, r1
     c28:	09 f4       	brne	.+2      	; 0xc2c <__vector_23+0x1ec>
     c2a:	46 c0       	rjmp	.+140    	; 0xcb8 <__vector_23+0x278>
     c2c:	80 34       	cpi	r24, 0x40	; 64
     c2e:	91 05       	cpc	r25, r1
     c30:	09 f0       	breq	.+2      	; 0xc34 <__vector_23+0x1f4>
     c32:	3b cf       	rjmp	.-394    	; 0xaaa <__vector_23+0x6a>
		case 0x06:
			rx_direction = SOUTH_EAST;
      set_color(RGB(1, 1, 1));
			break;
		case 0x40:
			rx_direction = NORTH_WEST;
     c34:	85 e0       	ldi	r24, 0x05	; 5
     c36:	80 93 7b 02 	sts	0x027B, r24
     c3a:	3a cf       	rjmp	.-396    	; 0xab0 <__vector_23+0x70>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
     c3c:	80 91 7a 00 	lds	r24, 0x007A
     c40:	86 fd       	sbrc	r24, 6
     c42:	fc cf       	rjmp	.-8      	; 0xc3c <__vector_23+0x1fc>
                    rx_dist.low_gain = ADCW;
     c44:	80 91 78 00 	lds	r24, 0x0078
     c48:	90 91 79 00 	lds	r25, 0x0079
     c4c:	90 93 40 02 	sts	0x0240, r25
     c50:	80 93 3f 02 	sts	0x023F, r24
                    adc_trigger_high_gain();
     c54:	10 92 7c 00 	sts	0x007C, r1
     c58:	83 ea       	ldi	r24, 0xA3	; 163
     c5a:	80 93 7a 00 	sts	0x007A, r24
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	90 93 7b 00 	sts	0x007B, r25
                    if (rx_bytevalue != 0) { // Collision detected.
     c64:	80 91 78 02 	lds	r24, 0x0278
     c68:	88 23       	and	r24, r24
     c6a:	99 f1       	breq	.+102    	; 0xcd2 <__vector_23+0x292>
                        rx_timer_off();
     c6c:	10 92 81 00 	sts	0x0081, r1
     c70:	10 92 85 00 	sts	0x0085, r1
     c74:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
     c78:	90 93 64 02 	sts	0x0264, r25
                        rx_busy = 0;
     c7c:	10 92 47 02 	sts	0x0247, r1
     c80:	ba cf       	rjmp	.-140    	; 0xbf6 <__vector_23+0x1b6>
			break;
		case 0x04:
			rx_direction = NORTH_EAST;
			break;
		case 0x06:
			rx_direction = SOUTH_EAST;
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	80 93 7b 02 	sts	0x027B, r24
      set_color(RGB(1, 1, 1));
     c88:	85 e1       	ldi	r24, 0x15	; 21
     c8a:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>
     c8e:	10 cf       	rjmp	.-480    	; 0xab0 <__vector_23+0x70>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__vector_23+0x25a>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	6a 95       	dec	r22
     c9c:	e2 f7       	brpl	.-8      	; 0xc96 <__vector_23+0x256>
     c9e:	20 91 78 02 	lds	r18, 0x0278
     ca2:	28 2b       	or	r18, r24
     ca4:	20 93 78 02 	sts	0x0278, r18
     ca8:	a6 cf       	rjmp	.-180    	; 0xbf6 <__vector_23+0x1b6>
  switch(pb & 0x46){							  // see PB1, PB2, PB6
		case 0x02:
			rx_direction = SOUTH;
			break;
		case 0x04:
			rx_direction = NORTH_EAST;
     caa:	00 93 7b 02 	sts	0x027B, r16
     cae:	00 cf       	rjmp	.-512    	; 0xab0 <__vector_23+0x70>

/*ISIR*/
static inline void estimate_direction(uint8_t pb){
  switch(pb & 0x46){							  // see PB1, PB2, PB6
		case 0x02:
			rx_direction = SOUTH;
     cb0:	83 e0       	ldi	r24, 0x03	; 3
     cb2:	80 93 7b 02 	sts	0x027B, r24
     cb6:	fc ce       	rjmp	.-520    	; 0xab0 <__vector_23+0x70>
		case 0x42:
			rx_direction = SOUTH_WEST;
      set_color(RGB(0, 0, 1));
			break;
		case 0x44:
			rx_direction = NORTH;
     cb8:	10 92 7b 02 	sts	0x027B, r1
      set_color(RGB(1, 0, 0));
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>
     cc2:	f6 ce       	rjmp	.-532    	; 0xab0 <__vector_23+0x70>
			break;
		case 0x40:
			rx_direction = NORTH_WEST;
			break;
		case 0x42:
			rx_direction = SOUTH_WEST;
     cc4:	84 e0       	ldi	r24, 0x04	; 4
     cc6:	80 93 7b 02 	sts	0x027B, r24
      set_color(RGB(0, 0, 1));
     cca:	80 e1       	ldi	r24, 0x10	; 16
     ccc:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>
     cd0:	ef ce       	rjmp	.-546    	; 0xab0 <__vector_23+0x70>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     cd2:	10 92 64 02 	sts	0x0264, r1
                        rx_byteindex = 0;
     cd6:	10 92 3e 02 	sts	0x023E, r1
     cda:	8d cf       	rjmp	.-230    	; 0xbf6 <__vector_23+0x1b6>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist, &rx_direction);
     cdc:	e0 91 00 01 	lds	r30, 0x0100
     ce0:	f0 91 01 01 	lds	r31, 0x0101
     ce4:	8a e6       	ldi	r24, 0x6A	; 106
     ce6:	92 e0       	ldi	r25, 0x02	; 2
     ce8:	6f e3       	ldi	r22, 0x3F	; 63
     cea:	72 e0       	ldi	r23, 0x02	; 2
     cec:	4b e7       	ldi	r20, 0x7B	; 123
     cee:	52 e0       	ldi	r21, 0x02	; 2
     cf0:	09 95       	icall
     cf2:	81 cf       	rjmp	.-254    	; 0xbf6 <__vector_23+0x1b6>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
     cf4:	98 38       	cpi	r25, 0x88	; 136
     cf6:	09 f4       	brne	.+2      	; 0xcfa <__vector_23+0x2ba>
     cf8:	6e c0       	rjmp	.+220    	; 0xdd6 <__vector_23+0x396>
     cfa:	98 38       	cpi	r25, 0x88	; 136
     cfc:	70 f4       	brcc	.+28     	; 0xd1a <__vector_23+0x2da>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     cfe:	82 e0       	ldi	r24, 0x02	; 2
     d00:	80 93 1d 02 	sts	0x021D, r24
     d04:	78 cf       	rjmp	.-272    	; 0xbf6 <__vector_23+0x1b6>
        kilo_message_rx(&rx_msg, &rx_dist, &rx_direction);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
     d06:	94 38       	cpi	r25, 0x84	; 132
     d08:	09 f4       	brne	.+2      	; 0xd0c <__vector_23+0x2cc>
     d0a:	79 c0       	rjmp	.+242    	; 0xdfe <__vector_23+0x3be>
     d0c:	95 38       	cpi	r25, 0x85	; 133
     d0e:	09 f0       	breq	.+2      	; 0xd12 <__vector_23+0x2d2>
     d10:	72 cf       	rjmp	.-284    	; 0xbf6 <__vector_23+0x1b6>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	80 93 1d 02 	sts	0x021D, r24
     d18:	6e cf       	rjmp	.-292    	; 0xbf6 <__vector_23+0x1b6>
        kilo_message_rx(&rx_msg, &rx_dist, &rx_direction);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
     d1a:	99 38       	cpi	r25, 0x89	; 137
     d1c:	09 f4       	brne	.+2      	; 0xd20 <__vector_23+0x2e0>
     d1e:	98 c0       	rjmp	.+304    	; 0xe50 <__vector_23+0x410>
     d20:	9a 38       	cpi	r25, 0x8A	; 138
     d22:	09 f0       	breq	.+2      	; 0xd26 <__vector_23+0x2e6>
     d24:	68 cf       	rjmp	.-304    	; 0xbf6 <__vector_23+0x1b6>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     d26:	80 91 6a 02 	lds	r24, 0x026A
     d2a:	82 30       	cpi	r24, 0x02	; 2
     d2c:	09 f4       	brne	.+2      	; 0xd30 <__vector_23+0x2f0>
     d2e:	be c0       	rjmp	.+380    	; 0xeac <__vector_23+0x46c>
     d30:	83 30       	cpi	r24, 0x03	; 3
     d32:	08 f0       	brcs	.+2      	; 0xd36 <__vector_23+0x2f6>
     d34:	74 c0       	rjmp	.+232    	; 0xe1e <__vector_23+0x3de>
     d36:	88 23       	and	r24, r24
     d38:	09 f0       	breq	.+2      	; 0xd3c <__vector_23+0x2fc>
     d3a:	64 c0       	rjmp	.+200    	; 0xe04 <__vector_23+0x3c4>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     d3c:	80 91 1d 02 	lds	r24, 0x021D
     d40:	86 30       	cpi	r24, 0x06	; 6
     d42:	09 f0       	breq	.+2      	; 0xd46 <__vector_23+0x306>
     d44:	58 cf       	rjmp	.-336    	; 0xbf6 <__vector_23+0x1b6>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     d46:	80 eb       	ldi	r24, 0xB0	; 176
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	60 91 79 02 	lds	r22, 0x0279
     d4e:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     d52:	60 91 7a 02 	lds	r22, 0x027A
     d56:	81 eb       	ldi	r24, 0xB1	; 177
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     d5e:	85 e0       	ldi	r24, 0x05	; 5
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	60 91 7e 02 	lds	r22, 0x027E
     d66:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     d6a:	89 e0       	ldi	r24, 0x09	; 9
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	60 91 69 02 	lds	r22, 0x0269
     d72:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     d76:	8c e0       	ldi	r24, 0x0C	; 12
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	60 91 7c 02 	lds	r22, 0x027C
     d7e:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     d82:	84 e1       	ldi	r24, 0x14	; 20
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	60 91 7d 02 	lds	r22, 0x027D
     d8a:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__eewr_byte_m328p>
                        motors_off();
     d8e:	53 98       	cbi	0x0a, 3	; 10
     d90:	23 98       	cbi	0x04, 3	; 4
     d92:	10 92 b4 00 	sts	0x00B4, r1
     d96:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	80 93 1d 02 	sts	0x021D, r24
     da0:	80 91 6a 02 	lds	r24, 0x026A
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
     da4:	88 23       	and	r24, r24
     da6:	09 f4       	brne	.+2      	; 0xdaa <__vector_23+0x36a>
     da8:	26 cf       	rjmp	.-436    	; 0xbf6 <__vector_23+0x1b6>
     daa:	80 91 1d 02 	lds	r24, 0x021D
     dae:	86 30       	cpi	r24, 0x06	; 6
     db0:	09 f4       	brne	.+2      	; 0xdb4 <__vector_23+0x374>
     db2:	21 cf       	rjmp	.-446    	; 0xbf6 <__vector_23+0x1b6>
                motors_on();
     db4:	53 9a       	sbi	0x0a, 3	; 10
     db6:	23 9a       	sbi	0x04, 3	; 4
     db8:	10 92 b4 00 	sts	0x00B4, r1
     dbc:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
     dc0:	86 e0       	ldi	r24, 0x06	; 6
     dc2:	80 93 1d 02 	sts	0x021D, r24
     dc6:	17 cf       	rjmp	.-466    	; 0xbf6 <__vector_23+0x1b6>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
     dc8:	85 e0       	ldi	r24, 0x05	; 5
     dca:	80 93 1d 02 	sts	0x021D, r24
     dce:	13 cf       	rjmp	.-474    	; 0xbf6 <__vector_23+0x1b6>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
     dd0:	e0 e0       	ldi	r30, 0x00	; 0
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	09 95       	icall
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     dd6:	80 91 1d 02 	lds	r24, 0x021D
     dda:	83 30       	cpi	r24, 0x03	; 3
     ddc:	09 f4       	brne	.+2      	; 0xde0 <__vector_23+0x3a0>
     dde:	0b cf       	rjmp	.-490    	; 0xbf6 <__vector_23+0x1b6>
     de0:	80 91 1d 02 	lds	r24, 0x021D
     de4:	84 30       	cpi	r24, 0x04	; 4
     de6:	09 f4       	brne	.+2      	; 0xdea <__vector_23+0x3aa>
     de8:	06 cf       	rjmp	.-500    	; 0xbf6 <__vector_23+0x1b6>
                motors_on();
     dea:	53 9a       	sbi	0x0a, 3	; 10
     dec:	23 9a       	sbi	0x04, 3	; 4
     dee:	10 92 b4 00 	sts	0x00B4, r1
     df2:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
     df6:	83 e0       	ldi	r24, 0x03	; 3
     df8:	80 93 1d 02 	sts	0x021D, r24
     dfc:	fc ce       	rjmp	.-520    	; 0xbf6 <__vector_23+0x1b6>
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     dfe:	10 92 1d 02 	sts	0x021D, r1
     e02:	f9 ce       	rjmp	.-526    	; 0xbf6 <__vector_23+0x1b6>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     e04:	81 30       	cpi	r24, 0x01	; 1
     e06:	71 f6       	brne	.-100    	; 0xda4 <__vector_23+0x364>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     e08:	80 91 6b 02 	lds	r24, 0x026B
     e0c:	90 91 6c 02 	lds	r25, 0x026C
     e10:	90 93 7a 02 	sts	0x027A, r25
     e14:	80 93 79 02 	sts	0x0279, r24
                    cur_motion = MOVE_STOP;
     e18:	10 92 1a 02 	sts	0x021A, r1
     e1c:	c6 cf       	rjmp	.-116    	; 0xdaa <__vector_23+0x36a>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     e1e:	83 30       	cpi	r24, 0x03	; 3
     e20:	09 f4       	brne	.+2      	; 0xe24 <__vector_23+0x3e4>
     e22:	5b c0       	rjmp	.+182    	; 0xeda <__vector_23+0x49a>
     e24:	84 30       	cpi	r24, 0x04	; 4
     e26:	09 f0       	breq	.+2      	; 0xe2a <__vector_23+0x3ea>
     e28:	bd cf       	rjmp	.-134    	; 0xda4 <__vector_23+0x364>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     e2a:	80 91 1a 02 	lds	r24, 0x021A
     e2e:	83 30       	cpi	r24, 0x03	; 3
     e30:	09 f4       	brne	.+2      	; 0xe34 <__vector_23+0x3f4>
     e32:	4a c0       	rjmp	.+148    	; 0xec8 <__vector_23+0x488>
     e34:	20 91 70 02 	lds	r18, 0x0270
     e38:	90 91 6f 02 	lds	r25, 0x026F
                        prev_motion = MOVE_STOP;
     e3c:	10 92 1b 02 	sts	0x021B, r1
                        cur_motion = MOVE_STRAIGHT;
     e40:	83 e0       	ldi	r24, 0x03	; 3
     e42:	80 93 1a 02 	sts	0x021A, r24
                        kilo_straight_left = calibmsg->straight_left;
     e46:	90 93 7c 02 	sts	0x027C, r25
                        kilo_straight_right = calibmsg->straight_right;
     e4a:	20 93 7d 02 	sts	0x027D, r18
     e4e:	ad cf       	rjmp	.-166    	; 0xdaa <__vector_23+0x36a>
                motors_on();
                kilo_state = MOVING;
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
     e50:	80 91 1d 02 	lds	r24, 0x021D
     e54:	86 30       	cpi	r24, 0x06	; 6
     e56:	91 f0       	breq	.+36     	; 0xe7c <__vector_23+0x43c>
                motors_on();
     e58:	53 9a       	sbi	0x0a, 3	; 10
     e5a:	23 9a       	sbi	0x04, 3	; 4
     e5c:	10 92 b4 00 	sts	0x00B4, r1
     e60:	10 92 b3 00 	sts	0x00B3, r1
                set_color(RGB(0,0,0));
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>
                prev_motion = cur_motion = MOVE_STOP;
     e6a:	10 92 1a 02 	sts	0x021A, r1
     e6e:	80 91 1a 02 	lds	r24, 0x021A
     e72:	80 93 1b 02 	sts	0x021B, r24
                kilo_state = MOVING;
     e76:	86 e0       	ldi	r24, 0x06	; 6
     e78:	80 93 1d 02 	sts	0x021D, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	00 90 6a 02 	lds	r0, 0x026A
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <__vector_23+0x44a>
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	0a 94       	dec	r0
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <__vector_23+0x446>
     e8e:	20 91 79 02 	lds	r18, 0x0279
     e92:	30 91 7a 02 	lds	r19, 0x027A
     e96:	82 23       	and	r24, r18
     e98:	93 23       	and	r25, r19
     e9a:	89 2b       	or	r24, r25
     e9c:	19 f4       	brne	.+6      	; 0xea4 <__vector_23+0x464>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
     e9e:	10 92 1a 02 	sts	0x021A, r1
     ea2:	a9 ce       	rjmp	.-686    	; 0xbf6 <__vector_23+0x1b6>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	80 93 1a 02 	sts	0x021A, r24
     eaa:	a5 ce       	rjmp	.-694    	; 0xbf6 <__vector_23+0x1b6>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     eac:	80 91 1a 02 	lds	r24, 0x021A
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	09 f1       	breq	.+66     	; 0xef6 <__vector_23+0x4b6>
     eb4:	90 91 6d 02 	lds	r25, 0x026D
                        prev_motion = MOVE_STOP;
     eb8:	10 92 1b 02 	sts	0x021B, r1
                        cur_motion = MOVE_LEFT;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	80 93 1a 02 	sts	0x021A, r24
                        kilo_turn_left = calibmsg->turn_left;
     ec2:	90 93 7e 02 	sts	0x027E, r25
     ec6:	71 cf       	rjmp	.-286    	; 0xdaa <__vector_23+0x36a>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     ec8:	20 91 70 02 	lds	r18, 0x0270
     ecc:	80 91 7d 02 	lds	r24, 0x027D
     ed0:	28 17       	cp	r18, r24
     ed2:	c1 f0       	breq	.+48     	; 0xf04 <__vector_23+0x4c4>
     ed4:	90 91 6f 02 	lds	r25, 0x026F
     ed8:	b1 cf       	rjmp	.-158    	; 0xe3c <__vector_23+0x3fc>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     eda:	80 91 1a 02 	lds	r24, 0x021A
     ede:	82 30       	cpi	r24, 0x02	; 2
     ee0:	c9 f0       	breq	.+50     	; 0xf14 <__vector_23+0x4d4>
     ee2:	90 91 6e 02 	lds	r25, 0x026E
                        prev_motion = MOVE_STOP;
     ee6:	10 92 1b 02 	sts	0x021B, r1
                        cur_motion = MOVE_RIGHT;
     eea:	82 e0       	ldi	r24, 0x02	; 2
     eec:	80 93 1a 02 	sts	0x021A, r24
                        kilo_turn_right = calibmsg->turn_right;
     ef0:	90 93 69 02 	sts	0x0269, r25
     ef4:	5a cf       	rjmp	.-332    	; 0xdaa <__vector_23+0x36a>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     ef6:	90 91 6d 02 	lds	r25, 0x026D
     efa:	80 91 7e 02 	lds	r24, 0x027E
     efe:	98 17       	cp	r25, r24
     f00:	d9 f6       	brne	.-74     	; 0xeb8 <__vector_23+0x478>
     f02:	53 cf       	rjmp	.-346    	; 0xdaa <__vector_23+0x36a>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     f04:	90 91 6f 02 	lds	r25, 0x026F
     f08:	80 91 7c 02 	lds	r24, 0x027C
     f0c:	98 17       	cp	r25, r24
     f0e:	09 f0       	breq	.+2      	; 0xf12 <__vector_23+0x4d2>
     f10:	95 cf       	rjmp	.-214    	; 0xe3c <__vector_23+0x3fc>
     f12:	4b cf       	rjmp	.-362    	; 0xdaa <__vector_23+0x36a>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     f14:	90 91 6e 02 	lds	r25, 0x026E
     f18:	80 91 69 02 	lds	r24, 0x0269
     f1c:	98 17       	cp	r25, r24
     f1e:	19 f7       	brne	.-58     	; 0xee6 <__vector_23+0x4a6>
     f20:	44 cf       	rjmp	.-376    	; 0xdaa <__vector_23+0x36a>

00000f22 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     f22:	1f 92       	push	r1
     f24:	0f 92       	push	r0
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	0f 92       	push	r0
     f2a:	11 24       	eor	r1, r1
     f2c:	2f 93       	push	r18
     f2e:	3f 93       	push	r19
     f30:	4f 93       	push	r20
     f32:	5f 93       	push	r21
     f34:	6f 93       	push	r22
     f36:	7f 93       	push	r23
     f38:	8f 93       	push	r24
     f3a:	9f 93       	push	r25
     f3c:	af 93       	push	r26
     f3e:	bf 93       	push	r27
     f40:	ef 93       	push	r30
     f42:	ff 93       	push	r31
    tx_clock += tx_increment;
     f44:	20 91 65 02 	lds	r18, 0x0265
     f48:	30 91 66 02 	lds	r19, 0x0266
     f4c:	80 91 67 02 	lds	r24, 0x0267
     f50:	90 91 68 02 	lds	r25, 0x0268
     f54:	28 0f       	add	r18, r24
     f56:	39 1f       	adc	r19, r25
     f58:	30 93 68 02 	sts	0x0268, r19
     f5c:	20 93 67 02 	sts	0x0267, r18
    tx_increment = 0xFF;
     f60:	8f ef       	ldi	r24, 0xFF	; 255
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	90 93 66 02 	sts	0x0266, r25
     f68:	80 93 65 02 	sts	0x0265, r24
    OCR0A = tx_increment;
     f6c:	8f ef       	ldi	r24, 0xFF	; 255
     f6e:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     f70:	80 91 43 02 	lds	r24, 0x0243
     f74:	90 91 44 02 	lds	r25, 0x0244
     f78:	a0 91 45 02 	lds	r26, 0x0245
     f7c:	b0 91 46 02 	lds	r27, 0x0246
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	a1 1d       	adc	r26, r1
     f84:	b1 1d       	adc	r27, r1
     f86:	80 93 43 02 	sts	0x0243, r24
     f8a:	90 93 44 02 	sts	0x0244, r25
     f8e:	a0 93 45 02 	sts	0x0245, r26
     f92:	b0 93 46 02 	sts	0x0246, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     f96:	80 91 47 02 	lds	r24, 0x0247
     f9a:	88 23       	and	r24, r24
     f9c:	59 f4       	brne	.+22     	; 0xfb4 <__vector_14+0x92>
     f9e:	80 91 76 02 	lds	r24, 0x0276
     fa2:	90 91 77 02 	lds	r25, 0x0277
     fa6:	82 17       	cp	r24, r18
     fa8:	93 07       	cpc	r25, r19
     faa:	20 f4       	brcc	.+8      	; 0xfb4 <__vector_14+0x92>
     fac:	80 91 1d 02 	lds	r24, 0x021D
     fb0:	84 30       	cpi	r24, 0x04	; 4
     fb2:	89 f0       	breq	.+34     	; 0xfd6 <__vector_14+0xb4>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     fb4:	ff 91       	pop	r31
     fb6:	ef 91       	pop	r30
     fb8:	bf 91       	pop	r27
     fba:	af 91       	pop	r26
     fbc:	9f 91       	pop	r25
     fbe:	8f 91       	pop	r24
     fc0:	7f 91       	pop	r23
     fc2:	6f 91       	pop	r22
     fc4:	5f 91       	pop	r21
     fc6:	4f 91       	pop	r20
     fc8:	3f 91       	pop	r19
     fca:	2f 91       	pop	r18
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     fd6:	e0 91 02 01 	lds	r30, 0x0102
     fda:	f0 91 03 01 	lds	r31, 0x0103
     fde:	09 95       	icall
        if (msg) {
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	41 f3       	breq	.-48     	; 0xfb4 <__vector_14+0x92>
            if (message_send(msg)) {
     fe4:	0e 94 c5 0c 	call	0x198a	; 0x198a <message_send>
     fe8:	88 23       	and	r24, r24
     fea:	49 f4       	brne	.+18     	; 0xffe <__vector_14+0xdc>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     fec:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <rand>
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	90 93 66 02 	sts	0x0266, r25
     ff6:	80 93 65 02 	sts	0x0265, r24
                OCR0A = tx_increment;
     ffa:	87 bd       	out	0x27, r24	; 39
     ffc:	db cf       	rjmp	.-74     	; 0xfb4 <__vector_14+0x92>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     ffe:	e0 91 04 01 	lds	r30, 0x0104
    1002:	f0 91 05 01 	lds	r31, 0x0105
    1006:	09 95       	icall
                tx_clock = 0;
    1008:	10 92 68 02 	sts	0x0268, r1
    100c:	10 92 67 02 	sts	0x0267, r1
    1010:	d1 cf       	rjmp	.-94     	; 0xfb4 <__vector_14+0x92>

00001012 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    cli();
    1016:	f8 94       	cli
    /*ISIR*/
  //  PCICR |= _BV(PCIE1);
  //	PCMSK1 |= _BV(PCINT13);
    ports_off();
    1018:	14 b8       	out	0x04, r1	; 4
    101a:	17 b8       	out	0x07, r1	; 7
    101c:	1a b8       	out	0x0a, r1	; 10
    101e:	15 b8       	out	0x05, r1	; 5
    1020:	18 b8       	out	0x08, r1	; 8
    1022:	1b b8       	out	0x0b, r1	; 11
    ports_on();
    1024:	52 9a       	sbi	0x0a, 2	; 10
    1026:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
    1028:	14 bc       	out	0x24, r1	; 36
    102a:	85 e0       	ldi	r24, 0x05	; 5
    102c:	85 bd       	out	0x25, r24	; 37
    102e:	8f ef       	ldi	r24, 0xFF	; 255
    1030:	87 bd       	out	0x27, r24	; 39
    1032:	22 e0       	ldi	r18, 0x02	; 2
    1034:	20 93 6e 00 	sts	0x006E, r18
    rx_timer_setup();
    1038:	10 92 80 00 	sts	0x0080, r1
    103c:	10 92 81 00 	sts	0x0081, r1
    1040:	8f e8       	ldi	r24, 0x8F	; 143
    1042:	9b e0       	ldi	r25, 0x0B	; 11
    1044:	90 93 89 00 	sts	0x0089, r25
    1048:	80 93 88 00 	sts	0x0088, r24
    104c:	20 93 6f 00 	sts	0x006F, r18
    motors_setup();
    1050:	53 98       	cbi	0x0a, 3	; 10
    1052:	23 98       	cbi	0x04, 3	; 4
    1054:	81 ea       	ldi	r24, 0xA1	; 161
    1056:	80 93 b0 00 	sts	0x00B0, r24
    105a:	20 93 b1 00 	sts	0x00B1, r18
    105e:	10 92 b4 00 	sts	0x00B4, r1
    1062:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
    1066:	8b e0       	ldi	r24, 0x0B	; 11
    1068:	80 bf       	out	0x30, r24	; 48
    106a:	83 e0       	ldi	r24, 0x03	; 3
    106c:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
    1070:	86 e0       	ldi	r24, 0x06	; 6
    1072:	80 93 7c 00 	sts	0x007C, r24
    1076:	83 e8       	ldi	r24, 0x83	; 131
    1078:	80 93 7a 00 	sts	0x007A, r24
    107c:	80 91 7a 00 	lds	r24, 0x007A
    1080:	80 64       	ori	r24, 0x40	; 64
    1082:	80 93 7a 00 	sts	0x007A, r24
    1086:	80 91 7a 00 	lds	r24, 0x007A
    108a:	86 fd       	sbrc	r24, 6
    108c:	fc cf       	rjmp	.-8      	; 0x1086 <kilo_init+0x74>
    adc_trigger_high_gain();
    108e:	10 92 7c 00 	sts	0x007C, r1
    1092:	83 ea       	ldi	r24, 0xA3	; 163
    1094:	80 93 7a 00 	sts	0x007A, r24
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    if (osccal != 0xFF)
    10a6:	8f 3f       	cpi	r24, 0xFF	; 255
    10a8:	11 f0       	breq	.+4      	; 0x10ae <kilo_init+0x9c>
        OSCCAL = osccal;
    10aa:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
    10ae:	10 92 47 02 	sts	0x0247, r1
    rx_leadingbit = 1;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	80 93 20 02 	sts	0x0220, r24
    rx_leadingbyte = 1;
    10b8:	80 93 64 02 	sts	0x0264, r24
    rx_byteindex = 0;
    10bc:	10 92 3e 02 	sts	0x023E, r1
    rx_bytevalue = 0;
    10c0:	10 92 78 02 	sts	0x0278, r1
#ifndef BOOTLOADER
  //  tx_mask = eeprom_read_byte(EEPROM_TXMASK);
  //  if (tx_mask & ~TX_MASK_MAX)
        tx_mask = TX_MASK_MIN;
    10c4:	80 93 3d 02 	sts	0x023D, r24
    tx_clock = 0;
    10c8:	10 92 68 02 	sts	0x0268, r1
    10cc:	10 92 67 02 	sts	0x0267, r1
    tx_increment = 255;
    10d0:	8f ef       	ldi	r24, 0xFF	; 255
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	90 93 66 02 	sts	0x0266, r25
    10d8:	80 93 65 02 	sts	0x0265, r24
    kilo_ticks = 0;
    10dc:	10 92 43 02 	sts	0x0243, r1
    10e0:	10 92 44 02 	sts	0x0244, r1
    10e4:	10 92 45 02 	sts	0x0245, r1
    10e8:	10 92 46 02 	sts	0x0246, r1
    kilo_state = SETUP;
    10ec:	83 e0       	ldi	r24, 0x03	; 3
    10ee:	80 93 1d 02 	sts	0x021D, r24
    kilo_tx_period = 3906;
    10f2:	82 e4       	ldi	r24, 0x42	; 66
    10f4:	9f e0       	ldi	r25, 0x0F	; 15
    10f6:	90 93 77 02 	sts	0x0277, r25
    10fa:	80 93 76 02 	sts	0x0276, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
    10fe:	80 eb       	ldi	r24, 0xB0	; 176
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1106:	08 2f       	mov	r16, r24
    1108:	81 eb       	ldi	r24, 0xB1	; 177
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1110:	38 2f       	mov	r19, r24
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	10 e0       	ldi	r17, 0x00	; 0
    1116:	20 2b       	or	r18, r16
    1118:	31 2b       	or	r19, r17
    111a:	30 93 7a 02 	sts	0x027A, r19
    111e:	20 93 79 02 	sts	0x0279, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
    1122:	85 e0       	ldi	r24, 0x05	; 5
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    112a:	80 93 7e 02 	sts	0x027E, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    112e:	89 e0       	ldi	r24, 0x09	; 9
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1136:	80 93 69 02 	sts	0x0269, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    113a:	8c e0       	ldi	r24, 0x0C	; 12
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1142:	80 93 7c 02 	sts	0x027C, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
    1146:	84 e1       	ldi	r24, 0x14	; 20
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    114e:	80 93 7d 02 	sts	0x027D, r24

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    1152:	80 e2       	ldi	r24, 0x20	; 32
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    115a:	18 2f       	mov	r17, r24
    115c:	81 e2       	ldi	r24, 0x21	; 33
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1164:	31 2f       	mov	r19, r17
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	28 2b       	or	r18, r24
    116c:	39 2b       	or	r19, r25
    116e:	30 93 49 02 	sts	0x0249, r19
    1172:	20 93 48 02 	sts	0x0248, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    1176:	80 e5       	ldi	r24, 0x50	; 80
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    117e:	18 2f       	mov	r17, r24
    1180:	81 e5       	ldi	r24, 0x51	; 81
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1188:	31 2f       	mov	r19, r17
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	28 2b       	or	r18, r24
    1190:	39 2b       	or	r19, r25
    1192:	30 93 22 02 	sts	0x0222, r19
    1196:	20 93 21 02 	sts	0x0221, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    119a:	82 e2       	ldi	r24, 0x22	; 34
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    11a2:	18 2f       	mov	r17, r24
    11a4:	83 e2       	ldi	r24, 0x23	; 35
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    11ac:	31 2f       	mov	r19, r17
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	28 2b       	or	r18, r24
    11b4:	39 2b       	or	r19, r25
    11b6:	30 93 4b 02 	sts	0x024B, r19
    11ba:	20 93 4a 02 	sts	0x024A, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    11be:	82 e5       	ldi	r24, 0x52	; 82
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    11c6:	18 2f       	mov	r17, r24
    11c8:	83 e5       	ldi	r24, 0x53	; 83
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    11d0:	31 2f       	mov	r19, r17
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	28 2b       	or	r18, r24
    11d8:	39 2b       	or	r19, r25
    11da:	30 93 24 02 	sts	0x0224, r19
    11de:	20 93 23 02 	sts	0x0223, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    11e2:	84 e2       	ldi	r24, 0x24	; 36
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    11ea:	18 2f       	mov	r17, r24
    11ec:	85 e2       	ldi	r24, 0x25	; 37
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    11f4:	31 2f       	mov	r19, r17
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	28 2b       	or	r18, r24
    11fc:	39 2b       	or	r19, r25
    11fe:	30 93 4d 02 	sts	0x024D, r19
    1202:	20 93 4c 02 	sts	0x024C, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    1206:	84 e5       	ldi	r24, 0x54	; 84
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    120e:	18 2f       	mov	r17, r24
    1210:	85 e5       	ldi	r24, 0x55	; 85
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1218:	31 2f       	mov	r19, r17
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	28 2b       	or	r18, r24
    1220:	39 2b       	or	r19, r25
    1222:	30 93 26 02 	sts	0x0226, r19
    1226:	20 93 25 02 	sts	0x0225, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    122a:	86 e2       	ldi	r24, 0x26	; 38
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1232:	18 2f       	mov	r17, r24
    1234:	87 e2       	ldi	r24, 0x27	; 39
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    123c:	31 2f       	mov	r19, r17
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	28 2b       	or	r18, r24
    1244:	39 2b       	or	r19, r25
    1246:	30 93 4f 02 	sts	0x024F, r19
    124a:	20 93 4e 02 	sts	0x024E, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    124e:	86 e5       	ldi	r24, 0x56	; 86
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1256:	18 2f       	mov	r17, r24
    1258:	87 e5       	ldi	r24, 0x57	; 87
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1260:	31 2f       	mov	r19, r17
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	28 2b       	or	r18, r24
    1268:	39 2b       	or	r19, r25
    126a:	30 93 28 02 	sts	0x0228, r19
    126e:	20 93 27 02 	sts	0x0227, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    1272:	88 e2       	ldi	r24, 0x28	; 40
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    127a:	18 2f       	mov	r17, r24
    127c:	89 e2       	ldi	r24, 0x29	; 41
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1284:	31 2f       	mov	r19, r17
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	28 2b       	or	r18, r24
    128c:	39 2b       	or	r19, r25
    128e:	30 93 51 02 	sts	0x0251, r19
    1292:	20 93 50 02 	sts	0x0250, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    1296:	88 e5       	ldi	r24, 0x58	; 88
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    129e:	18 2f       	mov	r17, r24
    12a0:	89 e5       	ldi	r24, 0x59	; 89
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    12a8:	31 2f       	mov	r19, r17
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	28 2b       	or	r18, r24
    12b0:	39 2b       	or	r19, r25
    12b2:	30 93 2a 02 	sts	0x022A, r19
    12b6:	20 93 29 02 	sts	0x0229, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    12ba:	8a e2       	ldi	r24, 0x2A	; 42
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    12c2:	18 2f       	mov	r17, r24
    12c4:	8b e2       	ldi	r24, 0x2B	; 43
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    12cc:	31 2f       	mov	r19, r17
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	28 2b       	or	r18, r24
    12d4:	39 2b       	or	r19, r25
    12d6:	30 93 53 02 	sts	0x0253, r19
    12da:	20 93 52 02 	sts	0x0252, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    12de:	8a e5       	ldi	r24, 0x5A	; 90
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    12e6:	18 2f       	mov	r17, r24
    12e8:	8b e5       	ldi	r24, 0x5B	; 91
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    12f0:	31 2f       	mov	r19, r17
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	28 2b       	or	r18, r24
    12f8:	39 2b       	or	r19, r25
    12fa:	30 93 2c 02 	sts	0x022C, r19
    12fe:	20 93 2b 02 	sts	0x022B, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    1302:	8c e2       	ldi	r24, 0x2C	; 44
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    130a:	18 2f       	mov	r17, r24
    130c:	8d e2       	ldi	r24, 0x2D	; 45
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1314:	31 2f       	mov	r19, r17
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	28 2b       	or	r18, r24
    131c:	39 2b       	or	r19, r25
    131e:	30 93 55 02 	sts	0x0255, r19
    1322:	20 93 54 02 	sts	0x0254, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    1326:	8c e5       	ldi	r24, 0x5C	; 92
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    132e:	18 2f       	mov	r17, r24
    1330:	8d e5       	ldi	r24, 0x5D	; 93
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1338:	31 2f       	mov	r19, r17
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	28 2b       	or	r18, r24
    1340:	39 2b       	or	r19, r25
    1342:	30 93 2e 02 	sts	0x022E, r19
    1346:	20 93 2d 02 	sts	0x022D, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    134a:	8e e2       	ldi	r24, 0x2E	; 46
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1352:	18 2f       	mov	r17, r24
    1354:	8f e2       	ldi	r24, 0x2F	; 47
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    135c:	31 2f       	mov	r19, r17
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	28 2b       	or	r18, r24
    1364:	39 2b       	or	r19, r25
    1366:	30 93 57 02 	sts	0x0257, r19
    136a:	20 93 56 02 	sts	0x0256, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    136e:	8e e5       	ldi	r24, 0x5E	; 94
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1376:	18 2f       	mov	r17, r24
    1378:	8f e5       	ldi	r24, 0x5F	; 95
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1380:	31 2f       	mov	r19, r17
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	28 2b       	or	r18, r24
    1388:	39 2b       	or	r19, r25
    138a:	30 93 30 02 	sts	0x0230, r19
    138e:	20 93 2f 02 	sts	0x022F, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    1392:	80 e3       	ldi	r24, 0x30	; 48
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    139a:	18 2f       	mov	r17, r24
    139c:	81 e3       	ldi	r24, 0x31	; 49
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    13a4:	31 2f       	mov	r19, r17
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	28 2b       	or	r18, r24
    13ac:	39 2b       	or	r19, r25
    13ae:	30 93 59 02 	sts	0x0259, r19
    13b2:	20 93 58 02 	sts	0x0258, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    13b6:	80 e6       	ldi	r24, 0x60	; 96
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    13be:	18 2f       	mov	r17, r24
    13c0:	81 e6       	ldi	r24, 0x61	; 97
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    13c8:	31 2f       	mov	r19, r17
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	28 2b       	or	r18, r24
    13d0:	39 2b       	or	r19, r25
    13d2:	30 93 32 02 	sts	0x0232, r19
    13d6:	20 93 31 02 	sts	0x0231, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    13da:	82 e3       	ldi	r24, 0x32	; 50
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    13e2:	18 2f       	mov	r17, r24
    13e4:	83 e3       	ldi	r24, 0x33	; 51
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    13ec:	31 2f       	mov	r19, r17
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	28 2b       	or	r18, r24
    13f4:	39 2b       	or	r19, r25
    13f6:	30 93 5b 02 	sts	0x025B, r19
    13fa:	20 93 5a 02 	sts	0x025A, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    13fe:	82 e6       	ldi	r24, 0x62	; 98
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1406:	18 2f       	mov	r17, r24
    1408:	83 e6       	ldi	r24, 0x63	; 99
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1410:	31 2f       	mov	r19, r17
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	28 2b       	or	r18, r24
    1418:	39 2b       	or	r19, r25
    141a:	30 93 34 02 	sts	0x0234, r19
    141e:	20 93 33 02 	sts	0x0233, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    1422:	84 e3       	ldi	r24, 0x34	; 52
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    142a:	18 2f       	mov	r17, r24
    142c:	85 e3       	ldi	r24, 0x35	; 53
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1434:	31 2f       	mov	r19, r17
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	28 2b       	or	r18, r24
    143c:	39 2b       	or	r19, r25
    143e:	30 93 5d 02 	sts	0x025D, r19
    1442:	20 93 5c 02 	sts	0x025C, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    1446:	84 e6       	ldi	r24, 0x64	; 100
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    144e:	18 2f       	mov	r17, r24
    1450:	85 e6       	ldi	r24, 0x65	; 101
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1458:	31 2f       	mov	r19, r17
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	28 2b       	or	r18, r24
    1460:	39 2b       	or	r19, r25
    1462:	30 93 36 02 	sts	0x0236, r19
    1466:	20 93 35 02 	sts	0x0235, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    146a:	86 e3       	ldi	r24, 0x36	; 54
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1472:	18 2f       	mov	r17, r24
    1474:	87 e3       	ldi	r24, 0x37	; 55
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    147c:	31 2f       	mov	r19, r17
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	28 2b       	or	r18, r24
    1484:	39 2b       	or	r19, r25
    1486:	30 93 5f 02 	sts	0x025F, r19
    148a:	20 93 5e 02 	sts	0x025E, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    148e:	86 e6       	ldi	r24, 0x66	; 102
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1496:	18 2f       	mov	r17, r24
    1498:	87 e6       	ldi	r24, 0x67	; 103
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    14a0:	31 2f       	mov	r19, r17
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	28 2b       	or	r18, r24
    14a8:	39 2b       	or	r19, r25
    14aa:	30 93 38 02 	sts	0x0238, r19
    14ae:	20 93 37 02 	sts	0x0237, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    14b2:	88 e3       	ldi	r24, 0x38	; 56
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    14ba:	18 2f       	mov	r17, r24
    14bc:	89 e3       	ldi	r24, 0x39	; 57
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    14c4:	31 2f       	mov	r19, r17
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	28 2b       	or	r18, r24
    14cc:	39 2b       	or	r19, r25
    14ce:	30 93 61 02 	sts	0x0261, r19
    14d2:	20 93 60 02 	sts	0x0260, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    14d6:	88 e6       	ldi	r24, 0x68	; 104
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    14de:	18 2f       	mov	r17, r24
    14e0:	89 e6       	ldi	r24, 0x69	; 105
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    14e8:	31 2f       	mov	r19, r17
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	28 2b       	or	r18, r24
    14f0:	39 2b       	or	r19, r25
    14f2:	30 93 3a 02 	sts	0x023A, r19
    14f6:	20 93 39 02 	sts	0x0239, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    14fa:	8a e3       	ldi	r24, 0x3A	; 58
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1502:	18 2f       	mov	r17, r24
    1504:	8b e3       	ldi	r24, 0x3B	; 59
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    150c:	31 2f       	mov	r19, r17
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	28 2b       	or	r18, r24
    1514:	39 2b       	or	r19, r25
    1516:	30 93 63 02 	sts	0x0263, r19
    151a:	20 93 62 02 	sts	0x0262, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    151e:	8a e6       	ldi	r24, 0x6A	; 106
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1526:	18 2f       	mov	r17, r24
    1528:	8b e6       	ldi	r24, 0x6B	; 107
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__eerd_byte_m328p>
    1530:	31 2f       	mov	r19, r17
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	28 2b       	or	r18, r24
    1538:	39 2b       	or	r19, r25
    153a:	30 93 3c 02 	sts	0x023C, r19
    153e:	20 93 3b 02 	sts	0x023B, r18
    }
#endif

    /*ISIR*/
    rx_direction = NONE;
    1542:	86 e0       	ldi	r24, 0x06	; 6
    1544:	80 93 7b 02 	sts	0x027B, r24
    sei();
    1548:	78 94       	sei
}
    154a:	1f 91       	pop	r17
    154c:	0f 91       	pop	r16
    154e:	08 95       	ret

00001550 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    1550:	2f 92       	push	r2
    1552:	3f 92       	push	r3
    1554:	4f 92       	push	r4
    1556:	5f 92       	push	r5
    1558:	6f 92       	push	r6
    155a:	7f 92       	push	r7
    155c:	8f 92       	push	r8
    155e:	9f 92       	push	r9
    1560:	af 92       	push	r10
    1562:	bf 92       	push	r11
    1564:	cf 92       	push	r12
    1566:	df 92       	push	r13
    1568:	ef 92       	push	r14
    156a:	ff 92       	push	r15
    156c:	0f 93       	push	r16
    156e:	1f 93       	push	r17
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	6c 01       	movw	r12, r24
    1576:	8b 01       	movw	r16, r22
    1578:	ff 24       	eor	r15, r15
    157a:	a0 ed       	ldi	r26, 0xD0	; 208
    157c:	aa 2e       	mov	r10, r26
    157e:	a7 e0       	ldi	r26, 0x07	; 7
    1580:	ba 2e       	mov	r11, r26
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
    1582:	c8 ec       	ldi	r28, 0xC8	; 200
    1584:	d0 e0       	ldi	r29, 0x00	; 0
    1586:	ee 24       	eor	r14, r14
    1588:	ea 94       	dec	r14
    158a:	f0 e3       	ldi	r31, 0x30	; 48
    158c:	8f 2e       	mov	r8, r31
    158e:	f5 e7       	ldi	r31, 0x75	; 117
    1590:	9f 2e       	mov	r9, r31

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
    1592:	e6 e0       	ldi	r30, 0x06	; 6
    1594:	7e 2e       	mov	r7, r30
    1596:	73 e8       	ldi	r23, 0x83	; 131
    1598:	67 2e       	mov	r6, r23
            case SLEEPING:
                cli();
                acomp_off();
                adc_off();
                ports_off();
                wdt_enable(WDTO_8S);
    159a:	68 e1       	ldi	r22, 0x18	; 24
    159c:	46 2e       	mov	r4, r22
    159e:	51 2c       	mov	r5, r1
    15a0:	59 e2       	ldi	r21, 0x29	; 41
    15a2:	35 2e       	mov	r3, r21
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
    15a4:	44 e0       	ldi	r20, 0x04	; 4
    15a6:	24 2e       	mov	r2, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
    15a8:	80 91 1d 02 	lds	r24, 0x021D
    15ac:	83 30       	cpi	r24, 0x03	; 3
    15ae:	69 f1       	breq	.+90     	; 0x160a <kilo_start+0xba>
    15b0:	84 30       	cpi	r24, 0x04	; 4
    15b2:	a8 f5       	brcc	.+106    	; 0x161e <kilo_start+0xce>
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	09 f4       	brne	.+2      	; 0x15ba <kilo_start+0x6a>
    15b8:	bc c0       	rjmp	.+376    	; 0x1732 <kilo_start+0x1e2>
    15ba:	82 30       	cpi	r24, 0x02	; 2
    15bc:	08 f4       	brcc	.+2      	; 0x15c0 <kilo_start+0x70>
    15be:	5a c0       	rjmp	.+180    	; 0x1674 <kilo_start+0x124>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
    15c0:	80 91 47 02 	lds	r24, 0x0247
    15c4:	88 23       	and	r24, r24
    15c6:	09 f0       	breq	.+2      	; 0x15ca <kilo_start+0x7a>
    15c8:	f4 c0       	rjmp	.+488    	; 0x17b2 <kilo_start+0x262>
        cli();                                    // disable interrupts
    15ca:	f8 94       	cli
        adc_setup_conversion(6);
    15cc:	70 92 7c 00 	sts	0x007C, r7
    15d0:	60 92 7a 00 	sts	0x007A, r6
        adc_start_conversion();
    15d4:	80 91 7a 00 	lds	r24, 0x007A
    15d8:	80 64       	ori	r24, 0x40	; 64
    15da:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
    15de:	80 91 7a 00 	lds	r24, 0x007A
    15e2:	86 fd       	sbrc	r24, 6
    15e4:	fc cf       	rjmp	.-8      	; 0x15de <kilo_start+0x8e>
        voltage = ADCW;                           // store AD result
    15e6:	20 91 78 00 	lds	r18, 0x0078
    15ea:	30 91 79 00 	lds	r19, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    15ee:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
    15f0:	42 e0       	ldi	r20, 0x02	; 2
    15f2:	2b 3a       	cpi	r18, 0xAB	; 171
    15f4:	34 07       	cpc	r19, r20
    15f6:	0c f4       	brge	.+2      	; 0x15fa <kilo_start+0xaa>
    15f8:	e1 c0       	rjmp	.+450    	; 0x17bc <kilo_start+0x26c>
        if(rgb&(1<<0) ||rgb&(1<<1)){
          DDRD |= 1;
          PORTD |= 1;
        }
        else{
          DDRD &= ~(1);
    15fa:	50 98       	cbi	0x0a, 0	; 10
        }
        if(rgb&(1<<2) ||rgb&(1<<3)){
          DDRD |= 1<<1;
    15fc:	51 9a       	sbi	0x0a, 1	; 10
          PORTD |= 1<<1;
    15fe:	59 9a       	sbi	0x0b, 1	; 11
        if(rgb&(1<<4) ||rgb&(1<<5)){
          DDRD |= 1<<2;
          PORTD |= 1<<2;
        }
        else{
          DDRD &= ~(1<<2);
    1600:	52 98       	cbi	0x0a, 2	; 10

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
    1602:	80 91 1d 02 	lds	r24, 0x021D
    1606:	83 30       	cpi	r24, 0x03	; 3
    1608:	99 f6       	brne	.-90     	; 0x15b0 <kilo_start+0x60>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
    160a:	ff 20       	and	r15, r15
    160c:	09 f4       	brne	.+2      	; 0x1610 <kilo_start+0xc0>
    160e:	ce c0       	rjmp	.+412    	; 0x17ac <kilo_start+0x25c>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
    1610:	20 92 1d 02 	sts	0x021D, r2
    1614:	ff 24       	eor	r15, r15
    1616:	f3 94       	inc	r15
            case RUNNING:
                loop();
    1618:	f8 01       	movw	r30, r16
    161a:	09 95       	icall
    161c:	c5 cf       	rjmp	.-118    	; 0x15a8 <kilo_start+0x58>

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
    161e:	85 30       	cpi	r24, 0x05	; 5
    1620:	89 f0       	breq	.+34     	; 0x1644 <kilo_start+0xf4>
    1622:	85 30       	cpi	r24, 0x05	; 5
    1624:	c8 f3       	brcs	.-14     	; 0x1618 <kilo_start+0xc8>
    1626:	86 30       	cpi	r24, 0x06	; 6
    1628:	09 f0       	breq	.+2      	; 0x162c <kilo_start+0xdc>
    162a:	be cf       	rjmp	.-132    	; 0x15a8 <kilo_start+0x58>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
    162c:	80 91 1a 02 	lds	r24, 0x021A
    1630:	88 23       	and	r24, r24
    1632:	09 f0       	breq	.+2      	; 0x1636 <kilo_start+0xe6>
    1634:	94 c0       	rjmp	.+296    	; 0x175e <kilo_start+0x20e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    1636:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
    163a:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
    163e:	10 92 1b 02 	sts	0x021B, r1
    1642:	b2 cf       	rjmp	.-156    	; 0x15a8 <kilo_start+0x58>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
    1644:	48 99       	sbic	0x09, 0	; 9
    1646:	5e c0       	rjmp	.+188    	; 0x1704 <kilo_start+0x1b4>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);*/

        if(rgb&(1<<0) ||rgb&(1<<1)){
          DDRD |= 1;
    1648:	50 9a       	sbi	0x0a, 0	; 10
          PORTD |= 1;
    164a:	58 9a       	sbi	0x0b, 0	; 11
        if(rgb&(1<<2) ||rgb&(1<<3)){
          DDRD |= 1<<1;
          PORTD |= 1<<1;
        }
        else{
          DDRD &= ~(1<<1);
    164c:	51 98       	cbi	0x0a, 1	; 10
        if(rgb&(1<<4) ||rgb&(1<<5)){
          DDRD |= 1<<2;
          PORTD |= 1<<2;
        }
        else{
          DDRD &= ~(1<<2);
    164e:	52 98       	cbi	0x0a, 2	; 10
    1650:	c5 01       	movw	r24, r10
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	f1 f7       	brne	.-4      	; 0x1652 <kilo_start+0x102>
        if(rgb&(1<<0) ||rgb&(1<<1)){
          DDRD |= 1;
          PORTD |= 1;
        }
        else{
          DDRD &= ~(1);
    1656:	50 98       	cbi	0x0a, 0	; 10
        if(rgb&(1<<2) ||rgb&(1<<3)){
          DDRD |= 1<<1;
          PORTD |= 1<<1;
        }
        else{
          DDRD &= ~(1<<1);
    1658:	51 98       	cbi	0x0a, 1	; 10
        if(rgb&(1<<4) ||rgb&(1<<5)){
          DDRD |= 1<<2;
          PORTD |= 1<<2;
        }
        else{
          DDRD &= ~(1<<2);
    165a:	52 98       	cbi	0x0a, 2	; 10
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	ce 01       	movw	r24, r28
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	f1 f7       	brne	.-4      	; 0x1662 <kilo_start+0x112>
    1666:	2f 5f       	subi	r18, 0xFF	; 255
    1668:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    166a:	87 e0       	ldi	r24, 0x07	; 7
    166c:	20 3d       	cpi	r18, 0xD0	; 208
    166e:	38 07       	cpc	r19, r24
    1670:	b9 f7       	brne	.-18     	; 0x1660 <kilo_start+0x110>
    1672:	9a cf       	rjmp	.-204    	; 0x15a8 <kilo_start+0x58>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
    1674:	f8 94       	cli
                acomp_off();
    1676:	80 b7       	in	r24, 0x30	; 48
    1678:	87 7f       	andi	r24, 0xF7	; 247
    167a:	80 bf       	out	0x30, r24	; 48
                adc_off();
    167c:	80 91 7a 00 	lds	r24, 0x007A
    1680:	8f 77       	andi	r24, 0x7F	; 127
    1682:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
    1686:	14 b8       	out	0x04, r1	; 4
    1688:	17 b8       	out	0x07, r1	; 7
    168a:	1a b8       	out	0x0a, r1	; 10
    168c:	15 b8       	out	0x05, r1	; 5
    168e:	18 b8       	out	0x08, r1	; 8
    1690:	1b b8       	out	0x0b, r1	; 11
                wdt_enable(WDTO_8S);
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	a8 95       	wdr
    1698:	40 92 60 00 	sts	0x0060, r4
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	30 92 60 00 	sts	0x0060, r3
                WDTCSR |= (1<<WDIE);
    16a2:	80 91 60 00 	lds	r24, 0x0060
    16a6:	80 64       	ori	r24, 0x40	; 64
    16a8:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    16ac:	83 b7       	in	r24, 0x33	; 51
    16ae:	81 7f       	andi	r24, 0xF1	; 241
    16b0:	84 60       	ori	r24, 0x04	; 4
    16b2:	83 bf       	out	0x33, r24	; 51
                cli();
    16b4:	f8 94       	cli
                sleep_enable();
    16b6:	83 b7       	in	r24, 0x33	; 51
    16b8:	81 60       	ori	r24, 0x01	; 1
    16ba:	83 bf       	out	0x33, r24	; 51
                sei();
    16bc:	78 94       	sei
                sleep_cpu();
    16be:	88 95       	sleep
                sleep_disable();
    16c0:	83 b7       	in	r24, 0x33	; 51
    16c2:	8e 7f       	andi	r24, 0xFE	; 254
    16c4:	83 bf       	out	0x33, r24	; 51
                sei();
    16c6:	78 94       	sei
                rx_busy = 0;
    16c8:	10 92 47 02 	sts	0x0247, r1
                ports_on();
    16cc:	52 9a       	sbi	0x0a, 2	; 10
    16ce:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
    16d0:	80 91 7a 00 	lds	r24, 0x007A
    16d4:	80 68       	ori	r24, 0x80	; 128
    16d6:	80 93 7a 00 	sts	0x007A, r24
    16da:	88 e5       	ldi	r24, 0x58	; 88
    16dc:	92 e0       	ldi	r25, 0x02	; 2
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	f1 f7       	brne	.-4      	; 0x16de <kilo_start+0x18e>
                _delay_us(300);
                acomp_on();
    16e2:	80 b7       	in	r24, 0x30	; 48
    16e4:	88 61       	ori	r24, 0x18	; 24
    16e6:	80 bf       	out	0x30, r24	; 48
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);*/

        if(rgb&(1<<0) ||rgb&(1<<1)){
          DDRD |= 1;
    16e8:	50 9a       	sbi	0x0a, 0	; 10
          PORTD |= 1;
    16ea:	58 9a       	sbi	0x0b, 0	; 11
        }
        else{
          DDRD &= ~(1);
        }
        if(rgb&(1<<2) ||rgb&(1<<3)){
          DDRD |= 1<<1;
    16ec:	51 9a       	sbi	0x0a, 1	; 10
          PORTD |= 1<<1;
    16ee:	59 9a       	sbi	0x0b, 1	; 11
        }
        else{
          DDRD &= ~(1<<1);
        }
        if(rgb&(1<<4) ||rgb&(1<<5)){
          DDRD |= 1<<2;
    16f0:	52 9a       	sbi	0x0a, 2	; 10
          PORTD |= 1<<2;
    16f2:	5a 9a       	sbi	0x0b, 2	; 11
    16f4:	80 e2       	ldi	r24, 0x20	; 32
    16f6:	9e e4       	ldi	r25, 0x4E	; 78
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	f1 f7       	brne	.-4      	; 0x16f8 <kilo_start+0x1a8>
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
    16fc:	80 91 47 02 	lds	r24, 0x0247
    1700:	88 23       	and	r24, r24
    1702:	21 f4       	brne	.+8      	; 0x170c <kilo_start+0x1bc>
        if(rgb&(1<<0) ||rgb&(1<<1)){
          DDRD |= 1;
          PORTD |= 1;
        }
        else{
          DDRD &= ~(1);
    1704:	50 98       	cbi	0x0a, 0	; 10
        if(rgb&(1<<2) ||rgb&(1<<3)){
          DDRD |= 1<<1;
          PORTD |= 1<<1;
        }
        else{
          DDRD &= ~(1<<1);
    1706:	51 98       	cbi	0x0a, 1	; 10
        if(rgb&(1<<4) ||rgb&(1<<5)){
          DDRD |= 1<<2;
          PORTD |= 1<<2;
        }
        else{
          DDRD &= ~(1<<2);
    1708:	52 98       	cbi	0x0a, 2	; 10
    170a:	4e cf       	rjmp	.-356    	; 0x15a8 <kilo_start+0x58>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);*/

        if(rgb&(1<<0) ||rgb&(1<<1)){
          DDRD |= 1;
    170c:	50 9a       	sbi	0x0a, 0	; 10
          PORTD |= 1;
    170e:	58 9a       	sbi	0x0b, 0	; 11
        if(rgb&(1<<2) ||rgb&(1<<3)){
          DDRD |= 1<<1;
          PORTD |= 1<<1;
        }
        else{
          DDRD &= ~(1<<1);
    1710:	51 98       	cbi	0x0a, 1	; 10
        if(rgb&(1<<4) ||rgb&(1<<5)){
          DDRD |= 1<<2;
          PORTD |= 1<<2;
        }
        else{
          DDRD &= ~(1<<2);
    1712:	52 98       	cbi	0x0a, 2	; 10
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	ce 01       	movw	r24, r28
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	f1 f7       	brne	.-4      	; 0x171a <kilo_start+0x1ca>
    171e:	2f 5f       	subi	r18, 0xFF	; 255
    1720:	3f 4f       	sbci	r19, 0xFF	; 255
    1722:	43 e0       	ldi	r20, 0x03	; 3
    1724:	28 3e       	cpi	r18, 0xE8	; 232
    1726:	34 07       	cpc	r19, r20
    1728:	b9 f7       	brne	.-18     	; 0x1718 <kilo_start+0x1c8>
        if(rgb&(1<<0) ||rgb&(1<<1)){
          DDRD |= 1;
          PORTD |= 1;
        }
        else{
          DDRD &= ~(1);
    172a:	50 98       	cbi	0x0a, 0	; 10
        if(rgb&(1<<2) ||rgb&(1<<3)){
          DDRD |= 1<<1;
          PORTD |= 1<<1;
        }
        else{
          DDRD &= ~(1<<1);
    172c:	51 98       	cbi	0x0a, 1	; 10
        if(rgb&(1<<4) ||rgb&(1<<5)){
          DDRD |= 1<<2;
          PORTD |= 1<<2;
        }
        else{
          DDRD &= ~(1<<2);
    172e:	52 98       	cbi	0x0a, 2	; 10
    1730:	3b cf       	rjmp	.-394    	; 0x15a8 <kilo_start+0x58>
        if(rgb&(1<<0) ||rgb&(1<<1)){
          DDRD |= 1;
          PORTD |= 1;
        }
        else{
          DDRD &= ~(1);
    1732:	50 98       	cbi	0x0a, 0	; 10
        }
        if(rgb&(1<<2) ||rgb&(1<<3)){
          DDRD |= 1<<1;
    1734:	51 9a       	sbi	0x0a, 1	; 10
          PORTD |= 1<<1;
    1736:	59 9a       	sbi	0x0b, 1	; 11
        if(rgb&(1<<4) ||rgb&(1<<5)){
          DDRD |= 1<<2;
          PORTD |= 1<<2;
        }
        else{
          DDRD &= ~(1<<2);
    1738:	52 98       	cbi	0x0a, 2	; 10
    173a:	c5 01       	movw	r24, r10
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	f1 f7       	brne	.-4      	; 0x173c <kilo_start+0x1ec>
        if(rgb&(1<<0) ||rgb&(1<<1)){
          DDRD |= 1;
          PORTD |= 1;
        }
        else{
          DDRD &= ~(1);
    1740:	50 98       	cbi	0x0a, 0	; 10
        if(rgb&(1<<2) ||rgb&(1<<3)){
          DDRD |= 1<<1;
          PORTD |= 1<<1;
        }
        else{
          DDRD &= ~(1<<1);
    1742:	51 98       	cbi	0x0a, 1	; 10
        if(rgb&(1<<4) ||rgb&(1<<5)){
          DDRD |= 1<<2;
          PORTD |= 1<<2;
        }
        else{
          DDRD &= ~(1<<2);
    1744:	52 98       	cbi	0x0a, 2	; 10
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	ce 01       	movw	r24, r28
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	f1 f7       	brne	.-4      	; 0x174c <kilo_start+0x1fc>
    1750:	2f 5f       	subi	r18, 0xFF	; 255
    1752:	3f 4f       	sbci	r19, 0xFF	; 255
    1754:	87 e0       	ldi	r24, 0x07	; 7
    1756:	20 3d       	cpi	r18, 0xD0	; 208
    1758:	38 07       	cpc	r19, r24
    175a:	b9 f7       	brne	.-18     	; 0x174a <kilo_start+0x1fa>
    175c:	25 cf       	rjmp	.-438    	; 0x15a8 <kilo_start+0x58>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
    175e:	90 91 1a 02 	lds	r25, 0x021A
    1762:	80 91 1b 02 	lds	r24, 0x021B
    1766:	98 17       	cp	r25, r24
    1768:	09 f4       	brne	.+2      	; 0x176c <kilo_start+0x21c>
    176a:	1e cf       	rjmp	.-452    	; 0x15a8 <kilo_start+0x58>
                        prev_motion = cur_motion;
    176c:	80 91 1a 02 	lds	r24, 0x021A
    1770:	80 93 1b 02 	sts	0x021B, r24
                        if (cur_motion == MOVE_LEFT) {
    1774:	80 91 1a 02 	lds	r24, 0x021A
    1778:	81 30       	cpi	r24, 0x01	; 1
    177a:	49 f1       	breq	.+82     	; 0x17ce <kilo_start+0x27e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
    177c:	80 91 1a 02 	lds	r24, 0x021A
    1780:	82 30       	cpi	r24, 0x02	; 2
    1782:	99 f1       	breq	.+102    	; 0x17ea <kilo_start+0x29a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    1784:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
    1788:	e0 92 b4 00 	sts	0x00B4, r14
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    178c:	e0 92 b3 00 	sts	0x00B3, r14
    OCR2B = cw;
    1790:	e0 92 b4 00 	sts	0x00B4, r14
    1794:	c4 01       	movw	r24, r8
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	f1 f7       	brne	.-4      	; 0x1796 <kilo_start+0x246>
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
    179a:	80 91 7c 02 	lds	r24, 0x027C
    179e:	90 91 7d 02 	lds	r25, 0x027D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    17a2:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
    17a6:	90 93 b4 00 	sts	0x00B4, r25
    17aa:	fe ce       	rjmp	.-516    	; 0x15a8 <kilo_start+0x58>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
    17ac:	f6 01       	movw	r30, r12
    17ae:	09 95       	icall
    17b0:	2f cf       	rjmp	.-418    	; 0x1610 <kilo_start+0xc0>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);*/

        if(rgb&(1<<0) ||rgb&(1<<1)){
          DDRD |= 1;
    17b2:	50 9a       	sbi	0x0a, 0	; 10
          PORTD |= 1;
    17b4:	58 9a       	sbi	0x0b, 0	; 11
        if(rgb&(1<<2) ||rgb&(1<<3)){
          DDRD |= 1<<1;
          PORTD |= 1<<1;
        }
        else{
          DDRD &= ~(1<<1);
    17b6:	51 98       	cbi	0x0a, 1	; 10
        if(rgb&(1<<4) ||rgb&(1<<5)){
          DDRD |= 1<<2;
          PORTD |= 1<<2;
        }
        else{
          DDRD &= ~(1<<2);
    17b8:	52 98       	cbi	0x0a, 2	; 10
    17ba:	f6 ce       	rjmp	.-532    	; 0x15a8 <kilo_start+0x58>
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
    17bc:	82 e0       	ldi	r24, 0x02	; 2
    17be:	29 38       	cpi	r18, 0x89	; 137
    17c0:	38 07       	cpc	r19, r24
    17c2:	0c f1       	brlt	.+66     	; 0x1806 <kilo_start+0x2b6>
        if(rgb&(1<<0) ||rgb&(1<<1)){
          DDRD |= 1;
          PORTD |= 1;
        }
        else{
          DDRD &= ~(1);
    17c4:	50 98       	cbi	0x0a, 0	; 10
        if(rgb&(1<<2) ||rgb&(1<<3)){
          DDRD |= 1<<1;
          PORTD |= 1<<1;
        }
        else{
          DDRD &= ~(1<<1);
    17c6:	51 98       	cbi	0x0a, 1	; 10
        }
        if(rgb&(1<<4) ||rgb&(1<<5)){
          DDRD |= 1<<2;
    17c8:	52 9a       	sbi	0x0a, 2	; 10
          PORTD |= 1<<2;
    17ca:	5a 9a       	sbi	0x0b, 2	; 11
    17cc:	ed ce       	rjmp	.-550    	; 0x15a8 <kilo_start+0x58>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    17ce:	e0 92 b3 00 	sts	0x00B3, r14
    OCR2B = cw;
    17d2:	10 92 b4 00 	sts	0x00B4, r1
    17d6:	c4 01       	movw	r24, r8
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	f1 f7       	brne	.-4      	; 0x17d8 <kilo_start+0x288>
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
    17dc:	80 91 7e 02 	lds	r24, 0x027E
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    17e0:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
    17e4:	10 92 b4 00 	sts	0x00B4, r1
    17e8:	df ce       	rjmp	.-578    	; 0x15a8 <kilo_start+0x58>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    17ea:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
    17ee:	e0 92 b4 00 	sts	0x00B4, r14
    17f2:	c4 01       	movw	r24, r8
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	f1 f7       	brne	.-4      	; 0x17f4 <kilo_start+0x2a4>
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
    17f8:	80 91 69 02 	lds	r24, 0x0269
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    17fc:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
    1800:	80 93 b4 00 	sts	0x00B4, r24
    1804:	d1 ce       	rjmp	.-606    	; 0x15a8 <kilo_start+0x58>
                voltage = get_voltage();
                if(voltage > 682)
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
    1806:	27 56       	subi	r18, 0x67	; 103
    1808:	32 40       	sbci	r19, 0x02	; 2
    180a:	9c f2       	brlt	.-90     	; 0x17b2 <kilo_start+0x262>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);*/

        if(rgb&(1<<0) ||rgb&(1<<1)){
          DDRD |= 1;
    180c:	50 9a       	sbi	0x0a, 0	; 10
          PORTD |= 1;
    180e:	58 9a       	sbi	0x0b, 0	; 11
        }
        else{
          DDRD &= ~(1);
        }
        if(rgb&(1<<2) ||rgb&(1<<3)){
          DDRD |= 1<<1;
    1810:	51 9a       	sbi	0x0a, 1	; 10
          PORTD |= 1<<1;
    1812:	59 9a       	sbi	0x0b, 1	; 11
        if(rgb&(1<<4) ||rgb&(1<<5)){
          DDRD |= 1<<2;
          PORTD |= 1<<2;
        }
        else{
          DDRD &= ~(1<<2);
    1814:	52 98       	cbi	0x0a, 2	; 10
    1816:	c8 ce       	rjmp	.-624    	; 0x15a8 <kilo_start+0x58>

00001818 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1818:	fc 01       	movw	r30, r24
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    181a:	80 81       	ld	r24, Z
    181c:	2f ef       	ldi	r18, 0xFF	; 255
    181e:	3f ef       	ldi	r19, 0xFF	; 255
    1820:	28 27       	eor	r18, r24
    1822:	02 2e       	mov	r0, r18
    1824:	22 95       	swap	r18
    1826:	20 7f       	andi	r18, 0xF0	; 240
    1828:	20 25       	eor	r18, r0
    182a:	03 2e       	mov	r0, r19
    182c:	32 2f       	mov	r19, r18
    182e:	22 95       	swap	r18
    1830:	2f 70       	andi	r18, 0x0F	; 15
    1832:	02 26       	eor	r0, r18
    1834:	26 95       	lsr	r18
    1836:	32 27       	eor	r19, r18
    1838:	23 27       	eor	r18, r19
    183a:	22 0f       	add	r18, r18
    183c:	22 0f       	add	r18, r18
    183e:	22 0f       	add	r18, r18
    1840:	20 25       	eor	r18, r0
    1842:	81 81       	ldd	r24, Z+1	; 0x01
    1844:	28 27       	eor	r18, r24
    1846:	02 2e       	mov	r0, r18
    1848:	22 95       	swap	r18
    184a:	20 7f       	andi	r18, 0xF0	; 240
    184c:	20 25       	eor	r18, r0
    184e:	03 2e       	mov	r0, r19
    1850:	32 2f       	mov	r19, r18
    1852:	22 95       	swap	r18
    1854:	2f 70       	andi	r18, 0x0F	; 15
    1856:	02 26       	eor	r0, r18
    1858:	26 95       	lsr	r18
    185a:	32 27       	eor	r19, r18
    185c:	23 27       	eor	r18, r19
    185e:	22 0f       	add	r18, r18
    1860:	22 0f       	add	r18, r18
    1862:	22 0f       	add	r18, r18
    1864:	20 25       	eor	r18, r0
    1866:	82 81       	ldd	r24, Z+2	; 0x02
    1868:	28 27       	eor	r18, r24
    186a:	02 2e       	mov	r0, r18
    186c:	22 95       	swap	r18
    186e:	20 7f       	andi	r18, 0xF0	; 240
    1870:	20 25       	eor	r18, r0
    1872:	03 2e       	mov	r0, r19
    1874:	32 2f       	mov	r19, r18
    1876:	22 95       	swap	r18
    1878:	2f 70       	andi	r18, 0x0F	; 15
    187a:	02 26       	eor	r0, r18
    187c:	26 95       	lsr	r18
    187e:	32 27       	eor	r19, r18
    1880:	23 27       	eor	r18, r19
    1882:	22 0f       	add	r18, r18
    1884:	22 0f       	add	r18, r18
    1886:	22 0f       	add	r18, r18
    1888:	20 25       	eor	r18, r0
    188a:	83 81       	ldd	r24, Z+3	; 0x03
    188c:	28 27       	eor	r18, r24
    188e:	02 2e       	mov	r0, r18
    1890:	22 95       	swap	r18
    1892:	20 7f       	andi	r18, 0xF0	; 240
    1894:	20 25       	eor	r18, r0
    1896:	03 2e       	mov	r0, r19
    1898:	32 2f       	mov	r19, r18
    189a:	22 95       	swap	r18
    189c:	2f 70       	andi	r18, 0x0F	; 15
    189e:	02 26       	eor	r0, r18
    18a0:	26 95       	lsr	r18
    18a2:	32 27       	eor	r19, r18
    18a4:	23 27       	eor	r18, r19
    18a6:	22 0f       	add	r18, r18
    18a8:	22 0f       	add	r18, r18
    18aa:	22 0f       	add	r18, r18
    18ac:	20 25       	eor	r18, r0
    18ae:	84 81       	ldd	r24, Z+4	; 0x04
    18b0:	28 27       	eor	r18, r24
    18b2:	02 2e       	mov	r0, r18
    18b4:	22 95       	swap	r18
    18b6:	20 7f       	andi	r18, 0xF0	; 240
    18b8:	20 25       	eor	r18, r0
    18ba:	03 2e       	mov	r0, r19
    18bc:	32 2f       	mov	r19, r18
    18be:	22 95       	swap	r18
    18c0:	2f 70       	andi	r18, 0x0F	; 15
    18c2:	02 26       	eor	r0, r18
    18c4:	26 95       	lsr	r18
    18c6:	32 27       	eor	r19, r18
    18c8:	23 27       	eor	r18, r19
    18ca:	22 0f       	add	r18, r18
    18cc:	22 0f       	add	r18, r18
    18ce:	22 0f       	add	r18, r18
    18d0:	20 25       	eor	r18, r0
    18d2:	85 81       	ldd	r24, Z+5	; 0x05
    18d4:	28 27       	eor	r18, r24
    18d6:	02 2e       	mov	r0, r18
    18d8:	22 95       	swap	r18
    18da:	20 7f       	andi	r18, 0xF0	; 240
    18dc:	20 25       	eor	r18, r0
    18de:	03 2e       	mov	r0, r19
    18e0:	32 2f       	mov	r19, r18
    18e2:	22 95       	swap	r18
    18e4:	2f 70       	andi	r18, 0x0F	; 15
    18e6:	02 26       	eor	r0, r18
    18e8:	26 95       	lsr	r18
    18ea:	32 27       	eor	r19, r18
    18ec:	23 27       	eor	r18, r19
    18ee:	22 0f       	add	r18, r18
    18f0:	22 0f       	add	r18, r18
    18f2:	22 0f       	add	r18, r18
    18f4:	20 25       	eor	r18, r0
    18f6:	86 81       	ldd	r24, Z+6	; 0x06
    18f8:	28 27       	eor	r18, r24
    18fa:	02 2e       	mov	r0, r18
    18fc:	22 95       	swap	r18
    18fe:	20 7f       	andi	r18, 0xF0	; 240
    1900:	20 25       	eor	r18, r0
    1902:	03 2e       	mov	r0, r19
    1904:	32 2f       	mov	r19, r18
    1906:	22 95       	swap	r18
    1908:	2f 70       	andi	r18, 0x0F	; 15
    190a:	02 26       	eor	r0, r18
    190c:	26 95       	lsr	r18
    190e:	32 27       	eor	r19, r18
    1910:	23 27       	eor	r18, r19
    1912:	22 0f       	add	r18, r18
    1914:	22 0f       	add	r18, r18
    1916:	22 0f       	add	r18, r18
    1918:	20 25       	eor	r18, r0
    191a:	87 81       	ldd	r24, Z+7	; 0x07
    191c:	28 27       	eor	r18, r24
    191e:	02 2e       	mov	r0, r18
    1920:	22 95       	swap	r18
    1922:	20 7f       	andi	r18, 0xF0	; 240
    1924:	20 25       	eor	r18, r0
    1926:	03 2e       	mov	r0, r19
    1928:	32 2f       	mov	r19, r18
    192a:	22 95       	swap	r18
    192c:	2f 70       	andi	r18, 0x0F	; 15
    192e:	02 26       	eor	r0, r18
    1930:	26 95       	lsr	r18
    1932:	32 27       	eor	r19, r18
    1934:	23 27       	eor	r18, r19
    1936:	22 0f       	add	r18, r18
    1938:	22 0f       	add	r18, r18
    193a:	22 0f       	add	r18, r18
    193c:	20 25       	eor	r18, r0
    193e:	80 85       	ldd	r24, Z+8	; 0x08
    1940:	28 27       	eor	r18, r24
    1942:	02 2e       	mov	r0, r18
    1944:	22 95       	swap	r18
    1946:	20 7f       	andi	r18, 0xF0	; 240
    1948:	20 25       	eor	r18, r0
    194a:	03 2e       	mov	r0, r19
    194c:	32 2f       	mov	r19, r18
    194e:	22 95       	swap	r18
    1950:	2f 70       	andi	r18, 0x0F	; 15
    1952:	02 26       	eor	r0, r18
    1954:	26 95       	lsr	r18
    1956:	32 27       	eor	r19, r18
    1958:	23 27       	eor	r18, r19
    195a:	22 0f       	add	r18, r18
    195c:	22 0f       	add	r18, r18
    195e:	22 0f       	add	r18, r18
    1960:	20 25       	eor	r18, r0
    1962:	81 85       	ldd	r24, Z+9	; 0x09
    1964:	28 27       	eor	r18, r24
    1966:	02 2e       	mov	r0, r18
    1968:	22 95       	swap	r18
    196a:	20 7f       	andi	r18, 0xF0	; 240
    196c:	20 25       	eor	r18, r0
    196e:	03 2e       	mov	r0, r19
    1970:	32 2f       	mov	r19, r18
    1972:	22 95       	swap	r18
    1974:	2f 70       	andi	r18, 0x0F	; 15
    1976:	02 26       	eor	r0, r18
    1978:	26 95       	lsr	r18
    197a:	32 27       	eor	r19, r18
    197c:	23 27       	eor	r18, r19
    197e:	22 0f       	add	r18, r18
    1980:	22 0f       	add	r18, r18
    1982:	22 0f       	add	r18, r18
    1984:	20 25       	eor	r18, r0
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1986:	c9 01       	movw	r24, r18
    1988:	08 95       	ret

0000198a <message_send>:
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	f8 94       	cli
    198e:	a4 b1       	in	r26, 0x04	; 4
    1990:	20 91 3d 02 	lds	r18, 0x023D
    1994:	2a 2b       	or	r18, r26
    1996:	24 b9       	out	0x04, r18	; 4
    1998:	21 e0       	ldi	r18, 0x01	; 1
    199a:	30 91 3d 02 	lds	r19, 0x023D
    199e:	20 30       	cpi	r18, 0x00	; 0
    19a0:	29 f0       	breq	.+10     	; 0x19ac <message_send+0x22>
    19a2:	00 00       	nop
    19a4:	25 b1       	in	r18, 0x05	; 5
    19a6:	23 2b       	or	r18, r19
    19a8:	25 b9       	out	0x05, r18	; 5
    19aa:	04 c0       	rjmp	.+8      	; 0x19b4 <message_send+0x2a>
    19ac:	00 00       	nop
    19ae:	00 00       	nop
    19b0:	00 00       	nop
    19b2:	00 c0       	rjmp	.+0      	; 0x19b4 <message_send+0x2a>
    19b4:	00 00       	nop
    19b6:	00 00       	nop
    19b8:	00 00       	nop
    19ba:	30 95       	com	r19
    19bc:	25 b1       	in	r18, 0x05	; 5
    19be:	23 23       	and	r18, r19
    19c0:	25 b9       	out	0x05, r18	; 5
    19c2:	2e ea       	ldi	r18, 0xAE	; 174
    19c4:	2a 95       	dec	r18
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <message_send+0x3a>
    19c8:	2b ee       	ldi	r18, 0xEB	; 235

000019ca <checkcollision>:
    19ca:	30 b7       	in	r19, 0x30	; 48
    19cc:	35 ff       	sbrs	r19, 5
    19ce:	0a c0       	rjmp	.+20     	; 0x19e4 <nocollision>
    19d0:	a4 b9       	out	0x04, r26	; 4
    19d2:	30 91 3d 02 	lds	r19, 0x023D
    19d6:	30 95       	com	r19
    19d8:	25 b1       	in	r18, 0x05	; 5
    19da:	23 23       	and	r18, r19
    19dc:	25 b9       	out	0x05, r18	; 5
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	08 95       	ret

000019e4 <nocollision>:
    19e4:	00 00       	nop
    19e6:	2a 95       	dec	r18
    19e8:	81 f7       	brne	.-32     	; 0x19ca <checkcollision>
    19ea:	21 e0       	ldi	r18, 0x01	; 1
    19ec:	30 91 3d 02 	lds	r19, 0x023D
    19f0:	20 30       	cpi	r18, 0x00	; 0
    19f2:	29 f0       	breq	.+10     	; 0x19fe <nocollision+0x1a>
    19f4:	00 00       	nop
    19f6:	25 b1       	in	r18, 0x05	; 5
    19f8:	23 2b       	or	r18, r19
    19fa:	25 b9       	out	0x05, r18	; 5
    19fc:	04 c0       	rjmp	.+8      	; 0x1a06 <nocollision+0x22>
    19fe:	00 00       	nop
    1a00:	00 00       	nop
    1a02:	00 00       	nop
    1a04:	00 c0       	rjmp	.+0      	; 0x1a06 <nocollision+0x22>
    1a06:	00 00       	nop
    1a08:	00 00       	nop
    1a0a:	00 00       	nop
    1a0c:	30 95       	com	r19
    1a0e:	25 b1       	in	r18, 0x05	; 5
    1a10:	23 23       	and	r18, r19
    1a12:	25 b9       	out	0x05, r18	; 5
    1a14:	00 00       	nop
    1a16:	24 e5       	ldi	r18, 0x54	; 84
    1a18:	2a 95       	dec	r18
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <nocollision+0x34>
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	8c e0       	ldi	r24, 0x0C	; 12

00001a20 <sendbyte>:
    1a20:	61 91       	ld	r22, Z+
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    1a24:	66 0f       	add	r22, r22
    1a26:	77 1f       	adc	r23, r23
    1a28:	61 60       	ori	r22, 0x01	; 1
    1a2a:	72 60       	ori	r23, 0x02	; 2
    1a2c:	9a e0       	ldi	r25, 0x0A	; 10
    1a2e:	41 e0       	ldi	r20, 0x01	; 1
    1a30:	50 e0       	ldi	r21, 0x00	; 0

00001a32 <sendbit>:
    1a32:	9a 01       	movw	r18, r20
    1a34:	26 23       	and	r18, r22
    1a36:	37 23       	and	r19, r23
    1a38:	23 2b       	or	r18, r19
    1a3a:	30 91 3d 02 	lds	r19, 0x023D
    1a3e:	20 30       	cpi	r18, 0x00	; 0
    1a40:	29 f0       	breq	.+10     	; 0x1a4c <sendbit+0x1a>
    1a42:	00 00       	nop
    1a44:	25 b1       	in	r18, 0x05	; 5
    1a46:	23 2b       	or	r18, r19
    1a48:	25 b9       	out	0x05, r18	; 5
    1a4a:	04 c0       	rjmp	.+8      	; 0x1a54 <sendbit+0x22>
    1a4c:	00 00       	nop
    1a4e:	00 00       	nop
    1a50:	00 00       	nop
    1a52:	00 c0       	rjmp	.+0      	; 0x1a54 <sendbit+0x22>
    1a54:	00 00       	nop
    1a56:	00 00       	nop
    1a58:	00 00       	nop
    1a5a:	30 95       	com	r19
    1a5c:	25 b1       	in	r18, 0x05	; 5
    1a5e:	23 23       	and	r18, r19
    1a60:	25 b9       	out	0x05, r18	; 5
    1a62:	00 00       	nop
    1a64:	21 e5       	ldi	r18, 0x51	; 81
    1a66:	2a 95       	dec	r18
    1a68:	f1 f7       	brne	.-4      	; 0x1a66 <sendbit+0x34>
    1a6a:	44 0f       	add	r20, r20
    1a6c:	55 1f       	adc	r21, r21
    1a6e:	9a 95       	dec	r25
    1a70:	01 f7       	brne	.-64     	; 0x1a32 <sendbit>
    1a72:	8a 95       	dec	r24
    1a74:	a9 f6       	brne	.-86     	; 0x1a20 <sendbyte>
    1a76:	20 b7       	in	r18, 0x30	; 48
    1a78:	20 61       	ori	r18, 0x10	; 16
    1a7a:	20 bf       	out	0x30, r18	; 48
    1a7c:	a4 b9       	out	0x04, r26	; 4
    1a7e:	30 91 3d 02 	lds	r19, 0x023D
    1a82:	30 95       	com	r19
    1a84:	25 b1       	in	r18, 0x05	; 5
    1a86:	23 23       	and	r18, r19
    1a88:	25 b9       	out	0x05, r18	; 5
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	08 95       	ret

00001a90 <__fixunssfsi>:
    1a90:	ef 92       	push	r14
    1a92:	ff 92       	push	r15
    1a94:	0f 93       	push	r16
    1a96:	1f 93       	push	r17
    1a98:	7b 01       	movw	r14, r22
    1a9a:	8c 01       	movw	r16, r24
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e0       	ldi	r20, 0x00	; 0
    1aa2:	5f e4       	ldi	r21, 0x4F	; 79
    1aa4:	0e 94 c4 10 	call	0x2188	; 0x2188 <__gesf2>
    1aa8:	88 23       	and	r24, r24
    1aaa:	8c f0       	brlt	.+34     	; 0x1ace <__fixunssfsi+0x3e>
    1aac:	c8 01       	movw	r24, r16
    1aae:	b7 01       	movw	r22, r14
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e0       	ldi	r20, 0x00	; 0
    1ab6:	5f e4       	ldi	r21, 0x4F	; 79
    1ab8:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__subsf3>
    1abc:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__fixsfsi>
    1ac0:	9b 01       	movw	r18, r22
    1ac2:	ac 01       	movw	r20, r24
    1ac4:	20 50       	subi	r18, 0x00	; 0
    1ac6:	30 40       	sbci	r19, 0x00	; 0
    1ac8:	40 40       	sbci	r20, 0x00	; 0
    1aca:	50 48       	sbci	r21, 0x80	; 128
    1acc:	06 c0       	rjmp	.+12     	; 0x1ada <__fixunssfsi+0x4a>
    1ace:	c8 01       	movw	r24, r16
    1ad0:	b7 01       	movw	r22, r14
    1ad2:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__fixsfsi>
    1ad6:	9b 01       	movw	r18, r22
    1ad8:	ac 01       	movw	r20, r24
    1ada:	b9 01       	movw	r22, r18
    1adc:	ca 01       	movw	r24, r20
    1ade:	1f 91       	pop	r17
    1ae0:	0f 91       	pop	r16
    1ae2:	ff 90       	pop	r15
    1ae4:	ef 90       	pop	r14
    1ae6:	08 95       	ret

00001ae8 <_fpadd_parts>:
    1ae8:	a0 e0       	ldi	r26, 0x00	; 0
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	ea e7       	ldi	r30, 0x7A	; 122
    1aee:	fd e0       	ldi	r31, 0x0D	; 13
    1af0:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__prologue_saves__>
    1af4:	dc 01       	movw	r26, r24
    1af6:	2b 01       	movw	r4, r22
    1af8:	fa 01       	movw	r30, r20
    1afa:	9c 91       	ld	r25, X
    1afc:	92 30       	cpi	r25, 0x02	; 2
    1afe:	08 f4       	brcc	.+2      	; 0x1b02 <_fpadd_parts+0x1a>
    1b00:	39 c1       	rjmp	.+626    	; 0x1d74 <_fpadd_parts+0x28c>
    1b02:	eb 01       	movw	r28, r22
    1b04:	88 81       	ld	r24, Y
    1b06:	82 30       	cpi	r24, 0x02	; 2
    1b08:	08 f4       	brcc	.+2      	; 0x1b0c <_fpadd_parts+0x24>
    1b0a:	33 c1       	rjmp	.+614    	; 0x1d72 <_fpadd_parts+0x28a>
    1b0c:	94 30       	cpi	r25, 0x04	; 4
    1b0e:	69 f4       	brne	.+26     	; 0x1b2a <_fpadd_parts+0x42>
    1b10:	84 30       	cpi	r24, 0x04	; 4
    1b12:	09 f0       	breq	.+2      	; 0x1b16 <_fpadd_parts+0x2e>
    1b14:	2f c1       	rjmp	.+606    	; 0x1d74 <_fpadd_parts+0x28c>
    1b16:	11 96       	adiw	r26, 0x01	; 1
    1b18:	9c 91       	ld	r25, X
    1b1a:	11 97       	sbiw	r26, 0x01	; 1
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	98 17       	cp	r25, r24
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <_fpadd_parts+0x3c>
    1b22:	28 c1       	rjmp	.+592    	; 0x1d74 <_fpadd_parts+0x28c>
    1b24:	a9 e0       	ldi	r26, 0x09	; 9
    1b26:	b1 e0       	ldi	r27, 0x01	; 1
    1b28:	25 c1       	rjmp	.+586    	; 0x1d74 <_fpadd_parts+0x28c>
    1b2a:	84 30       	cpi	r24, 0x04	; 4
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <_fpadd_parts+0x48>
    1b2e:	21 c1       	rjmp	.+578    	; 0x1d72 <_fpadd_parts+0x28a>
    1b30:	82 30       	cpi	r24, 0x02	; 2
    1b32:	a9 f4       	brne	.+42     	; 0x1b5e <_fpadd_parts+0x76>
    1b34:	92 30       	cpi	r25, 0x02	; 2
    1b36:	09 f0       	breq	.+2      	; 0x1b3a <_fpadd_parts+0x52>
    1b38:	1d c1       	rjmp	.+570    	; 0x1d74 <_fpadd_parts+0x28c>
    1b3a:	9a 01       	movw	r18, r20
    1b3c:	ad 01       	movw	r20, r26
    1b3e:	88 e0       	ldi	r24, 0x08	; 8
    1b40:	ea 01       	movw	r28, r20
    1b42:	09 90       	ld	r0, Y+
    1b44:	ae 01       	movw	r20, r28
    1b46:	e9 01       	movw	r28, r18
    1b48:	09 92       	st	Y+, r0
    1b4a:	9e 01       	movw	r18, r28
    1b4c:	81 50       	subi	r24, 0x01	; 1
    1b4e:	c1 f7       	brne	.-16     	; 0x1b40 <_fpadd_parts+0x58>
    1b50:	e2 01       	movw	r28, r4
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	11 96       	adiw	r26, 0x01	; 1
    1b56:	9c 91       	ld	r25, X
    1b58:	89 23       	and	r24, r25
    1b5a:	81 83       	std	Z+1, r24	; 0x01
    1b5c:	08 c1       	rjmp	.+528    	; 0x1d6e <_fpadd_parts+0x286>
    1b5e:	92 30       	cpi	r25, 0x02	; 2
    1b60:	09 f4       	brne	.+2      	; 0x1b64 <_fpadd_parts+0x7c>
    1b62:	07 c1       	rjmp	.+526    	; 0x1d72 <_fpadd_parts+0x28a>
    1b64:	12 96       	adiw	r26, 0x02	; 2
    1b66:	2d 90       	ld	r2, X+
    1b68:	3c 90       	ld	r3, X
    1b6a:	13 97       	sbiw	r26, 0x03	; 3
    1b6c:	eb 01       	movw	r28, r22
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	9b 81       	ldd	r25, Y+3	; 0x03
    1b72:	14 96       	adiw	r26, 0x04	; 4
    1b74:	ad 90       	ld	r10, X+
    1b76:	bd 90       	ld	r11, X+
    1b78:	cd 90       	ld	r12, X+
    1b7a:	dc 90       	ld	r13, X
    1b7c:	17 97       	sbiw	r26, 0x07	; 7
    1b7e:	ec 80       	ldd	r14, Y+4	; 0x04
    1b80:	fd 80       	ldd	r15, Y+5	; 0x05
    1b82:	0e 81       	ldd	r16, Y+6	; 0x06
    1b84:	1f 81       	ldd	r17, Y+7	; 0x07
    1b86:	91 01       	movw	r18, r2
    1b88:	28 1b       	sub	r18, r24
    1b8a:	39 0b       	sbc	r19, r25
    1b8c:	b9 01       	movw	r22, r18
    1b8e:	37 ff       	sbrs	r19, 7
    1b90:	04 c0       	rjmp	.+8      	; 0x1b9a <_fpadd_parts+0xb2>
    1b92:	66 27       	eor	r22, r22
    1b94:	77 27       	eor	r23, r23
    1b96:	62 1b       	sub	r22, r18
    1b98:	73 0b       	sbc	r23, r19
    1b9a:	60 32       	cpi	r22, 0x20	; 32
    1b9c:	71 05       	cpc	r23, r1
    1b9e:	0c f0       	brlt	.+2      	; 0x1ba2 <_fpadd_parts+0xba>
    1ba0:	61 c0       	rjmp	.+194    	; 0x1c64 <_fpadd_parts+0x17c>
    1ba2:	12 16       	cp	r1, r18
    1ba4:	13 06       	cpc	r1, r19
    1ba6:	6c f5       	brge	.+90     	; 0x1c02 <_fpadd_parts+0x11a>
    1ba8:	37 01       	movw	r6, r14
    1baa:	48 01       	movw	r8, r16
    1bac:	06 2e       	mov	r0, r22
    1bae:	04 c0       	rjmp	.+8      	; 0x1bb8 <_fpadd_parts+0xd0>
    1bb0:	96 94       	lsr	r9
    1bb2:	87 94       	ror	r8
    1bb4:	77 94       	ror	r7
    1bb6:	67 94       	ror	r6
    1bb8:	0a 94       	dec	r0
    1bba:	d2 f7       	brpl	.-12     	; 0x1bb0 <_fpadd_parts+0xc8>
    1bbc:	21 e0       	ldi	r18, 0x01	; 1
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e0       	ldi	r20, 0x00	; 0
    1bc2:	50 e0       	ldi	r21, 0x00	; 0
    1bc4:	04 c0       	rjmp	.+8      	; 0x1bce <_fpadd_parts+0xe6>
    1bc6:	22 0f       	add	r18, r18
    1bc8:	33 1f       	adc	r19, r19
    1bca:	44 1f       	adc	r20, r20
    1bcc:	55 1f       	adc	r21, r21
    1bce:	6a 95       	dec	r22
    1bd0:	d2 f7       	brpl	.-12     	; 0x1bc6 <_fpadd_parts+0xde>
    1bd2:	21 50       	subi	r18, 0x01	; 1
    1bd4:	30 40       	sbci	r19, 0x00	; 0
    1bd6:	40 40       	sbci	r20, 0x00	; 0
    1bd8:	50 40       	sbci	r21, 0x00	; 0
    1bda:	2e 21       	and	r18, r14
    1bdc:	3f 21       	and	r19, r15
    1bde:	40 23       	and	r20, r16
    1be0:	51 23       	and	r21, r17
    1be2:	21 15       	cp	r18, r1
    1be4:	31 05       	cpc	r19, r1
    1be6:	41 05       	cpc	r20, r1
    1be8:	51 05       	cpc	r21, r1
    1bea:	21 f0       	breq	.+8      	; 0x1bf4 <_fpadd_parts+0x10c>
    1bec:	21 e0       	ldi	r18, 0x01	; 1
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	79 01       	movw	r14, r18
    1bf6:	8a 01       	movw	r16, r20
    1bf8:	e6 28       	or	r14, r6
    1bfa:	f7 28       	or	r15, r7
    1bfc:	08 29       	or	r16, r8
    1bfe:	19 29       	or	r17, r9
    1c00:	3c c0       	rjmp	.+120    	; 0x1c7a <_fpadd_parts+0x192>
    1c02:	23 2b       	or	r18, r19
    1c04:	d1 f1       	breq	.+116    	; 0x1c7a <_fpadd_parts+0x192>
    1c06:	26 0e       	add	r2, r22
    1c08:	37 1e       	adc	r3, r23
    1c0a:	35 01       	movw	r6, r10
    1c0c:	46 01       	movw	r8, r12
    1c0e:	06 2e       	mov	r0, r22
    1c10:	04 c0       	rjmp	.+8      	; 0x1c1a <_fpadd_parts+0x132>
    1c12:	96 94       	lsr	r9
    1c14:	87 94       	ror	r8
    1c16:	77 94       	ror	r7
    1c18:	67 94       	ror	r6
    1c1a:	0a 94       	dec	r0
    1c1c:	d2 f7       	brpl	.-12     	; 0x1c12 <_fpadd_parts+0x12a>
    1c1e:	21 e0       	ldi	r18, 0x01	; 1
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e0       	ldi	r20, 0x00	; 0
    1c24:	50 e0       	ldi	r21, 0x00	; 0
    1c26:	04 c0       	rjmp	.+8      	; 0x1c30 <_fpadd_parts+0x148>
    1c28:	22 0f       	add	r18, r18
    1c2a:	33 1f       	adc	r19, r19
    1c2c:	44 1f       	adc	r20, r20
    1c2e:	55 1f       	adc	r21, r21
    1c30:	6a 95       	dec	r22
    1c32:	d2 f7       	brpl	.-12     	; 0x1c28 <_fpadd_parts+0x140>
    1c34:	21 50       	subi	r18, 0x01	; 1
    1c36:	30 40       	sbci	r19, 0x00	; 0
    1c38:	40 40       	sbci	r20, 0x00	; 0
    1c3a:	50 40       	sbci	r21, 0x00	; 0
    1c3c:	2a 21       	and	r18, r10
    1c3e:	3b 21       	and	r19, r11
    1c40:	4c 21       	and	r20, r12
    1c42:	5d 21       	and	r21, r13
    1c44:	21 15       	cp	r18, r1
    1c46:	31 05       	cpc	r19, r1
    1c48:	41 05       	cpc	r20, r1
    1c4a:	51 05       	cpc	r21, r1
    1c4c:	21 f0       	breq	.+8      	; 0x1c56 <_fpadd_parts+0x16e>
    1c4e:	21 e0       	ldi	r18, 0x01	; 1
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e0       	ldi	r20, 0x00	; 0
    1c54:	50 e0       	ldi	r21, 0x00	; 0
    1c56:	59 01       	movw	r10, r18
    1c58:	6a 01       	movw	r12, r20
    1c5a:	a6 28       	or	r10, r6
    1c5c:	b7 28       	or	r11, r7
    1c5e:	c8 28       	or	r12, r8
    1c60:	d9 28       	or	r13, r9
    1c62:	0b c0       	rjmp	.+22     	; 0x1c7a <_fpadd_parts+0x192>
    1c64:	82 15       	cp	r24, r2
    1c66:	93 05       	cpc	r25, r3
    1c68:	2c f0       	brlt	.+10     	; 0x1c74 <_fpadd_parts+0x18c>
    1c6a:	1c 01       	movw	r2, r24
    1c6c:	aa 24       	eor	r10, r10
    1c6e:	bb 24       	eor	r11, r11
    1c70:	65 01       	movw	r12, r10
    1c72:	03 c0       	rjmp	.+6      	; 0x1c7a <_fpadd_parts+0x192>
    1c74:	ee 24       	eor	r14, r14
    1c76:	ff 24       	eor	r15, r15
    1c78:	87 01       	movw	r16, r14
    1c7a:	11 96       	adiw	r26, 0x01	; 1
    1c7c:	9c 91       	ld	r25, X
    1c7e:	d2 01       	movw	r26, r4
    1c80:	11 96       	adiw	r26, 0x01	; 1
    1c82:	8c 91       	ld	r24, X
    1c84:	98 17       	cp	r25, r24
    1c86:	09 f4       	brne	.+2      	; 0x1c8a <_fpadd_parts+0x1a2>
    1c88:	45 c0       	rjmp	.+138    	; 0x1d14 <_fpadd_parts+0x22c>
    1c8a:	99 23       	and	r25, r25
    1c8c:	39 f0       	breq	.+14     	; 0x1c9c <_fpadd_parts+0x1b4>
    1c8e:	a8 01       	movw	r20, r16
    1c90:	97 01       	movw	r18, r14
    1c92:	2a 19       	sub	r18, r10
    1c94:	3b 09       	sbc	r19, r11
    1c96:	4c 09       	sbc	r20, r12
    1c98:	5d 09       	sbc	r21, r13
    1c9a:	06 c0       	rjmp	.+12     	; 0x1ca8 <_fpadd_parts+0x1c0>
    1c9c:	a6 01       	movw	r20, r12
    1c9e:	95 01       	movw	r18, r10
    1ca0:	2e 19       	sub	r18, r14
    1ca2:	3f 09       	sbc	r19, r15
    1ca4:	40 0b       	sbc	r20, r16
    1ca6:	51 0b       	sbc	r21, r17
    1ca8:	57 fd       	sbrc	r21, 7
    1caa:	08 c0       	rjmp	.+16     	; 0x1cbc <_fpadd_parts+0x1d4>
    1cac:	11 82       	std	Z+1, r1	; 0x01
    1cae:	33 82       	std	Z+3, r3	; 0x03
    1cb0:	22 82       	std	Z+2, r2	; 0x02
    1cb2:	24 83       	std	Z+4, r18	; 0x04
    1cb4:	35 83       	std	Z+5, r19	; 0x05
    1cb6:	46 83       	std	Z+6, r20	; 0x06
    1cb8:	57 83       	std	Z+7, r21	; 0x07
    1cba:	1d c0       	rjmp	.+58     	; 0x1cf6 <_fpadd_parts+0x20e>
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	81 83       	std	Z+1, r24	; 0x01
    1cc0:	33 82       	std	Z+3, r3	; 0x03
    1cc2:	22 82       	std	Z+2, r2	; 0x02
    1cc4:	88 27       	eor	r24, r24
    1cc6:	99 27       	eor	r25, r25
    1cc8:	dc 01       	movw	r26, r24
    1cca:	82 1b       	sub	r24, r18
    1ccc:	93 0b       	sbc	r25, r19
    1cce:	a4 0b       	sbc	r26, r20
    1cd0:	b5 0b       	sbc	r27, r21
    1cd2:	84 83       	std	Z+4, r24	; 0x04
    1cd4:	95 83       	std	Z+5, r25	; 0x05
    1cd6:	a6 83       	std	Z+6, r26	; 0x06
    1cd8:	b7 83       	std	Z+7, r27	; 0x07
    1cda:	0d c0       	rjmp	.+26     	; 0x1cf6 <_fpadd_parts+0x20e>
    1cdc:	22 0f       	add	r18, r18
    1cde:	33 1f       	adc	r19, r19
    1ce0:	44 1f       	adc	r20, r20
    1ce2:	55 1f       	adc	r21, r21
    1ce4:	24 83       	std	Z+4, r18	; 0x04
    1ce6:	35 83       	std	Z+5, r19	; 0x05
    1ce8:	46 83       	std	Z+6, r20	; 0x06
    1cea:	57 83       	std	Z+7, r21	; 0x07
    1cec:	82 81       	ldd	r24, Z+2	; 0x02
    1cee:	93 81       	ldd	r25, Z+3	; 0x03
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	93 83       	std	Z+3, r25	; 0x03
    1cf4:	82 83       	std	Z+2, r24	; 0x02
    1cf6:	24 81       	ldd	r18, Z+4	; 0x04
    1cf8:	35 81       	ldd	r19, Z+5	; 0x05
    1cfa:	46 81       	ldd	r20, Z+6	; 0x06
    1cfc:	57 81       	ldd	r21, Z+7	; 0x07
    1cfe:	da 01       	movw	r26, r20
    1d00:	c9 01       	movw	r24, r18
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	a1 09       	sbc	r26, r1
    1d06:	b1 09       	sbc	r27, r1
    1d08:	8f 5f       	subi	r24, 0xFF	; 255
    1d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0c:	af 4f       	sbci	r26, 0xFF	; 255
    1d0e:	bf 43       	sbci	r27, 0x3F	; 63
    1d10:	28 f3       	brcs	.-54     	; 0x1cdc <_fpadd_parts+0x1f4>
    1d12:	0b c0       	rjmp	.+22     	; 0x1d2a <_fpadd_parts+0x242>
    1d14:	91 83       	std	Z+1, r25	; 0x01
    1d16:	33 82       	std	Z+3, r3	; 0x03
    1d18:	22 82       	std	Z+2, r2	; 0x02
    1d1a:	ea 0c       	add	r14, r10
    1d1c:	fb 1c       	adc	r15, r11
    1d1e:	0c 1d       	adc	r16, r12
    1d20:	1d 1d       	adc	r17, r13
    1d22:	e4 82       	std	Z+4, r14	; 0x04
    1d24:	f5 82       	std	Z+5, r15	; 0x05
    1d26:	06 83       	std	Z+6, r16	; 0x06
    1d28:	17 83       	std	Z+7, r17	; 0x07
    1d2a:	83 e0       	ldi	r24, 0x03	; 3
    1d2c:	80 83       	st	Z, r24
    1d2e:	24 81       	ldd	r18, Z+4	; 0x04
    1d30:	35 81       	ldd	r19, Z+5	; 0x05
    1d32:	46 81       	ldd	r20, Z+6	; 0x06
    1d34:	57 81       	ldd	r21, Z+7	; 0x07
    1d36:	57 ff       	sbrs	r21, 7
    1d38:	1a c0       	rjmp	.+52     	; 0x1d6e <_fpadd_parts+0x286>
    1d3a:	c9 01       	movw	r24, r18
    1d3c:	aa 27       	eor	r26, r26
    1d3e:	97 fd       	sbrc	r25, 7
    1d40:	a0 95       	com	r26
    1d42:	ba 2f       	mov	r27, r26
    1d44:	81 70       	andi	r24, 0x01	; 1
    1d46:	90 70       	andi	r25, 0x00	; 0
    1d48:	a0 70       	andi	r26, 0x00	; 0
    1d4a:	b0 70       	andi	r27, 0x00	; 0
    1d4c:	56 95       	lsr	r21
    1d4e:	47 95       	ror	r20
    1d50:	37 95       	ror	r19
    1d52:	27 95       	ror	r18
    1d54:	82 2b       	or	r24, r18
    1d56:	93 2b       	or	r25, r19
    1d58:	a4 2b       	or	r26, r20
    1d5a:	b5 2b       	or	r27, r21
    1d5c:	84 83       	std	Z+4, r24	; 0x04
    1d5e:	95 83       	std	Z+5, r25	; 0x05
    1d60:	a6 83       	std	Z+6, r26	; 0x06
    1d62:	b7 83       	std	Z+7, r27	; 0x07
    1d64:	82 81       	ldd	r24, Z+2	; 0x02
    1d66:	93 81       	ldd	r25, Z+3	; 0x03
    1d68:	01 96       	adiw	r24, 0x01	; 1
    1d6a:	93 83       	std	Z+3, r25	; 0x03
    1d6c:	82 83       	std	Z+2, r24	; 0x02
    1d6e:	df 01       	movw	r26, r30
    1d70:	01 c0       	rjmp	.+2      	; 0x1d74 <_fpadd_parts+0x28c>
    1d72:	d2 01       	movw	r26, r4
    1d74:	cd 01       	movw	r24, r26
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	e2 e1       	ldi	r30, 0x12	; 18
    1d7c:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <__epilogue_restores__>

00001d80 <__subsf3>:
    1d80:	a0 e2       	ldi	r26, 0x20	; 32
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e6 ec       	ldi	r30, 0xC6	; 198
    1d86:	fe e0       	ldi	r31, 0x0E	; 14
    1d88:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__prologue_saves__+0x18>
    1d8c:	69 83       	std	Y+1, r22	; 0x01
    1d8e:	7a 83       	std	Y+2, r23	; 0x02
    1d90:	8b 83       	std	Y+3, r24	; 0x03
    1d92:	9c 83       	std	Y+4, r25	; 0x04
    1d94:	2d 83       	std	Y+5, r18	; 0x05
    1d96:	3e 83       	std	Y+6, r19	; 0x06
    1d98:	4f 83       	std	Y+7, r20	; 0x07
    1d9a:	58 87       	std	Y+8, r21	; 0x08
    1d9c:	e9 e0       	ldi	r30, 0x09	; 9
    1d9e:	ee 2e       	mov	r14, r30
    1da0:	f1 2c       	mov	r15, r1
    1da2:	ec 0e       	add	r14, r28
    1da4:	fd 1e       	adc	r15, r29
    1da6:	ce 01       	movw	r24, r28
    1da8:	01 96       	adiw	r24, 0x01	; 1
    1daa:	b7 01       	movw	r22, r14
    1dac:	0e 94 43 13 	call	0x2686	; 0x2686 <__unpack_f>
    1db0:	8e 01       	movw	r16, r28
    1db2:	0f 5e       	subi	r16, 0xEF	; 239
    1db4:	1f 4f       	sbci	r17, 0xFF	; 255
    1db6:	ce 01       	movw	r24, r28
    1db8:	05 96       	adiw	r24, 0x05	; 5
    1dba:	b8 01       	movw	r22, r16
    1dbc:	0e 94 43 13 	call	0x2686	; 0x2686 <__unpack_f>
    1dc0:	8a 89       	ldd	r24, Y+18	; 0x12
    1dc2:	91 e0       	ldi	r25, 0x01	; 1
    1dc4:	89 27       	eor	r24, r25
    1dc6:	8a 8b       	std	Y+18, r24	; 0x12
    1dc8:	c7 01       	movw	r24, r14
    1dca:	b8 01       	movw	r22, r16
    1dcc:	ae 01       	movw	r20, r28
    1dce:	47 5e       	subi	r20, 0xE7	; 231
    1dd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd2:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <_fpadd_parts>
    1dd6:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__pack_f>
    1dda:	a0 96       	adiw	r28, 0x20	; 32
    1ddc:	e6 e0       	ldi	r30, 0x06	; 6
    1dde:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__epilogue_restores__+0x18>

00001de2 <__addsf3>:
    1de2:	a0 e2       	ldi	r26, 0x20	; 32
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e7 ef       	ldi	r30, 0xF7	; 247
    1de8:	fe e0       	ldi	r31, 0x0E	; 14
    1dea:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__prologue_saves__+0x18>
    1dee:	69 83       	std	Y+1, r22	; 0x01
    1df0:	7a 83       	std	Y+2, r23	; 0x02
    1df2:	8b 83       	std	Y+3, r24	; 0x03
    1df4:	9c 83       	std	Y+4, r25	; 0x04
    1df6:	2d 83       	std	Y+5, r18	; 0x05
    1df8:	3e 83       	std	Y+6, r19	; 0x06
    1dfa:	4f 83       	std	Y+7, r20	; 0x07
    1dfc:	58 87       	std	Y+8, r21	; 0x08
    1dfe:	f9 e0       	ldi	r31, 0x09	; 9
    1e00:	ef 2e       	mov	r14, r31
    1e02:	f1 2c       	mov	r15, r1
    1e04:	ec 0e       	add	r14, r28
    1e06:	fd 1e       	adc	r15, r29
    1e08:	ce 01       	movw	r24, r28
    1e0a:	01 96       	adiw	r24, 0x01	; 1
    1e0c:	b7 01       	movw	r22, r14
    1e0e:	0e 94 43 13 	call	0x2686	; 0x2686 <__unpack_f>
    1e12:	8e 01       	movw	r16, r28
    1e14:	0f 5e       	subi	r16, 0xEF	; 239
    1e16:	1f 4f       	sbci	r17, 0xFF	; 255
    1e18:	ce 01       	movw	r24, r28
    1e1a:	05 96       	adiw	r24, 0x05	; 5
    1e1c:	b8 01       	movw	r22, r16
    1e1e:	0e 94 43 13 	call	0x2686	; 0x2686 <__unpack_f>
    1e22:	c7 01       	movw	r24, r14
    1e24:	b8 01       	movw	r22, r16
    1e26:	ae 01       	movw	r20, r28
    1e28:	47 5e       	subi	r20, 0xE7	; 231
    1e2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e2c:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <_fpadd_parts>
    1e30:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__pack_f>
    1e34:	a0 96       	adiw	r28, 0x20	; 32
    1e36:	e6 e0       	ldi	r30, 0x06	; 6
    1e38:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__epilogue_restores__+0x18>

00001e3c <__mulsf3>:
    1e3c:	a0 e2       	ldi	r26, 0x20	; 32
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	e4 e2       	ldi	r30, 0x24	; 36
    1e42:	ff e0       	ldi	r31, 0x0F	; 15
    1e44:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__prologue_saves__>
    1e48:	69 83       	std	Y+1, r22	; 0x01
    1e4a:	7a 83       	std	Y+2, r23	; 0x02
    1e4c:	8b 83       	std	Y+3, r24	; 0x03
    1e4e:	9c 83       	std	Y+4, r25	; 0x04
    1e50:	2d 83       	std	Y+5, r18	; 0x05
    1e52:	3e 83       	std	Y+6, r19	; 0x06
    1e54:	4f 83       	std	Y+7, r20	; 0x07
    1e56:	58 87       	std	Y+8, r21	; 0x08
    1e58:	ce 01       	movw	r24, r28
    1e5a:	01 96       	adiw	r24, 0x01	; 1
    1e5c:	be 01       	movw	r22, r28
    1e5e:	67 5f       	subi	r22, 0xF7	; 247
    1e60:	7f 4f       	sbci	r23, 0xFF	; 255
    1e62:	0e 94 43 13 	call	0x2686	; 0x2686 <__unpack_f>
    1e66:	ce 01       	movw	r24, r28
    1e68:	05 96       	adiw	r24, 0x05	; 5
    1e6a:	be 01       	movw	r22, r28
    1e6c:	6f 5e       	subi	r22, 0xEF	; 239
    1e6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e70:	0e 94 43 13 	call	0x2686	; 0x2686 <__unpack_f>
    1e74:	99 85       	ldd	r25, Y+9	; 0x09
    1e76:	92 30       	cpi	r25, 0x02	; 2
    1e78:	88 f0       	brcs	.+34     	; 0x1e9c <__mulsf3+0x60>
    1e7a:	89 89       	ldd	r24, Y+17	; 0x11
    1e7c:	82 30       	cpi	r24, 0x02	; 2
    1e7e:	c8 f0       	brcs	.+50     	; 0x1eb2 <__mulsf3+0x76>
    1e80:	94 30       	cpi	r25, 0x04	; 4
    1e82:	19 f4       	brne	.+6      	; 0x1e8a <__mulsf3+0x4e>
    1e84:	82 30       	cpi	r24, 0x02	; 2
    1e86:	51 f4       	brne	.+20     	; 0x1e9c <__mulsf3+0x60>
    1e88:	04 c0       	rjmp	.+8      	; 0x1e92 <__mulsf3+0x56>
    1e8a:	84 30       	cpi	r24, 0x04	; 4
    1e8c:	29 f4       	brne	.+10     	; 0x1e98 <__mulsf3+0x5c>
    1e8e:	92 30       	cpi	r25, 0x02	; 2
    1e90:	81 f4       	brne	.+32     	; 0x1eb2 <__mulsf3+0x76>
    1e92:	89 e0       	ldi	r24, 0x09	; 9
    1e94:	91 e0       	ldi	r25, 0x01	; 1
    1e96:	c6 c0       	rjmp	.+396    	; 0x2024 <__mulsf3+0x1e8>
    1e98:	92 30       	cpi	r25, 0x02	; 2
    1e9a:	49 f4       	brne	.+18     	; 0x1eae <__mulsf3+0x72>
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea0:	8a 89       	ldd	r24, Y+18	; 0x12
    1ea2:	98 13       	cpse	r25, r24
    1ea4:	21 e0       	ldi	r18, 0x01	; 1
    1ea6:	2a 87       	std	Y+10, r18	; 0x0a
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	09 96       	adiw	r24, 0x09	; 9
    1eac:	bb c0       	rjmp	.+374    	; 0x2024 <__mulsf3+0x1e8>
    1eae:	82 30       	cpi	r24, 0x02	; 2
    1eb0:	49 f4       	brne	.+18     	; 0x1ec4 <__mulsf3+0x88>
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb6:	8a 89       	ldd	r24, Y+18	; 0x12
    1eb8:	98 13       	cpse	r25, r24
    1eba:	21 e0       	ldi	r18, 0x01	; 1
    1ebc:	2a 8b       	std	Y+18, r18	; 0x12
    1ebe:	ce 01       	movw	r24, r28
    1ec0:	41 96       	adiw	r24, 0x11	; 17
    1ec2:	b0 c0       	rjmp	.+352    	; 0x2024 <__mulsf3+0x1e8>
    1ec4:	2d 84       	ldd	r2, Y+13	; 0x0d
    1ec6:	3e 84       	ldd	r3, Y+14	; 0x0e
    1ec8:	4f 84       	ldd	r4, Y+15	; 0x0f
    1eca:	58 88       	ldd	r5, Y+16	; 0x10
    1ecc:	6d 88       	ldd	r6, Y+21	; 0x15
    1ece:	7e 88       	ldd	r7, Y+22	; 0x16
    1ed0:	8f 88       	ldd	r8, Y+23	; 0x17
    1ed2:	98 8c       	ldd	r9, Y+24	; 0x18
    1ed4:	ee 24       	eor	r14, r14
    1ed6:	ff 24       	eor	r15, r15
    1ed8:	87 01       	movw	r16, r14
    1eda:	aa 24       	eor	r10, r10
    1edc:	bb 24       	eor	r11, r11
    1ede:	65 01       	movw	r12, r10
    1ee0:	40 e0       	ldi	r20, 0x00	; 0
    1ee2:	50 e0       	ldi	r21, 0x00	; 0
    1ee4:	60 e0       	ldi	r22, 0x00	; 0
    1ee6:	70 e0       	ldi	r23, 0x00	; 0
    1ee8:	e0 e0       	ldi	r30, 0x00	; 0
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	c1 01       	movw	r24, r2
    1eee:	81 70       	andi	r24, 0x01	; 1
    1ef0:	90 70       	andi	r25, 0x00	; 0
    1ef2:	89 2b       	or	r24, r25
    1ef4:	e9 f0       	breq	.+58     	; 0x1f30 <__mulsf3+0xf4>
    1ef6:	e6 0c       	add	r14, r6
    1ef8:	f7 1c       	adc	r15, r7
    1efa:	08 1d       	adc	r16, r8
    1efc:	19 1d       	adc	r17, r9
    1efe:	9a 01       	movw	r18, r20
    1f00:	ab 01       	movw	r20, r22
    1f02:	2a 0d       	add	r18, r10
    1f04:	3b 1d       	adc	r19, r11
    1f06:	4c 1d       	adc	r20, r12
    1f08:	5d 1d       	adc	r21, r13
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	a0 e0       	ldi	r26, 0x00	; 0
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	e6 14       	cp	r14, r6
    1f14:	f7 04       	cpc	r15, r7
    1f16:	08 05       	cpc	r16, r8
    1f18:	19 05       	cpc	r17, r9
    1f1a:	20 f4       	brcc	.+8      	; 0x1f24 <__mulsf3+0xe8>
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	a0 e0       	ldi	r26, 0x00	; 0
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	ba 01       	movw	r22, r20
    1f26:	a9 01       	movw	r20, r18
    1f28:	48 0f       	add	r20, r24
    1f2a:	59 1f       	adc	r21, r25
    1f2c:	6a 1f       	adc	r22, r26
    1f2e:	7b 1f       	adc	r23, r27
    1f30:	aa 0c       	add	r10, r10
    1f32:	bb 1c       	adc	r11, r11
    1f34:	cc 1c       	adc	r12, r12
    1f36:	dd 1c       	adc	r13, r13
    1f38:	97 fe       	sbrs	r9, 7
    1f3a:	08 c0       	rjmp	.+16     	; 0x1f4c <__mulsf3+0x110>
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	a0 e0       	ldi	r26, 0x00	; 0
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	a8 2a       	or	r10, r24
    1f46:	b9 2a       	or	r11, r25
    1f48:	ca 2a       	or	r12, r26
    1f4a:	db 2a       	or	r13, r27
    1f4c:	31 96       	adiw	r30, 0x01	; 1
    1f4e:	e0 32       	cpi	r30, 0x20	; 32
    1f50:	f1 05       	cpc	r31, r1
    1f52:	49 f0       	breq	.+18     	; 0x1f66 <__mulsf3+0x12a>
    1f54:	66 0c       	add	r6, r6
    1f56:	77 1c       	adc	r7, r7
    1f58:	88 1c       	adc	r8, r8
    1f5a:	99 1c       	adc	r9, r9
    1f5c:	56 94       	lsr	r5
    1f5e:	47 94       	ror	r4
    1f60:	37 94       	ror	r3
    1f62:	27 94       	ror	r2
    1f64:	c3 cf       	rjmp	.-122    	; 0x1eec <__mulsf3+0xb0>
    1f66:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f68:	ea 89       	ldd	r30, Y+18	; 0x12
    1f6a:	2b 89       	ldd	r18, Y+19	; 0x13
    1f6c:	3c 89       	ldd	r19, Y+20	; 0x14
    1f6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f70:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f72:	28 0f       	add	r18, r24
    1f74:	39 1f       	adc	r19, r25
    1f76:	2e 5f       	subi	r18, 0xFE	; 254
    1f78:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7a:	17 c0       	rjmp	.+46     	; 0x1faa <__mulsf3+0x16e>
    1f7c:	ca 01       	movw	r24, r20
    1f7e:	81 70       	andi	r24, 0x01	; 1
    1f80:	90 70       	andi	r25, 0x00	; 0
    1f82:	89 2b       	or	r24, r25
    1f84:	61 f0       	breq	.+24     	; 0x1f9e <__mulsf3+0x162>
    1f86:	16 95       	lsr	r17
    1f88:	07 95       	ror	r16
    1f8a:	f7 94       	ror	r15
    1f8c:	e7 94       	ror	r14
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	a0 e0       	ldi	r26, 0x00	; 0
    1f94:	b0 e8       	ldi	r27, 0x80	; 128
    1f96:	e8 2a       	or	r14, r24
    1f98:	f9 2a       	or	r15, r25
    1f9a:	0a 2b       	or	r16, r26
    1f9c:	1b 2b       	or	r17, r27
    1f9e:	76 95       	lsr	r23
    1fa0:	67 95       	ror	r22
    1fa2:	57 95       	ror	r21
    1fa4:	47 95       	ror	r20
    1fa6:	2f 5f       	subi	r18, 0xFF	; 255
    1fa8:	3f 4f       	sbci	r19, 0xFF	; 255
    1faa:	77 fd       	sbrc	r23, 7
    1fac:	e7 cf       	rjmp	.-50     	; 0x1f7c <__mulsf3+0x140>
    1fae:	0c c0       	rjmp	.+24     	; 0x1fc8 <__mulsf3+0x18c>
    1fb0:	44 0f       	add	r20, r20
    1fb2:	55 1f       	adc	r21, r21
    1fb4:	66 1f       	adc	r22, r22
    1fb6:	77 1f       	adc	r23, r23
    1fb8:	17 fd       	sbrc	r17, 7
    1fba:	41 60       	ori	r20, 0x01	; 1
    1fbc:	ee 0c       	add	r14, r14
    1fbe:	ff 1c       	adc	r15, r15
    1fc0:	00 1f       	adc	r16, r16
    1fc2:	11 1f       	adc	r17, r17
    1fc4:	21 50       	subi	r18, 0x01	; 1
    1fc6:	30 40       	sbci	r19, 0x00	; 0
    1fc8:	40 30       	cpi	r20, 0x00	; 0
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	59 07       	cpc	r21, r25
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	69 07       	cpc	r22, r25
    1fd2:	90 e4       	ldi	r25, 0x40	; 64
    1fd4:	79 07       	cpc	r23, r25
    1fd6:	60 f3       	brcs	.-40     	; 0x1fb0 <__mulsf3+0x174>
    1fd8:	2b 8f       	std	Y+27, r18	; 0x1b
    1fda:	3c 8f       	std	Y+28, r19	; 0x1c
    1fdc:	db 01       	movw	r26, r22
    1fde:	ca 01       	movw	r24, r20
    1fe0:	8f 77       	andi	r24, 0x7F	; 127
    1fe2:	90 70       	andi	r25, 0x00	; 0
    1fe4:	a0 70       	andi	r26, 0x00	; 0
    1fe6:	b0 70       	andi	r27, 0x00	; 0
    1fe8:	80 34       	cpi	r24, 0x40	; 64
    1fea:	91 05       	cpc	r25, r1
    1fec:	a1 05       	cpc	r26, r1
    1fee:	b1 05       	cpc	r27, r1
    1ff0:	61 f4       	brne	.+24     	; 0x200a <__mulsf3+0x1ce>
    1ff2:	47 fd       	sbrc	r20, 7
    1ff4:	0a c0       	rjmp	.+20     	; 0x200a <__mulsf3+0x1ce>
    1ff6:	e1 14       	cp	r14, r1
    1ff8:	f1 04       	cpc	r15, r1
    1ffa:	01 05       	cpc	r16, r1
    1ffc:	11 05       	cpc	r17, r1
    1ffe:	29 f0       	breq	.+10     	; 0x200a <__mulsf3+0x1ce>
    2000:	40 5c       	subi	r20, 0xC0	; 192
    2002:	5f 4f       	sbci	r21, 0xFF	; 255
    2004:	6f 4f       	sbci	r22, 0xFF	; 255
    2006:	7f 4f       	sbci	r23, 0xFF	; 255
    2008:	40 78       	andi	r20, 0x80	; 128
    200a:	1a 8e       	std	Y+26, r1	; 0x1a
    200c:	fe 17       	cp	r31, r30
    200e:	11 f0       	breq	.+4      	; 0x2014 <__mulsf3+0x1d8>
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	8a 8f       	std	Y+26, r24	; 0x1a
    2014:	4d 8f       	std	Y+29, r20	; 0x1d
    2016:	5e 8f       	std	Y+30, r21	; 0x1e
    2018:	6f 8f       	std	Y+31, r22	; 0x1f
    201a:	78 a3       	std	Y+32, r23	; 0x20
    201c:	83 e0       	ldi	r24, 0x03	; 3
    201e:	89 8f       	std	Y+25, r24	; 0x19
    2020:	ce 01       	movw	r24, r28
    2022:	49 96       	adiw	r24, 0x19	; 25
    2024:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__pack_f>
    2028:	a0 96       	adiw	r28, 0x20	; 32
    202a:	e2 e1       	ldi	r30, 0x12	; 18
    202c:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <__epilogue_restores__>

00002030 <__divsf3>:
    2030:	a8 e1       	ldi	r26, 0x18	; 24
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	ee e1       	ldi	r30, 0x1E	; 30
    2036:	f0 e1       	ldi	r31, 0x10	; 16
    2038:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__prologue_saves__+0x10>
    203c:	69 83       	std	Y+1, r22	; 0x01
    203e:	7a 83       	std	Y+2, r23	; 0x02
    2040:	8b 83       	std	Y+3, r24	; 0x03
    2042:	9c 83       	std	Y+4, r25	; 0x04
    2044:	2d 83       	std	Y+5, r18	; 0x05
    2046:	3e 83       	std	Y+6, r19	; 0x06
    2048:	4f 83       	std	Y+7, r20	; 0x07
    204a:	58 87       	std	Y+8, r21	; 0x08
    204c:	b9 e0       	ldi	r27, 0x09	; 9
    204e:	eb 2e       	mov	r14, r27
    2050:	f1 2c       	mov	r15, r1
    2052:	ec 0e       	add	r14, r28
    2054:	fd 1e       	adc	r15, r29
    2056:	ce 01       	movw	r24, r28
    2058:	01 96       	adiw	r24, 0x01	; 1
    205a:	b7 01       	movw	r22, r14
    205c:	0e 94 43 13 	call	0x2686	; 0x2686 <__unpack_f>
    2060:	8e 01       	movw	r16, r28
    2062:	0f 5e       	subi	r16, 0xEF	; 239
    2064:	1f 4f       	sbci	r17, 0xFF	; 255
    2066:	ce 01       	movw	r24, r28
    2068:	05 96       	adiw	r24, 0x05	; 5
    206a:	b8 01       	movw	r22, r16
    206c:	0e 94 43 13 	call	0x2686	; 0x2686 <__unpack_f>
    2070:	29 85       	ldd	r18, Y+9	; 0x09
    2072:	22 30       	cpi	r18, 0x02	; 2
    2074:	08 f4       	brcc	.+2      	; 0x2078 <__divsf3+0x48>
    2076:	7e c0       	rjmp	.+252    	; 0x2174 <__divsf3+0x144>
    2078:	39 89       	ldd	r19, Y+17	; 0x11
    207a:	32 30       	cpi	r19, 0x02	; 2
    207c:	10 f4       	brcc	.+4      	; 0x2082 <__divsf3+0x52>
    207e:	b8 01       	movw	r22, r16
    2080:	7c c0       	rjmp	.+248    	; 0x217a <__divsf3+0x14a>
    2082:	8a 85       	ldd	r24, Y+10	; 0x0a
    2084:	9a 89       	ldd	r25, Y+18	; 0x12
    2086:	89 27       	eor	r24, r25
    2088:	8a 87       	std	Y+10, r24	; 0x0a
    208a:	24 30       	cpi	r18, 0x04	; 4
    208c:	11 f0       	breq	.+4      	; 0x2092 <__divsf3+0x62>
    208e:	22 30       	cpi	r18, 0x02	; 2
    2090:	31 f4       	brne	.+12     	; 0x209e <__divsf3+0x6e>
    2092:	23 17       	cp	r18, r19
    2094:	09 f0       	breq	.+2      	; 0x2098 <__divsf3+0x68>
    2096:	6e c0       	rjmp	.+220    	; 0x2174 <__divsf3+0x144>
    2098:	69 e0       	ldi	r22, 0x09	; 9
    209a:	71 e0       	ldi	r23, 0x01	; 1
    209c:	6e c0       	rjmp	.+220    	; 0x217a <__divsf3+0x14a>
    209e:	34 30       	cpi	r19, 0x04	; 4
    20a0:	39 f4       	brne	.+14     	; 0x20b0 <__divsf3+0x80>
    20a2:	1d 86       	std	Y+13, r1	; 0x0d
    20a4:	1e 86       	std	Y+14, r1	; 0x0e
    20a6:	1f 86       	std	Y+15, r1	; 0x0f
    20a8:	18 8a       	std	Y+16, r1	; 0x10
    20aa:	1c 86       	std	Y+12, r1	; 0x0c
    20ac:	1b 86       	std	Y+11, r1	; 0x0b
    20ae:	04 c0       	rjmp	.+8      	; 0x20b8 <__divsf3+0x88>
    20b0:	32 30       	cpi	r19, 0x02	; 2
    20b2:	21 f4       	brne	.+8      	; 0x20bc <__divsf3+0x8c>
    20b4:	84 e0       	ldi	r24, 0x04	; 4
    20b6:	89 87       	std	Y+9, r24	; 0x09
    20b8:	b7 01       	movw	r22, r14
    20ba:	5f c0       	rjmp	.+190    	; 0x217a <__divsf3+0x14a>
    20bc:	2b 85       	ldd	r18, Y+11	; 0x0b
    20be:	3c 85       	ldd	r19, Y+12	; 0x0c
    20c0:	8b 89       	ldd	r24, Y+19	; 0x13
    20c2:	9c 89       	ldd	r25, Y+20	; 0x14
    20c4:	28 1b       	sub	r18, r24
    20c6:	39 0b       	sbc	r19, r25
    20c8:	3c 87       	std	Y+12, r19	; 0x0c
    20ca:	2b 87       	std	Y+11, r18	; 0x0b
    20cc:	ed 84       	ldd	r14, Y+13	; 0x0d
    20ce:	fe 84       	ldd	r15, Y+14	; 0x0e
    20d0:	0f 85       	ldd	r16, Y+15	; 0x0f
    20d2:	18 89       	ldd	r17, Y+16	; 0x10
    20d4:	ad 88       	ldd	r10, Y+21	; 0x15
    20d6:	be 88       	ldd	r11, Y+22	; 0x16
    20d8:	cf 88       	ldd	r12, Y+23	; 0x17
    20da:	d8 8c       	ldd	r13, Y+24	; 0x18
    20dc:	ea 14       	cp	r14, r10
    20de:	fb 04       	cpc	r15, r11
    20e0:	0c 05       	cpc	r16, r12
    20e2:	1d 05       	cpc	r17, r13
    20e4:	40 f4       	brcc	.+16     	; 0x20f6 <__divsf3+0xc6>
    20e6:	ee 0c       	add	r14, r14
    20e8:	ff 1c       	adc	r15, r15
    20ea:	00 1f       	adc	r16, r16
    20ec:	11 1f       	adc	r17, r17
    20ee:	21 50       	subi	r18, 0x01	; 1
    20f0:	30 40       	sbci	r19, 0x00	; 0
    20f2:	3c 87       	std	Y+12, r19	; 0x0c
    20f4:	2b 87       	std	Y+11, r18	; 0x0b
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e0       	ldi	r20, 0x00	; 0
    20fc:	50 e0       	ldi	r21, 0x00	; 0
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	a0 e0       	ldi	r26, 0x00	; 0
    2104:	b0 e4       	ldi	r27, 0x40	; 64
    2106:	60 e0       	ldi	r22, 0x00	; 0
    2108:	70 e0       	ldi	r23, 0x00	; 0
    210a:	ea 14       	cp	r14, r10
    210c:	fb 04       	cpc	r15, r11
    210e:	0c 05       	cpc	r16, r12
    2110:	1d 05       	cpc	r17, r13
    2112:	40 f0       	brcs	.+16     	; 0x2124 <__divsf3+0xf4>
    2114:	28 2b       	or	r18, r24
    2116:	39 2b       	or	r19, r25
    2118:	4a 2b       	or	r20, r26
    211a:	5b 2b       	or	r21, r27
    211c:	ea 18       	sub	r14, r10
    211e:	fb 08       	sbc	r15, r11
    2120:	0c 09       	sbc	r16, r12
    2122:	1d 09       	sbc	r17, r13
    2124:	b6 95       	lsr	r27
    2126:	a7 95       	ror	r26
    2128:	97 95       	ror	r25
    212a:	87 95       	ror	r24
    212c:	ee 0c       	add	r14, r14
    212e:	ff 1c       	adc	r15, r15
    2130:	00 1f       	adc	r16, r16
    2132:	11 1f       	adc	r17, r17
    2134:	6f 5f       	subi	r22, 0xFF	; 255
    2136:	7f 4f       	sbci	r23, 0xFF	; 255
    2138:	6f 31       	cpi	r22, 0x1F	; 31
    213a:	71 05       	cpc	r23, r1
    213c:	31 f7       	brne	.-52     	; 0x210a <__divsf3+0xda>
    213e:	da 01       	movw	r26, r20
    2140:	c9 01       	movw	r24, r18
    2142:	8f 77       	andi	r24, 0x7F	; 127
    2144:	90 70       	andi	r25, 0x00	; 0
    2146:	a0 70       	andi	r26, 0x00	; 0
    2148:	b0 70       	andi	r27, 0x00	; 0
    214a:	80 34       	cpi	r24, 0x40	; 64
    214c:	91 05       	cpc	r25, r1
    214e:	a1 05       	cpc	r26, r1
    2150:	b1 05       	cpc	r27, r1
    2152:	61 f4       	brne	.+24     	; 0x216c <__divsf3+0x13c>
    2154:	27 fd       	sbrc	r18, 7
    2156:	0a c0       	rjmp	.+20     	; 0x216c <__divsf3+0x13c>
    2158:	e1 14       	cp	r14, r1
    215a:	f1 04       	cpc	r15, r1
    215c:	01 05       	cpc	r16, r1
    215e:	11 05       	cpc	r17, r1
    2160:	29 f0       	breq	.+10     	; 0x216c <__divsf3+0x13c>
    2162:	20 5c       	subi	r18, 0xC0	; 192
    2164:	3f 4f       	sbci	r19, 0xFF	; 255
    2166:	4f 4f       	sbci	r20, 0xFF	; 255
    2168:	5f 4f       	sbci	r21, 0xFF	; 255
    216a:	20 78       	andi	r18, 0x80	; 128
    216c:	2d 87       	std	Y+13, r18	; 0x0d
    216e:	3e 87       	std	Y+14, r19	; 0x0e
    2170:	4f 87       	std	Y+15, r20	; 0x0f
    2172:	58 8b       	std	Y+16, r21	; 0x10
    2174:	be 01       	movw	r22, r28
    2176:	67 5f       	subi	r22, 0xF7	; 247
    2178:	7f 4f       	sbci	r23, 0xFF	; 255
    217a:	cb 01       	movw	r24, r22
    217c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__pack_f>
    2180:	68 96       	adiw	r28, 0x18	; 24
    2182:	ea e0       	ldi	r30, 0x0A	; 10
    2184:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__epilogue_restores__+0x10>

00002188 <__gesf2>:
    2188:	a8 e1       	ldi	r26, 0x18	; 24
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	ea ec       	ldi	r30, 0xCA	; 202
    218e:	f0 e1       	ldi	r31, 0x10	; 16
    2190:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__prologue_saves__+0x18>
    2194:	69 83       	std	Y+1, r22	; 0x01
    2196:	7a 83       	std	Y+2, r23	; 0x02
    2198:	8b 83       	std	Y+3, r24	; 0x03
    219a:	9c 83       	std	Y+4, r25	; 0x04
    219c:	2d 83       	std	Y+5, r18	; 0x05
    219e:	3e 83       	std	Y+6, r19	; 0x06
    21a0:	4f 83       	std	Y+7, r20	; 0x07
    21a2:	58 87       	std	Y+8, r21	; 0x08
    21a4:	89 e0       	ldi	r24, 0x09	; 9
    21a6:	e8 2e       	mov	r14, r24
    21a8:	f1 2c       	mov	r15, r1
    21aa:	ec 0e       	add	r14, r28
    21ac:	fd 1e       	adc	r15, r29
    21ae:	ce 01       	movw	r24, r28
    21b0:	01 96       	adiw	r24, 0x01	; 1
    21b2:	b7 01       	movw	r22, r14
    21b4:	0e 94 43 13 	call	0x2686	; 0x2686 <__unpack_f>
    21b8:	8e 01       	movw	r16, r28
    21ba:	0f 5e       	subi	r16, 0xEF	; 239
    21bc:	1f 4f       	sbci	r17, 0xFF	; 255
    21be:	ce 01       	movw	r24, r28
    21c0:	05 96       	adiw	r24, 0x05	; 5
    21c2:	b8 01       	movw	r22, r16
    21c4:	0e 94 43 13 	call	0x2686	; 0x2686 <__unpack_f>
    21c8:	89 85       	ldd	r24, Y+9	; 0x09
    21ca:	82 30       	cpi	r24, 0x02	; 2
    21cc:	40 f0       	brcs	.+16     	; 0x21de <__gesf2+0x56>
    21ce:	89 89       	ldd	r24, Y+17	; 0x11
    21d0:	82 30       	cpi	r24, 0x02	; 2
    21d2:	28 f0       	brcs	.+10     	; 0x21de <__gesf2+0x56>
    21d4:	c7 01       	movw	r24, r14
    21d6:	b8 01       	movw	r22, r16
    21d8:	0e 94 bb 13 	call	0x2776	; 0x2776 <__fpcmp_parts_f>
    21dc:	01 c0       	rjmp	.+2      	; 0x21e0 <__gesf2+0x58>
    21de:	8f ef       	ldi	r24, 0xFF	; 255
    21e0:	68 96       	adiw	r28, 0x18	; 24
    21e2:	e6 e0       	ldi	r30, 0x06	; 6
    21e4:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__epilogue_restores__+0x18>

000021e8 <__floatsisf>:
    21e8:	a8 e0       	ldi	r26, 0x08	; 8
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	ea ef       	ldi	r30, 0xFA	; 250
    21ee:	f0 e1       	ldi	r31, 0x10	; 16
    21f0:	0c 94 63 14 	jmp	0x28c6	; 0x28c6 <__prologue_saves__+0x12>
    21f4:	9b 01       	movw	r18, r22
    21f6:	ac 01       	movw	r20, r24
    21f8:	83 e0       	ldi	r24, 0x03	; 3
    21fa:	89 83       	std	Y+1, r24	; 0x01
    21fc:	da 01       	movw	r26, r20
    21fe:	c9 01       	movw	r24, r18
    2200:	88 27       	eor	r24, r24
    2202:	b7 fd       	sbrc	r27, 7
    2204:	83 95       	inc	r24
    2206:	99 27       	eor	r25, r25
    2208:	aa 27       	eor	r26, r26
    220a:	bb 27       	eor	r27, r27
    220c:	b8 2e       	mov	r11, r24
    220e:	21 15       	cp	r18, r1
    2210:	31 05       	cpc	r19, r1
    2212:	41 05       	cpc	r20, r1
    2214:	51 05       	cpc	r21, r1
    2216:	19 f4       	brne	.+6      	; 0x221e <__floatsisf+0x36>
    2218:	82 e0       	ldi	r24, 0x02	; 2
    221a:	89 83       	std	Y+1, r24	; 0x01
    221c:	3a c0       	rjmp	.+116    	; 0x2292 <__floatsisf+0xaa>
    221e:	88 23       	and	r24, r24
    2220:	a9 f0       	breq	.+42     	; 0x224c <__floatsisf+0x64>
    2222:	20 30       	cpi	r18, 0x00	; 0
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	38 07       	cpc	r19, r24
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	48 07       	cpc	r20, r24
    222c:	80 e8       	ldi	r24, 0x80	; 128
    222e:	58 07       	cpc	r21, r24
    2230:	29 f4       	brne	.+10     	; 0x223c <__floatsisf+0x54>
    2232:	60 e0       	ldi	r22, 0x00	; 0
    2234:	70 e0       	ldi	r23, 0x00	; 0
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	9f ec       	ldi	r25, 0xCF	; 207
    223a:	30 c0       	rjmp	.+96     	; 0x229c <__floatsisf+0xb4>
    223c:	ee 24       	eor	r14, r14
    223e:	ff 24       	eor	r15, r15
    2240:	87 01       	movw	r16, r14
    2242:	e2 1a       	sub	r14, r18
    2244:	f3 0a       	sbc	r15, r19
    2246:	04 0b       	sbc	r16, r20
    2248:	15 0b       	sbc	r17, r21
    224a:	02 c0       	rjmp	.+4      	; 0x2250 <__floatsisf+0x68>
    224c:	79 01       	movw	r14, r18
    224e:	8a 01       	movw	r16, r20
    2250:	8e e1       	ldi	r24, 0x1E	; 30
    2252:	c8 2e       	mov	r12, r24
    2254:	d1 2c       	mov	r13, r1
    2256:	dc 82       	std	Y+4, r13	; 0x04
    2258:	cb 82       	std	Y+3, r12	; 0x03
    225a:	ed 82       	std	Y+5, r14	; 0x05
    225c:	fe 82       	std	Y+6, r15	; 0x06
    225e:	0f 83       	std	Y+7, r16	; 0x07
    2260:	18 87       	std	Y+8, r17	; 0x08
    2262:	c8 01       	movw	r24, r16
    2264:	b7 01       	movw	r22, r14
    2266:	0e 94 1f 12 	call	0x243e	; 0x243e <__clzsi2>
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	18 16       	cp	r1, r24
    226e:	19 06       	cpc	r1, r25
    2270:	84 f4       	brge	.+32     	; 0x2292 <__floatsisf+0xaa>
    2272:	08 2e       	mov	r0, r24
    2274:	04 c0       	rjmp	.+8      	; 0x227e <__floatsisf+0x96>
    2276:	ee 0c       	add	r14, r14
    2278:	ff 1c       	adc	r15, r15
    227a:	00 1f       	adc	r16, r16
    227c:	11 1f       	adc	r17, r17
    227e:	0a 94       	dec	r0
    2280:	d2 f7       	brpl	.-12     	; 0x2276 <__floatsisf+0x8e>
    2282:	ed 82       	std	Y+5, r14	; 0x05
    2284:	fe 82       	std	Y+6, r15	; 0x06
    2286:	0f 83       	std	Y+7, r16	; 0x07
    2288:	18 87       	std	Y+8, r17	; 0x08
    228a:	c8 1a       	sub	r12, r24
    228c:	d9 0a       	sbc	r13, r25
    228e:	dc 82       	std	Y+4, r13	; 0x04
    2290:	cb 82       	std	Y+3, r12	; 0x03
    2292:	ba 82       	std	Y+2, r11	; 0x02
    2294:	ce 01       	movw	r24, r28
    2296:	01 96       	adiw	r24, 0x01	; 1
    2298:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__pack_f>
    229c:	28 96       	adiw	r28, 0x08	; 8
    229e:	e9 e0       	ldi	r30, 0x09	; 9
    22a0:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <__epilogue_restores__+0x12>

000022a4 <__fixsfsi>:
    22a4:	ac e0       	ldi	r26, 0x0C	; 12
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	e8 e5       	ldi	r30, 0x58	; 88
    22aa:	f1 e1       	ldi	r31, 0x11	; 17
    22ac:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__prologue_saves__+0x20>
    22b0:	69 83       	std	Y+1, r22	; 0x01
    22b2:	7a 83       	std	Y+2, r23	; 0x02
    22b4:	8b 83       	std	Y+3, r24	; 0x03
    22b6:	9c 83       	std	Y+4, r25	; 0x04
    22b8:	ce 01       	movw	r24, r28
    22ba:	01 96       	adiw	r24, 0x01	; 1
    22bc:	be 01       	movw	r22, r28
    22be:	6b 5f       	subi	r22, 0xFB	; 251
    22c0:	7f 4f       	sbci	r23, 0xFF	; 255
    22c2:	0e 94 43 13 	call	0x2686	; 0x2686 <__unpack_f>
    22c6:	8d 81       	ldd	r24, Y+5	; 0x05
    22c8:	82 30       	cpi	r24, 0x02	; 2
    22ca:	61 f1       	breq	.+88     	; 0x2324 <__fixsfsi+0x80>
    22cc:	82 30       	cpi	r24, 0x02	; 2
    22ce:	50 f1       	brcs	.+84     	; 0x2324 <__fixsfsi+0x80>
    22d0:	84 30       	cpi	r24, 0x04	; 4
    22d2:	21 f4       	brne	.+8      	; 0x22dc <__fixsfsi+0x38>
    22d4:	8e 81       	ldd	r24, Y+6	; 0x06
    22d6:	88 23       	and	r24, r24
    22d8:	51 f1       	breq	.+84     	; 0x232e <__fixsfsi+0x8a>
    22da:	2e c0       	rjmp	.+92     	; 0x2338 <__fixsfsi+0x94>
    22dc:	2f 81       	ldd	r18, Y+7	; 0x07
    22de:	38 85       	ldd	r19, Y+8	; 0x08
    22e0:	37 fd       	sbrc	r19, 7
    22e2:	20 c0       	rjmp	.+64     	; 0x2324 <__fixsfsi+0x80>
    22e4:	6e 81       	ldd	r22, Y+6	; 0x06
    22e6:	2f 31       	cpi	r18, 0x1F	; 31
    22e8:	31 05       	cpc	r19, r1
    22ea:	1c f0       	brlt	.+6      	; 0x22f2 <__fixsfsi+0x4e>
    22ec:	66 23       	and	r22, r22
    22ee:	f9 f0       	breq	.+62     	; 0x232e <__fixsfsi+0x8a>
    22f0:	23 c0       	rjmp	.+70     	; 0x2338 <__fixsfsi+0x94>
    22f2:	8e e1       	ldi	r24, 0x1E	; 30
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	82 1b       	sub	r24, r18
    22f8:	93 0b       	sbc	r25, r19
    22fa:	29 85       	ldd	r18, Y+9	; 0x09
    22fc:	3a 85       	ldd	r19, Y+10	; 0x0a
    22fe:	4b 85       	ldd	r20, Y+11	; 0x0b
    2300:	5c 85       	ldd	r21, Y+12	; 0x0c
    2302:	04 c0       	rjmp	.+8      	; 0x230c <__fixsfsi+0x68>
    2304:	56 95       	lsr	r21
    2306:	47 95       	ror	r20
    2308:	37 95       	ror	r19
    230a:	27 95       	ror	r18
    230c:	8a 95       	dec	r24
    230e:	d2 f7       	brpl	.-12     	; 0x2304 <__fixsfsi+0x60>
    2310:	66 23       	and	r22, r22
    2312:	b1 f0       	breq	.+44     	; 0x2340 <__fixsfsi+0x9c>
    2314:	50 95       	com	r21
    2316:	40 95       	com	r20
    2318:	30 95       	com	r19
    231a:	21 95       	neg	r18
    231c:	3f 4f       	sbci	r19, 0xFF	; 255
    231e:	4f 4f       	sbci	r20, 0xFF	; 255
    2320:	5f 4f       	sbci	r21, 0xFF	; 255
    2322:	0e c0       	rjmp	.+28     	; 0x2340 <__fixsfsi+0x9c>
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	40 e0       	ldi	r20, 0x00	; 0
    232a:	50 e0       	ldi	r21, 0x00	; 0
    232c:	09 c0       	rjmp	.+18     	; 0x2340 <__fixsfsi+0x9c>
    232e:	2f ef       	ldi	r18, 0xFF	; 255
    2330:	3f ef       	ldi	r19, 0xFF	; 255
    2332:	4f ef       	ldi	r20, 0xFF	; 255
    2334:	5f e7       	ldi	r21, 0x7F	; 127
    2336:	04 c0       	rjmp	.+8      	; 0x2340 <__fixsfsi+0x9c>
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e0       	ldi	r20, 0x00	; 0
    233e:	50 e8       	ldi	r21, 0x80	; 128
    2340:	b9 01       	movw	r22, r18
    2342:	ca 01       	movw	r24, r20
    2344:	2c 96       	adiw	r28, 0x0c	; 12
    2346:	e2 e0       	ldi	r30, 0x02	; 2
    2348:	0c 94 86 14 	jmp	0x290c	; 0x290c <__epilogue_restores__+0x20>

0000234c <__floatunsisf>:
    234c:	a8 e0       	ldi	r26, 0x08	; 8
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	ec ea       	ldi	r30, 0xAC	; 172
    2352:	f1 e1       	ldi	r31, 0x11	; 17
    2354:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__prologue_saves__+0x10>
    2358:	7b 01       	movw	r14, r22
    235a:	8c 01       	movw	r16, r24
    235c:	61 15       	cp	r22, r1
    235e:	71 05       	cpc	r23, r1
    2360:	81 05       	cpc	r24, r1
    2362:	91 05       	cpc	r25, r1
    2364:	19 f4       	brne	.+6      	; 0x236c <__floatunsisf+0x20>
    2366:	82 e0       	ldi	r24, 0x02	; 2
    2368:	89 83       	std	Y+1, r24	; 0x01
    236a:	60 c0       	rjmp	.+192    	; 0x242c <__floatunsisf+0xe0>
    236c:	83 e0       	ldi	r24, 0x03	; 3
    236e:	89 83       	std	Y+1, r24	; 0x01
    2370:	8e e1       	ldi	r24, 0x1E	; 30
    2372:	c8 2e       	mov	r12, r24
    2374:	d1 2c       	mov	r13, r1
    2376:	dc 82       	std	Y+4, r13	; 0x04
    2378:	cb 82       	std	Y+3, r12	; 0x03
    237a:	ed 82       	std	Y+5, r14	; 0x05
    237c:	fe 82       	std	Y+6, r15	; 0x06
    237e:	0f 83       	std	Y+7, r16	; 0x07
    2380:	18 87       	std	Y+8, r17	; 0x08
    2382:	c8 01       	movw	r24, r16
    2384:	b7 01       	movw	r22, r14
    2386:	0e 94 1f 12 	call	0x243e	; 0x243e <__clzsi2>
    238a:	fc 01       	movw	r30, r24
    238c:	31 97       	sbiw	r30, 0x01	; 1
    238e:	f7 ff       	sbrs	r31, 7
    2390:	3b c0       	rjmp	.+118    	; 0x2408 <__floatunsisf+0xbc>
    2392:	22 27       	eor	r18, r18
    2394:	33 27       	eor	r19, r19
    2396:	2e 1b       	sub	r18, r30
    2398:	3f 0b       	sbc	r19, r31
    239a:	57 01       	movw	r10, r14
    239c:	68 01       	movw	r12, r16
    239e:	02 2e       	mov	r0, r18
    23a0:	04 c0       	rjmp	.+8      	; 0x23aa <__floatunsisf+0x5e>
    23a2:	d6 94       	lsr	r13
    23a4:	c7 94       	ror	r12
    23a6:	b7 94       	ror	r11
    23a8:	a7 94       	ror	r10
    23aa:	0a 94       	dec	r0
    23ac:	d2 f7       	brpl	.-12     	; 0x23a2 <__floatunsisf+0x56>
    23ae:	40 e0       	ldi	r20, 0x00	; 0
    23b0:	50 e0       	ldi	r21, 0x00	; 0
    23b2:	60 e0       	ldi	r22, 0x00	; 0
    23b4:	70 e0       	ldi	r23, 0x00	; 0
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	a0 e0       	ldi	r26, 0x00	; 0
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	04 c0       	rjmp	.+8      	; 0x23c8 <__floatunsisf+0x7c>
    23c0:	88 0f       	add	r24, r24
    23c2:	99 1f       	adc	r25, r25
    23c4:	aa 1f       	adc	r26, r26
    23c6:	bb 1f       	adc	r27, r27
    23c8:	2a 95       	dec	r18
    23ca:	d2 f7       	brpl	.-12     	; 0x23c0 <__floatunsisf+0x74>
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	a1 09       	sbc	r26, r1
    23d0:	b1 09       	sbc	r27, r1
    23d2:	8e 21       	and	r24, r14
    23d4:	9f 21       	and	r25, r15
    23d6:	a0 23       	and	r26, r16
    23d8:	b1 23       	and	r27, r17
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	a1 05       	cpc	r26, r1
    23de:	b1 05       	cpc	r27, r1
    23e0:	21 f0       	breq	.+8      	; 0x23ea <__floatunsisf+0x9e>
    23e2:	41 e0       	ldi	r20, 0x01	; 1
    23e4:	50 e0       	ldi	r21, 0x00	; 0
    23e6:	60 e0       	ldi	r22, 0x00	; 0
    23e8:	70 e0       	ldi	r23, 0x00	; 0
    23ea:	4a 29       	or	r20, r10
    23ec:	5b 29       	or	r21, r11
    23ee:	6c 29       	or	r22, r12
    23f0:	7d 29       	or	r23, r13
    23f2:	4d 83       	std	Y+5, r20	; 0x05
    23f4:	5e 83       	std	Y+6, r21	; 0x06
    23f6:	6f 83       	std	Y+7, r22	; 0x07
    23f8:	78 87       	std	Y+8, r23	; 0x08
    23fa:	8e e1       	ldi	r24, 0x1E	; 30
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	8e 1b       	sub	r24, r30
    2400:	9f 0b       	sbc	r25, r31
    2402:	9c 83       	std	Y+4, r25	; 0x04
    2404:	8b 83       	std	Y+3, r24	; 0x03
    2406:	12 c0       	rjmp	.+36     	; 0x242c <__floatunsisf+0xe0>
    2408:	30 97       	sbiw	r30, 0x00	; 0
    240a:	81 f0       	breq	.+32     	; 0x242c <__floatunsisf+0xe0>
    240c:	0e 2e       	mov	r0, r30
    240e:	04 c0       	rjmp	.+8      	; 0x2418 <__floatunsisf+0xcc>
    2410:	ee 0c       	add	r14, r14
    2412:	ff 1c       	adc	r15, r15
    2414:	00 1f       	adc	r16, r16
    2416:	11 1f       	adc	r17, r17
    2418:	0a 94       	dec	r0
    241a:	d2 f7       	brpl	.-12     	; 0x2410 <__floatunsisf+0xc4>
    241c:	ed 82       	std	Y+5, r14	; 0x05
    241e:	fe 82       	std	Y+6, r15	; 0x06
    2420:	0f 83       	std	Y+7, r16	; 0x07
    2422:	18 87       	std	Y+8, r17	; 0x08
    2424:	ce 1a       	sub	r12, r30
    2426:	df 0a       	sbc	r13, r31
    2428:	dc 82       	std	Y+4, r13	; 0x04
    242a:	cb 82       	std	Y+3, r12	; 0x03
    242c:	1a 82       	std	Y+2, r1	; 0x02
    242e:	ce 01       	movw	r24, r28
    2430:	01 96       	adiw	r24, 0x01	; 1
    2432:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__pack_f>
    2436:	28 96       	adiw	r28, 0x08	; 8
    2438:	ea e0       	ldi	r30, 0x0A	; 10
    243a:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__epilogue_restores__+0x10>

0000243e <__clzsi2>:
    243e:	ef 92       	push	r14
    2440:	ff 92       	push	r15
    2442:	0f 93       	push	r16
    2444:	1f 93       	push	r17
    2446:	7b 01       	movw	r14, r22
    2448:	8c 01       	movw	r16, r24
    244a:	80 e0       	ldi	r24, 0x00	; 0
    244c:	e8 16       	cp	r14, r24
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	f8 06       	cpc	r15, r24
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	08 07       	cpc	r16, r24
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	18 07       	cpc	r17, r24
    245a:	88 f4       	brcc	.+34     	; 0x247e <__clzsi2+0x40>
    245c:	8f ef       	ldi	r24, 0xFF	; 255
    245e:	e8 16       	cp	r14, r24
    2460:	f1 04       	cpc	r15, r1
    2462:	01 05       	cpc	r16, r1
    2464:	11 05       	cpc	r17, r1
    2466:	31 f0       	breq	.+12     	; 0x2474 <__clzsi2+0x36>
    2468:	28 f0       	brcs	.+10     	; 0x2474 <__clzsi2+0x36>
    246a:	88 e0       	ldi	r24, 0x08	; 8
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	a0 e0       	ldi	r26, 0x00	; 0
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	17 c0       	rjmp	.+46     	; 0x24a2 <__clzsi2+0x64>
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	a0 e0       	ldi	r26, 0x00	; 0
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	12 c0       	rjmp	.+36     	; 0x24a2 <__clzsi2+0x64>
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	e8 16       	cp	r14, r24
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	f8 06       	cpc	r15, r24
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	08 07       	cpc	r16, r24
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	18 07       	cpc	r17, r24
    248e:	28 f0       	brcs	.+10     	; 0x249a <__clzsi2+0x5c>
    2490:	88 e1       	ldi	r24, 0x18	; 24
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	a0 e0       	ldi	r26, 0x00	; 0
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	04 c0       	rjmp	.+8      	; 0x24a2 <__clzsi2+0x64>
    249a:	80 e1       	ldi	r24, 0x10	; 16
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	a0 e0       	ldi	r26, 0x00	; 0
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	20 e2       	ldi	r18, 0x20	; 32
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	40 e0       	ldi	r20, 0x00	; 0
    24a8:	50 e0       	ldi	r21, 0x00	; 0
    24aa:	28 1b       	sub	r18, r24
    24ac:	39 0b       	sbc	r19, r25
    24ae:	4a 0b       	sbc	r20, r26
    24b0:	5b 0b       	sbc	r21, r27
    24b2:	04 c0       	rjmp	.+8      	; 0x24bc <__clzsi2+0x7e>
    24b4:	16 95       	lsr	r17
    24b6:	07 95       	ror	r16
    24b8:	f7 94       	ror	r15
    24ba:	e7 94       	ror	r14
    24bc:	8a 95       	dec	r24
    24be:	d2 f7       	brpl	.-12     	; 0x24b4 <__clzsi2+0x76>
    24c0:	f7 01       	movw	r30, r14
    24c2:	ef 5e       	subi	r30, 0xEF	; 239
    24c4:	fe 4f       	sbci	r31, 0xFE	; 254
    24c6:	80 81       	ld	r24, Z
    24c8:	28 1b       	sub	r18, r24
    24ca:	31 09       	sbc	r19, r1
    24cc:	41 09       	sbc	r20, r1
    24ce:	51 09       	sbc	r21, r1
    24d0:	c9 01       	movw	r24, r18
    24d2:	1f 91       	pop	r17
    24d4:	0f 91       	pop	r16
    24d6:	ff 90       	pop	r15
    24d8:	ef 90       	pop	r14
    24da:	08 95       	ret

000024dc <__pack_f>:
    24dc:	df 92       	push	r13
    24de:	ef 92       	push	r14
    24e0:	ff 92       	push	r15
    24e2:	0f 93       	push	r16
    24e4:	1f 93       	push	r17
    24e6:	fc 01       	movw	r30, r24
    24e8:	e4 80       	ldd	r14, Z+4	; 0x04
    24ea:	f5 80       	ldd	r15, Z+5	; 0x05
    24ec:	06 81       	ldd	r16, Z+6	; 0x06
    24ee:	17 81       	ldd	r17, Z+7	; 0x07
    24f0:	d1 80       	ldd	r13, Z+1	; 0x01
    24f2:	80 81       	ld	r24, Z
    24f4:	82 30       	cpi	r24, 0x02	; 2
    24f6:	48 f4       	brcc	.+18     	; 0x250a <__pack_f+0x2e>
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	a0 e1       	ldi	r26, 0x10	; 16
    24fe:	b0 e0       	ldi	r27, 0x00	; 0
    2500:	e8 2a       	or	r14, r24
    2502:	f9 2a       	or	r15, r25
    2504:	0a 2b       	or	r16, r26
    2506:	1b 2b       	or	r17, r27
    2508:	a5 c0       	rjmp	.+330    	; 0x2654 <__pack_f+0x178>
    250a:	84 30       	cpi	r24, 0x04	; 4
    250c:	09 f4       	brne	.+2      	; 0x2510 <__pack_f+0x34>
    250e:	9f c0       	rjmp	.+318    	; 0x264e <__pack_f+0x172>
    2510:	82 30       	cpi	r24, 0x02	; 2
    2512:	21 f4       	brne	.+8      	; 0x251c <__pack_f+0x40>
    2514:	ee 24       	eor	r14, r14
    2516:	ff 24       	eor	r15, r15
    2518:	87 01       	movw	r16, r14
    251a:	05 c0       	rjmp	.+10     	; 0x2526 <__pack_f+0x4a>
    251c:	e1 14       	cp	r14, r1
    251e:	f1 04       	cpc	r15, r1
    2520:	01 05       	cpc	r16, r1
    2522:	11 05       	cpc	r17, r1
    2524:	19 f4       	brne	.+6      	; 0x252c <__pack_f+0x50>
    2526:	e0 e0       	ldi	r30, 0x00	; 0
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	96 c0       	rjmp	.+300    	; 0x2658 <__pack_f+0x17c>
    252c:	62 81       	ldd	r22, Z+2	; 0x02
    252e:	73 81       	ldd	r23, Z+3	; 0x03
    2530:	9f ef       	ldi	r25, 0xFF	; 255
    2532:	62 38       	cpi	r22, 0x82	; 130
    2534:	79 07       	cpc	r23, r25
    2536:	0c f0       	brlt	.+2      	; 0x253a <__pack_f+0x5e>
    2538:	5b c0       	rjmp	.+182    	; 0x25f0 <__pack_f+0x114>
    253a:	22 e8       	ldi	r18, 0x82	; 130
    253c:	3f ef       	ldi	r19, 0xFF	; 255
    253e:	26 1b       	sub	r18, r22
    2540:	37 0b       	sbc	r19, r23
    2542:	2a 31       	cpi	r18, 0x1A	; 26
    2544:	31 05       	cpc	r19, r1
    2546:	2c f0       	brlt	.+10     	; 0x2552 <__pack_f+0x76>
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	40 e0       	ldi	r20, 0x00	; 0
    254e:	50 e0       	ldi	r21, 0x00	; 0
    2550:	2a c0       	rjmp	.+84     	; 0x25a6 <__pack_f+0xca>
    2552:	b8 01       	movw	r22, r16
    2554:	a7 01       	movw	r20, r14
    2556:	02 2e       	mov	r0, r18
    2558:	04 c0       	rjmp	.+8      	; 0x2562 <__pack_f+0x86>
    255a:	76 95       	lsr	r23
    255c:	67 95       	ror	r22
    255e:	57 95       	ror	r21
    2560:	47 95       	ror	r20
    2562:	0a 94       	dec	r0
    2564:	d2 f7       	brpl	.-12     	; 0x255a <__pack_f+0x7e>
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	a0 e0       	ldi	r26, 0x00	; 0
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	04 c0       	rjmp	.+8      	; 0x2578 <__pack_f+0x9c>
    2570:	88 0f       	add	r24, r24
    2572:	99 1f       	adc	r25, r25
    2574:	aa 1f       	adc	r26, r26
    2576:	bb 1f       	adc	r27, r27
    2578:	2a 95       	dec	r18
    257a:	d2 f7       	brpl	.-12     	; 0x2570 <__pack_f+0x94>
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	a1 09       	sbc	r26, r1
    2580:	b1 09       	sbc	r27, r1
    2582:	8e 21       	and	r24, r14
    2584:	9f 21       	and	r25, r15
    2586:	a0 23       	and	r26, r16
    2588:	b1 23       	and	r27, r17
    258a:	00 97       	sbiw	r24, 0x00	; 0
    258c:	a1 05       	cpc	r26, r1
    258e:	b1 05       	cpc	r27, r1
    2590:	21 f0       	breq	.+8      	; 0x259a <__pack_f+0xbe>
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	a0 e0       	ldi	r26, 0x00	; 0
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	9a 01       	movw	r18, r20
    259c:	ab 01       	movw	r20, r22
    259e:	28 2b       	or	r18, r24
    25a0:	39 2b       	or	r19, r25
    25a2:	4a 2b       	or	r20, r26
    25a4:	5b 2b       	or	r21, r27
    25a6:	da 01       	movw	r26, r20
    25a8:	c9 01       	movw	r24, r18
    25aa:	8f 77       	andi	r24, 0x7F	; 127
    25ac:	90 70       	andi	r25, 0x00	; 0
    25ae:	a0 70       	andi	r26, 0x00	; 0
    25b0:	b0 70       	andi	r27, 0x00	; 0
    25b2:	80 34       	cpi	r24, 0x40	; 64
    25b4:	91 05       	cpc	r25, r1
    25b6:	a1 05       	cpc	r26, r1
    25b8:	b1 05       	cpc	r27, r1
    25ba:	39 f4       	brne	.+14     	; 0x25ca <__pack_f+0xee>
    25bc:	27 ff       	sbrs	r18, 7
    25be:	09 c0       	rjmp	.+18     	; 0x25d2 <__pack_f+0xf6>
    25c0:	20 5c       	subi	r18, 0xC0	; 192
    25c2:	3f 4f       	sbci	r19, 0xFF	; 255
    25c4:	4f 4f       	sbci	r20, 0xFF	; 255
    25c6:	5f 4f       	sbci	r21, 0xFF	; 255
    25c8:	04 c0       	rjmp	.+8      	; 0x25d2 <__pack_f+0xf6>
    25ca:	21 5c       	subi	r18, 0xC1	; 193
    25cc:	3f 4f       	sbci	r19, 0xFF	; 255
    25ce:	4f 4f       	sbci	r20, 0xFF	; 255
    25d0:	5f 4f       	sbci	r21, 0xFF	; 255
    25d2:	e0 e0       	ldi	r30, 0x00	; 0
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	20 30       	cpi	r18, 0x00	; 0
    25d8:	a0 e0       	ldi	r26, 0x00	; 0
    25da:	3a 07       	cpc	r19, r26
    25dc:	a0 e0       	ldi	r26, 0x00	; 0
    25de:	4a 07       	cpc	r20, r26
    25e0:	a0 e4       	ldi	r26, 0x40	; 64
    25e2:	5a 07       	cpc	r21, r26
    25e4:	10 f0       	brcs	.+4      	; 0x25ea <__pack_f+0x10e>
    25e6:	e1 e0       	ldi	r30, 0x01	; 1
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	79 01       	movw	r14, r18
    25ec:	8a 01       	movw	r16, r20
    25ee:	27 c0       	rjmp	.+78     	; 0x263e <__pack_f+0x162>
    25f0:	60 38       	cpi	r22, 0x80	; 128
    25f2:	71 05       	cpc	r23, r1
    25f4:	64 f5       	brge	.+88     	; 0x264e <__pack_f+0x172>
    25f6:	fb 01       	movw	r30, r22
    25f8:	e1 58       	subi	r30, 0x81	; 129
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	d8 01       	movw	r26, r16
    25fe:	c7 01       	movw	r24, r14
    2600:	8f 77       	andi	r24, 0x7F	; 127
    2602:	90 70       	andi	r25, 0x00	; 0
    2604:	a0 70       	andi	r26, 0x00	; 0
    2606:	b0 70       	andi	r27, 0x00	; 0
    2608:	80 34       	cpi	r24, 0x40	; 64
    260a:	91 05       	cpc	r25, r1
    260c:	a1 05       	cpc	r26, r1
    260e:	b1 05       	cpc	r27, r1
    2610:	39 f4       	brne	.+14     	; 0x2620 <__pack_f+0x144>
    2612:	e7 fe       	sbrs	r14, 7
    2614:	0d c0       	rjmp	.+26     	; 0x2630 <__pack_f+0x154>
    2616:	80 e4       	ldi	r24, 0x40	; 64
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	a0 e0       	ldi	r26, 0x00	; 0
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	04 c0       	rjmp	.+8      	; 0x2628 <__pack_f+0x14c>
    2620:	8f e3       	ldi	r24, 0x3F	; 63
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	a0 e0       	ldi	r26, 0x00	; 0
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	e8 0e       	add	r14, r24
    262a:	f9 1e       	adc	r15, r25
    262c:	0a 1f       	adc	r16, r26
    262e:	1b 1f       	adc	r17, r27
    2630:	17 ff       	sbrs	r17, 7
    2632:	05 c0       	rjmp	.+10     	; 0x263e <__pack_f+0x162>
    2634:	16 95       	lsr	r17
    2636:	07 95       	ror	r16
    2638:	f7 94       	ror	r15
    263a:	e7 94       	ror	r14
    263c:	31 96       	adiw	r30, 0x01	; 1
    263e:	87 e0       	ldi	r24, 0x07	; 7
    2640:	16 95       	lsr	r17
    2642:	07 95       	ror	r16
    2644:	f7 94       	ror	r15
    2646:	e7 94       	ror	r14
    2648:	8a 95       	dec	r24
    264a:	d1 f7       	brne	.-12     	; 0x2640 <__pack_f+0x164>
    264c:	05 c0       	rjmp	.+10     	; 0x2658 <__pack_f+0x17c>
    264e:	ee 24       	eor	r14, r14
    2650:	ff 24       	eor	r15, r15
    2652:	87 01       	movw	r16, r14
    2654:	ef ef       	ldi	r30, 0xFF	; 255
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	6e 2f       	mov	r22, r30
    265a:	67 95       	ror	r22
    265c:	66 27       	eor	r22, r22
    265e:	67 95       	ror	r22
    2660:	90 2f       	mov	r25, r16
    2662:	9f 77       	andi	r25, 0x7F	; 127
    2664:	d7 94       	ror	r13
    2666:	dd 24       	eor	r13, r13
    2668:	d7 94       	ror	r13
    266a:	8e 2f       	mov	r24, r30
    266c:	86 95       	lsr	r24
    266e:	49 2f       	mov	r20, r25
    2670:	46 2b       	or	r20, r22
    2672:	58 2f       	mov	r21, r24
    2674:	5d 29       	or	r21, r13
    2676:	b7 01       	movw	r22, r14
    2678:	ca 01       	movw	r24, r20
    267a:	1f 91       	pop	r17
    267c:	0f 91       	pop	r16
    267e:	ff 90       	pop	r15
    2680:	ef 90       	pop	r14
    2682:	df 90       	pop	r13
    2684:	08 95       	ret

00002686 <__unpack_f>:
    2686:	fc 01       	movw	r30, r24
    2688:	db 01       	movw	r26, r22
    268a:	40 81       	ld	r20, Z
    268c:	51 81       	ldd	r21, Z+1	; 0x01
    268e:	22 81       	ldd	r18, Z+2	; 0x02
    2690:	62 2f       	mov	r22, r18
    2692:	6f 77       	andi	r22, 0x7F	; 127
    2694:	70 e0       	ldi	r23, 0x00	; 0
    2696:	22 1f       	adc	r18, r18
    2698:	22 27       	eor	r18, r18
    269a:	22 1f       	adc	r18, r18
    269c:	93 81       	ldd	r25, Z+3	; 0x03
    269e:	89 2f       	mov	r24, r25
    26a0:	88 0f       	add	r24, r24
    26a2:	82 2b       	or	r24, r18
    26a4:	28 2f       	mov	r18, r24
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	99 1f       	adc	r25, r25
    26aa:	99 27       	eor	r25, r25
    26ac:	99 1f       	adc	r25, r25
    26ae:	11 96       	adiw	r26, 0x01	; 1
    26b0:	9c 93       	st	X, r25
    26b2:	11 97       	sbiw	r26, 0x01	; 1
    26b4:	21 15       	cp	r18, r1
    26b6:	31 05       	cpc	r19, r1
    26b8:	a9 f5       	brne	.+106    	; 0x2724 <__unpack_f+0x9e>
    26ba:	41 15       	cp	r20, r1
    26bc:	51 05       	cpc	r21, r1
    26be:	61 05       	cpc	r22, r1
    26c0:	71 05       	cpc	r23, r1
    26c2:	11 f4       	brne	.+4      	; 0x26c8 <__unpack_f+0x42>
    26c4:	82 e0       	ldi	r24, 0x02	; 2
    26c6:	37 c0       	rjmp	.+110    	; 0x2736 <__unpack_f+0xb0>
    26c8:	82 e8       	ldi	r24, 0x82	; 130
    26ca:	9f ef       	ldi	r25, 0xFF	; 255
    26cc:	13 96       	adiw	r26, 0x03	; 3
    26ce:	9c 93       	st	X, r25
    26d0:	8e 93       	st	-X, r24
    26d2:	12 97       	sbiw	r26, 0x02	; 2
    26d4:	9a 01       	movw	r18, r20
    26d6:	ab 01       	movw	r20, r22
    26d8:	67 e0       	ldi	r22, 0x07	; 7
    26da:	22 0f       	add	r18, r18
    26dc:	33 1f       	adc	r19, r19
    26de:	44 1f       	adc	r20, r20
    26e0:	55 1f       	adc	r21, r21
    26e2:	6a 95       	dec	r22
    26e4:	d1 f7       	brne	.-12     	; 0x26da <__unpack_f+0x54>
    26e6:	83 e0       	ldi	r24, 0x03	; 3
    26e8:	8c 93       	st	X, r24
    26ea:	0d c0       	rjmp	.+26     	; 0x2706 <__unpack_f+0x80>
    26ec:	22 0f       	add	r18, r18
    26ee:	33 1f       	adc	r19, r19
    26f0:	44 1f       	adc	r20, r20
    26f2:	55 1f       	adc	r21, r21
    26f4:	12 96       	adiw	r26, 0x02	; 2
    26f6:	8d 91       	ld	r24, X+
    26f8:	9c 91       	ld	r25, X
    26fa:	13 97       	sbiw	r26, 0x03	; 3
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	13 96       	adiw	r26, 0x03	; 3
    2700:	9c 93       	st	X, r25
    2702:	8e 93       	st	-X, r24
    2704:	12 97       	sbiw	r26, 0x02	; 2
    2706:	20 30       	cpi	r18, 0x00	; 0
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	38 07       	cpc	r19, r24
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	48 07       	cpc	r20, r24
    2710:	80 e4       	ldi	r24, 0x40	; 64
    2712:	58 07       	cpc	r21, r24
    2714:	58 f3       	brcs	.-42     	; 0x26ec <__unpack_f+0x66>
    2716:	14 96       	adiw	r26, 0x04	; 4
    2718:	2d 93       	st	X+, r18
    271a:	3d 93       	st	X+, r19
    271c:	4d 93       	st	X+, r20
    271e:	5c 93       	st	X, r21
    2720:	17 97       	sbiw	r26, 0x07	; 7
    2722:	08 95       	ret
    2724:	2f 3f       	cpi	r18, 0xFF	; 255
    2726:	31 05       	cpc	r19, r1
    2728:	79 f4       	brne	.+30     	; 0x2748 <__unpack_f+0xc2>
    272a:	41 15       	cp	r20, r1
    272c:	51 05       	cpc	r21, r1
    272e:	61 05       	cpc	r22, r1
    2730:	71 05       	cpc	r23, r1
    2732:	19 f4       	brne	.+6      	; 0x273a <__unpack_f+0xb4>
    2734:	84 e0       	ldi	r24, 0x04	; 4
    2736:	8c 93       	st	X, r24
    2738:	08 95       	ret
    273a:	64 ff       	sbrs	r22, 4
    273c:	03 c0       	rjmp	.+6      	; 0x2744 <__unpack_f+0xbe>
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	8c 93       	st	X, r24
    2742:	12 c0       	rjmp	.+36     	; 0x2768 <__unpack_f+0xe2>
    2744:	1c 92       	st	X, r1
    2746:	10 c0       	rjmp	.+32     	; 0x2768 <__unpack_f+0xe2>
    2748:	2f 57       	subi	r18, 0x7F	; 127
    274a:	30 40       	sbci	r19, 0x00	; 0
    274c:	13 96       	adiw	r26, 0x03	; 3
    274e:	3c 93       	st	X, r19
    2750:	2e 93       	st	-X, r18
    2752:	12 97       	sbiw	r26, 0x02	; 2
    2754:	83 e0       	ldi	r24, 0x03	; 3
    2756:	8c 93       	st	X, r24
    2758:	87 e0       	ldi	r24, 0x07	; 7
    275a:	44 0f       	add	r20, r20
    275c:	55 1f       	adc	r21, r21
    275e:	66 1f       	adc	r22, r22
    2760:	77 1f       	adc	r23, r23
    2762:	8a 95       	dec	r24
    2764:	d1 f7       	brne	.-12     	; 0x275a <__unpack_f+0xd4>
    2766:	70 64       	ori	r23, 0x40	; 64
    2768:	14 96       	adiw	r26, 0x04	; 4
    276a:	4d 93       	st	X+, r20
    276c:	5d 93       	st	X+, r21
    276e:	6d 93       	st	X+, r22
    2770:	7c 93       	st	X, r23
    2772:	17 97       	sbiw	r26, 0x07	; 7
    2774:	08 95       	ret

00002776 <__fpcmp_parts_f>:
    2776:	1f 93       	push	r17
    2778:	dc 01       	movw	r26, r24
    277a:	fb 01       	movw	r30, r22
    277c:	9c 91       	ld	r25, X
    277e:	92 30       	cpi	r25, 0x02	; 2
    2780:	08 f4       	brcc	.+2      	; 0x2784 <__fpcmp_parts_f+0xe>
    2782:	47 c0       	rjmp	.+142    	; 0x2812 <__fpcmp_parts_f+0x9c>
    2784:	80 81       	ld	r24, Z
    2786:	82 30       	cpi	r24, 0x02	; 2
    2788:	08 f4       	brcc	.+2      	; 0x278c <__fpcmp_parts_f+0x16>
    278a:	43 c0       	rjmp	.+134    	; 0x2812 <__fpcmp_parts_f+0x9c>
    278c:	94 30       	cpi	r25, 0x04	; 4
    278e:	51 f4       	brne	.+20     	; 0x27a4 <__fpcmp_parts_f+0x2e>
    2790:	11 96       	adiw	r26, 0x01	; 1
    2792:	1c 91       	ld	r17, X
    2794:	84 30       	cpi	r24, 0x04	; 4
    2796:	99 f5       	brne	.+102    	; 0x27fe <__fpcmp_parts_f+0x88>
    2798:	81 81       	ldd	r24, Z+1	; 0x01
    279a:	68 2f       	mov	r22, r24
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	61 1b       	sub	r22, r17
    27a0:	71 09       	sbc	r23, r1
    27a2:	3f c0       	rjmp	.+126    	; 0x2822 <__fpcmp_parts_f+0xac>
    27a4:	84 30       	cpi	r24, 0x04	; 4
    27a6:	21 f0       	breq	.+8      	; 0x27b0 <__fpcmp_parts_f+0x3a>
    27a8:	92 30       	cpi	r25, 0x02	; 2
    27aa:	31 f4       	brne	.+12     	; 0x27b8 <__fpcmp_parts_f+0x42>
    27ac:	82 30       	cpi	r24, 0x02	; 2
    27ae:	b9 f1       	breq	.+110    	; 0x281e <__fpcmp_parts_f+0xa8>
    27b0:	81 81       	ldd	r24, Z+1	; 0x01
    27b2:	88 23       	and	r24, r24
    27b4:	89 f1       	breq	.+98     	; 0x2818 <__fpcmp_parts_f+0xa2>
    27b6:	2d c0       	rjmp	.+90     	; 0x2812 <__fpcmp_parts_f+0x9c>
    27b8:	11 96       	adiw	r26, 0x01	; 1
    27ba:	1c 91       	ld	r17, X
    27bc:	11 97       	sbiw	r26, 0x01	; 1
    27be:	82 30       	cpi	r24, 0x02	; 2
    27c0:	f1 f0       	breq	.+60     	; 0x27fe <__fpcmp_parts_f+0x88>
    27c2:	81 81       	ldd	r24, Z+1	; 0x01
    27c4:	18 17       	cp	r17, r24
    27c6:	d9 f4       	brne	.+54     	; 0x27fe <__fpcmp_parts_f+0x88>
    27c8:	12 96       	adiw	r26, 0x02	; 2
    27ca:	2d 91       	ld	r18, X+
    27cc:	3c 91       	ld	r19, X
    27ce:	13 97       	sbiw	r26, 0x03	; 3
    27d0:	82 81       	ldd	r24, Z+2	; 0x02
    27d2:	93 81       	ldd	r25, Z+3	; 0x03
    27d4:	82 17       	cp	r24, r18
    27d6:	93 07       	cpc	r25, r19
    27d8:	94 f0       	brlt	.+36     	; 0x27fe <__fpcmp_parts_f+0x88>
    27da:	28 17       	cp	r18, r24
    27dc:	39 07       	cpc	r19, r25
    27de:	bc f0       	brlt	.+46     	; 0x280e <__fpcmp_parts_f+0x98>
    27e0:	14 96       	adiw	r26, 0x04	; 4
    27e2:	8d 91       	ld	r24, X+
    27e4:	9d 91       	ld	r25, X+
    27e6:	0d 90       	ld	r0, X+
    27e8:	bc 91       	ld	r27, X
    27ea:	a0 2d       	mov	r26, r0
    27ec:	24 81       	ldd	r18, Z+4	; 0x04
    27ee:	35 81       	ldd	r19, Z+5	; 0x05
    27f0:	46 81       	ldd	r20, Z+6	; 0x06
    27f2:	57 81       	ldd	r21, Z+7	; 0x07
    27f4:	28 17       	cp	r18, r24
    27f6:	39 07       	cpc	r19, r25
    27f8:	4a 07       	cpc	r20, r26
    27fa:	5b 07       	cpc	r21, r27
    27fc:	18 f4       	brcc	.+6      	; 0x2804 <__fpcmp_parts_f+0x8e>
    27fe:	11 23       	and	r17, r17
    2800:	41 f0       	breq	.+16     	; 0x2812 <__fpcmp_parts_f+0x9c>
    2802:	0a c0       	rjmp	.+20     	; 0x2818 <__fpcmp_parts_f+0xa2>
    2804:	82 17       	cp	r24, r18
    2806:	93 07       	cpc	r25, r19
    2808:	a4 07       	cpc	r26, r20
    280a:	b5 07       	cpc	r27, r21
    280c:	40 f4       	brcc	.+16     	; 0x281e <__fpcmp_parts_f+0xa8>
    280e:	11 23       	and	r17, r17
    2810:	19 f0       	breq	.+6      	; 0x2818 <__fpcmp_parts_f+0xa2>
    2812:	61 e0       	ldi	r22, 0x01	; 1
    2814:	70 e0       	ldi	r23, 0x00	; 0
    2816:	05 c0       	rjmp	.+10     	; 0x2822 <__fpcmp_parts_f+0xac>
    2818:	6f ef       	ldi	r22, 0xFF	; 255
    281a:	7f ef       	ldi	r23, 0xFF	; 255
    281c:	02 c0       	rjmp	.+4      	; 0x2822 <__fpcmp_parts_f+0xac>
    281e:	60 e0       	ldi	r22, 0x00	; 0
    2820:	70 e0       	ldi	r23, 0x00	; 0
    2822:	cb 01       	movw	r24, r22
    2824:	1f 91       	pop	r17
    2826:	08 95       	ret

00002828 <__mulsi3>:
    2828:	62 9f       	mul	r22, r18
    282a:	d0 01       	movw	r26, r0
    282c:	73 9f       	mul	r23, r19
    282e:	f0 01       	movw	r30, r0
    2830:	82 9f       	mul	r24, r18
    2832:	e0 0d       	add	r30, r0
    2834:	f1 1d       	adc	r31, r1
    2836:	64 9f       	mul	r22, r20
    2838:	e0 0d       	add	r30, r0
    283a:	f1 1d       	adc	r31, r1
    283c:	92 9f       	mul	r25, r18
    283e:	f0 0d       	add	r31, r0
    2840:	83 9f       	mul	r24, r19
    2842:	f0 0d       	add	r31, r0
    2844:	74 9f       	mul	r23, r20
    2846:	f0 0d       	add	r31, r0
    2848:	65 9f       	mul	r22, r21
    284a:	f0 0d       	add	r31, r0
    284c:	99 27       	eor	r25, r25
    284e:	72 9f       	mul	r23, r18
    2850:	b0 0d       	add	r27, r0
    2852:	e1 1d       	adc	r30, r1
    2854:	f9 1f       	adc	r31, r25
    2856:	63 9f       	mul	r22, r19
    2858:	b0 0d       	add	r27, r0
    285a:	e1 1d       	adc	r30, r1
    285c:	f9 1f       	adc	r31, r25
    285e:	bd 01       	movw	r22, r26
    2860:	cf 01       	movw	r24, r30
    2862:	11 24       	eor	r1, r1
    2864:	08 95       	ret

00002866 <__divmodhi4>:
    2866:	97 fb       	bst	r25, 7
    2868:	09 2e       	mov	r0, r25
    286a:	07 26       	eor	r0, r23
    286c:	0a d0       	rcall	.+20     	; 0x2882 <__divmodhi4_neg1>
    286e:	77 fd       	sbrc	r23, 7
    2870:	04 d0       	rcall	.+8      	; 0x287a <__divmodhi4_neg2>
    2872:	0c d0       	rcall	.+24     	; 0x288c <__udivmodhi4>
    2874:	06 d0       	rcall	.+12     	; 0x2882 <__divmodhi4_neg1>
    2876:	00 20       	and	r0, r0
    2878:	1a f4       	brpl	.+6      	; 0x2880 <__divmodhi4_exit>

0000287a <__divmodhi4_neg2>:
    287a:	70 95       	com	r23
    287c:	61 95       	neg	r22
    287e:	7f 4f       	sbci	r23, 0xFF	; 255

00002880 <__divmodhi4_exit>:
    2880:	08 95       	ret

00002882 <__divmodhi4_neg1>:
    2882:	f6 f7       	brtc	.-4      	; 0x2880 <__divmodhi4_exit>
    2884:	90 95       	com	r25
    2886:	81 95       	neg	r24
    2888:	9f 4f       	sbci	r25, 0xFF	; 255
    288a:	08 95       	ret

0000288c <__udivmodhi4>:
    288c:	aa 1b       	sub	r26, r26
    288e:	bb 1b       	sub	r27, r27
    2890:	51 e1       	ldi	r21, 0x11	; 17
    2892:	07 c0       	rjmp	.+14     	; 0x28a2 <__udivmodhi4_ep>

00002894 <__udivmodhi4_loop>:
    2894:	aa 1f       	adc	r26, r26
    2896:	bb 1f       	adc	r27, r27
    2898:	a6 17       	cp	r26, r22
    289a:	b7 07       	cpc	r27, r23
    289c:	10 f0       	brcs	.+4      	; 0x28a2 <__udivmodhi4_ep>
    289e:	a6 1b       	sub	r26, r22
    28a0:	b7 0b       	sbc	r27, r23

000028a2 <__udivmodhi4_ep>:
    28a2:	88 1f       	adc	r24, r24
    28a4:	99 1f       	adc	r25, r25
    28a6:	5a 95       	dec	r21
    28a8:	a9 f7       	brne	.-22     	; 0x2894 <__udivmodhi4_loop>
    28aa:	80 95       	com	r24
    28ac:	90 95       	com	r25
    28ae:	bc 01       	movw	r22, r24
    28b0:	cd 01       	movw	r24, r26
    28b2:	08 95       	ret

000028b4 <__prologue_saves__>:
    28b4:	2f 92       	push	r2
    28b6:	3f 92       	push	r3
    28b8:	4f 92       	push	r4
    28ba:	5f 92       	push	r5
    28bc:	6f 92       	push	r6
    28be:	7f 92       	push	r7
    28c0:	8f 92       	push	r8
    28c2:	9f 92       	push	r9
    28c4:	af 92       	push	r10
    28c6:	bf 92       	push	r11
    28c8:	cf 92       	push	r12
    28ca:	df 92       	push	r13
    28cc:	ef 92       	push	r14
    28ce:	ff 92       	push	r15
    28d0:	0f 93       	push	r16
    28d2:	1f 93       	push	r17
    28d4:	cf 93       	push	r28
    28d6:	df 93       	push	r29
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
    28dc:	ca 1b       	sub	r28, r26
    28de:	db 0b       	sbc	r29, r27
    28e0:	0f b6       	in	r0, 0x3f	; 63
    28e2:	f8 94       	cli
    28e4:	de bf       	out	0x3e, r29	; 62
    28e6:	0f be       	out	0x3f, r0	; 63
    28e8:	cd bf       	out	0x3d, r28	; 61
    28ea:	09 94       	ijmp

000028ec <__epilogue_restores__>:
    28ec:	2a 88       	ldd	r2, Y+18	; 0x12
    28ee:	39 88       	ldd	r3, Y+17	; 0x11
    28f0:	48 88       	ldd	r4, Y+16	; 0x10
    28f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    28f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    28f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    28f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    28fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    28fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    28fe:	b9 84       	ldd	r11, Y+9	; 0x09
    2900:	c8 84       	ldd	r12, Y+8	; 0x08
    2902:	df 80       	ldd	r13, Y+7	; 0x07
    2904:	ee 80       	ldd	r14, Y+6	; 0x06
    2906:	fd 80       	ldd	r15, Y+5	; 0x05
    2908:	0c 81       	ldd	r16, Y+4	; 0x04
    290a:	1b 81       	ldd	r17, Y+3	; 0x03
    290c:	aa 81       	ldd	r26, Y+2	; 0x02
    290e:	b9 81       	ldd	r27, Y+1	; 0x01
    2910:	ce 0f       	add	r28, r30
    2912:	d1 1d       	adc	r29, r1
    2914:	0f b6       	in	r0, 0x3f	; 63
    2916:	f8 94       	cli
    2918:	de bf       	out	0x3e, r29	; 62
    291a:	0f be       	out	0x3f, r0	; 63
    291c:	cd bf       	out	0x3d, r28	; 61
    291e:	ed 01       	movw	r28, r26
    2920:	08 95       	ret

00002922 <do_rand>:
    2922:	a0 e0       	ldi	r26, 0x00	; 0
    2924:	b0 e0       	ldi	r27, 0x00	; 0
    2926:	e7 e9       	ldi	r30, 0x97	; 151
    2928:	f4 e1       	ldi	r31, 0x14	; 20
    292a:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__prologue_saves__+0x10>
    292e:	ec 01       	movw	r28, r24
    2930:	a8 80       	ld	r10, Y
    2932:	b9 80       	ldd	r11, Y+1	; 0x01
    2934:	ca 80       	ldd	r12, Y+2	; 0x02
    2936:	db 80       	ldd	r13, Y+3	; 0x03
    2938:	a1 14       	cp	r10, r1
    293a:	b1 04       	cpc	r11, r1
    293c:	c1 04       	cpc	r12, r1
    293e:	d1 04       	cpc	r13, r1
    2940:	41 f4       	brne	.+16     	; 0x2952 <do_rand+0x30>
    2942:	84 e2       	ldi	r24, 0x24	; 36
    2944:	a8 2e       	mov	r10, r24
    2946:	89 ed       	ldi	r24, 0xD9	; 217
    2948:	b8 2e       	mov	r11, r24
    294a:	8b e5       	ldi	r24, 0x5B	; 91
    294c:	c8 2e       	mov	r12, r24
    294e:	87 e0       	ldi	r24, 0x07	; 7
    2950:	d8 2e       	mov	r13, r24
    2952:	c6 01       	movw	r24, r12
    2954:	b5 01       	movw	r22, r10
    2956:	2d e1       	ldi	r18, 0x1D	; 29
    2958:	33 ef       	ldi	r19, 0xF3	; 243
    295a:	41 e0       	ldi	r20, 0x01	; 1
    295c:	50 e0       	ldi	r21, 0x00	; 0
    295e:	0e 94 08 15 	call	0x2a10	; 0x2a10 <__divmodsi4>
    2962:	27 ea       	ldi	r18, 0xA7	; 167
    2964:	31 e4       	ldi	r19, 0x41	; 65
    2966:	40 e0       	ldi	r20, 0x00	; 0
    2968:	50 e0       	ldi	r21, 0x00	; 0
    296a:	0e 94 14 14 	call	0x2828	; 0x2828 <__mulsi3>
    296e:	7b 01       	movw	r14, r22
    2970:	8c 01       	movw	r16, r24
    2972:	c6 01       	movw	r24, r12
    2974:	b5 01       	movw	r22, r10
    2976:	2d e1       	ldi	r18, 0x1D	; 29
    2978:	33 ef       	ldi	r19, 0xF3	; 243
    297a:	41 e0       	ldi	r20, 0x01	; 1
    297c:	50 e0       	ldi	r21, 0x00	; 0
    297e:	0e 94 08 15 	call	0x2a10	; 0x2a10 <__divmodsi4>
    2982:	ca 01       	movw	r24, r20
    2984:	b9 01       	movw	r22, r18
    2986:	2c ee       	ldi	r18, 0xEC	; 236
    2988:	34 ef       	ldi	r19, 0xF4	; 244
    298a:	4f ef       	ldi	r20, 0xFF	; 255
    298c:	5f ef       	ldi	r21, 0xFF	; 255
    298e:	0e 94 14 14 	call	0x2828	; 0x2828 <__mulsi3>
    2992:	6e 0d       	add	r22, r14
    2994:	7f 1d       	adc	r23, r15
    2996:	80 1f       	adc	r24, r16
    2998:	91 1f       	adc	r25, r17
    299a:	97 ff       	sbrs	r25, 7
    299c:	04 c0       	rjmp	.+8      	; 0x29a6 <do_rand+0x84>
    299e:	61 50       	subi	r22, 0x01	; 1
    29a0:	70 40       	sbci	r23, 0x00	; 0
    29a2:	80 40       	sbci	r24, 0x00	; 0
    29a4:	90 48       	sbci	r25, 0x80	; 128
    29a6:	68 83       	st	Y, r22
    29a8:	79 83       	std	Y+1, r23	; 0x01
    29aa:	8a 83       	std	Y+2, r24	; 0x02
    29ac:	9b 83       	std	Y+3, r25	; 0x03
    29ae:	9b 01       	movw	r18, r22
    29b0:	3f 77       	andi	r19, 0x7F	; 127
    29b2:	c9 01       	movw	r24, r18
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62
    29b8:	ea e0       	ldi	r30, 0x0A	; 10
    29ba:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__epilogue_restores__+0x10>

000029be <rand_r>:
    29be:	0e 94 91 14 	call	0x2922	; 0x2922 <do_rand>
    29c2:	08 95       	ret

000029c4 <rand>:
    29c4:	81 e1       	ldi	r24, 0x11	; 17
    29c6:	92 e0       	ldi	r25, 0x02	; 2
    29c8:	0e 94 91 14 	call	0x2922	; 0x2922 <do_rand>
    29cc:	08 95       	ret

000029ce <srand>:
    29ce:	a0 e0       	ldi	r26, 0x00	; 0
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	80 93 11 02 	sts	0x0211, r24
    29d6:	90 93 12 02 	sts	0x0212, r25
    29da:	a0 93 13 02 	sts	0x0213, r26
    29de:	b0 93 14 02 	sts	0x0214, r27
    29e2:	08 95       	ret

000029e4 <__eerd_byte_m328p>:
    29e4:	f9 99       	sbic	0x1f, 1	; 31
    29e6:	fe cf       	rjmp	.-4      	; 0x29e4 <__eerd_byte_m328p>
    29e8:	92 bd       	out	0x22, r25	; 34
    29ea:	81 bd       	out	0x21, r24	; 33
    29ec:	f8 9a       	sbi	0x1f, 0	; 31
    29ee:	99 27       	eor	r25, r25
    29f0:	80 b5       	in	r24, 0x20	; 32
    29f2:	08 95       	ret

000029f4 <__eewr_byte_m328p>:
    29f4:	26 2f       	mov	r18, r22

000029f6 <__eewr_r18_m328p>:
    29f6:	f9 99       	sbic	0x1f, 1	; 31
    29f8:	fe cf       	rjmp	.-4      	; 0x29f6 <__eewr_r18_m328p>
    29fa:	1f ba       	out	0x1f, r1	; 31
    29fc:	92 bd       	out	0x22, r25	; 34
    29fe:	81 bd       	out	0x21, r24	; 33
    2a00:	20 bd       	out	0x20, r18	; 32
    2a02:	0f b6       	in	r0, 0x3f	; 63
    2a04:	f8 94       	cli
    2a06:	fa 9a       	sbi	0x1f, 2	; 31
    2a08:	f9 9a       	sbi	0x1f, 1	; 31
    2a0a:	0f be       	out	0x3f, r0	; 63
    2a0c:	01 96       	adiw	r24, 0x01	; 1
    2a0e:	08 95       	ret

00002a10 <__divmodsi4>:
    2a10:	97 fb       	bst	r25, 7
    2a12:	09 2e       	mov	r0, r25
    2a14:	05 26       	eor	r0, r21
    2a16:	0e d0       	rcall	.+28     	; 0x2a34 <__divmodsi4_neg1>
    2a18:	57 fd       	sbrc	r21, 7
    2a1a:	04 d0       	rcall	.+8      	; 0x2a24 <__divmodsi4_neg2>
    2a1c:	14 d0       	rcall	.+40     	; 0x2a46 <__udivmodsi4>
    2a1e:	0a d0       	rcall	.+20     	; 0x2a34 <__divmodsi4_neg1>
    2a20:	00 1c       	adc	r0, r0
    2a22:	38 f4       	brcc	.+14     	; 0x2a32 <__divmodsi4_exit>

00002a24 <__divmodsi4_neg2>:
    2a24:	50 95       	com	r21
    2a26:	40 95       	com	r20
    2a28:	30 95       	com	r19
    2a2a:	21 95       	neg	r18
    2a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a2e:	4f 4f       	sbci	r20, 0xFF	; 255
    2a30:	5f 4f       	sbci	r21, 0xFF	; 255

00002a32 <__divmodsi4_exit>:
    2a32:	08 95       	ret

00002a34 <__divmodsi4_neg1>:
    2a34:	f6 f7       	brtc	.-4      	; 0x2a32 <__divmodsi4_exit>
    2a36:	90 95       	com	r25
    2a38:	80 95       	com	r24
    2a3a:	70 95       	com	r23
    2a3c:	61 95       	neg	r22
    2a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a40:	8f 4f       	sbci	r24, 0xFF	; 255
    2a42:	9f 4f       	sbci	r25, 0xFF	; 255
    2a44:	08 95       	ret

00002a46 <__udivmodsi4>:
    2a46:	a1 e2       	ldi	r26, 0x21	; 33
    2a48:	1a 2e       	mov	r1, r26
    2a4a:	aa 1b       	sub	r26, r26
    2a4c:	bb 1b       	sub	r27, r27
    2a4e:	fd 01       	movw	r30, r26
    2a50:	0d c0       	rjmp	.+26     	; 0x2a6c <__udivmodsi4_ep>

00002a52 <__udivmodsi4_loop>:
    2a52:	aa 1f       	adc	r26, r26
    2a54:	bb 1f       	adc	r27, r27
    2a56:	ee 1f       	adc	r30, r30
    2a58:	ff 1f       	adc	r31, r31
    2a5a:	a2 17       	cp	r26, r18
    2a5c:	b3 07       	cpc	r27, r19
    2a5e:	e4 07       	cpc	r30, r20
    2a60:	f5 07       	cpc	r31, r21
    2a62:	20 f0       	brcs	.+8      	; 0x2a6c <__udivmodsi4_ep>
    2a64:	a2 1b       	sub	r26, r18
    2a66:	b3 0b       	sbc	r27, r19
    2a68:	e4 0b       	sbc	r30, r20
    2a6a:	f5 0b       	sbc	r31, r21

00002a6c <__udivmodsi4_ep>:
    2a6c:	66 1f       	adc	r22, r22
    2a6e:	77 1f       	adc	r23, r23
    2a70:	88 1f       	adc	r24, r24
    2a72:	99 1f       	adc	r25, r25
    2a74:	1a 94       	dec	r1
    2a76:	69 f7       	brne	.-38     	; 0x2a52 <__udivmodsi4_loop>
    2a78:	60 95       	com	r22
    2a7a:	70 95       	com	r23
    2a7c:	80 95       	com	r24
    2a7e:	90 95       	com	r25
    2a80:	9b 01       	movw	r18, r22
    2a82:	ac 01       	movw	r20, r24
    2a84:	bd 01       	movw	r22, r26
    2a86:	cf 01       	movw	r24, r30
    2a88:	08 95       	ret

00002a8a <_exit>:
    2a8a:	f8 94       	cli

00002a8c <__stop_program>:
    2a8c:	ff cf       	rjmp	.-2      	; 0x2a8c <__stop_program>

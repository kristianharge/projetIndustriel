
build/blank.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	cc 01       	movw	r24, r24
      6a:	48 02       	muls	r20, r24
      6c:	a0 01       	movw	r20, r0
      6e:	97 01       	movw	r18, r14
      70:	9d 01       	movw	r18, r26
      72:	2a 02       	muls	r18, r26
      74:	1f 02       	muls	r17, r31
      76:	e4 08       	sbc	r14, r4
      78:	07 08       	sbc	r0, r7
      7a:	07 08       	sbc	r0, r7
      7c:	e1 08       	sbc	r14, r1
      7e:	ed 08       	sbc	r14, r13
      80:	dd 08       	sbc	r13, r13
      82:	f4 08       	sbc	r15, r4
      84:	f0 08       	sbc	r15, r0
      86:	f8 08       	sbc	r15, r8
      88:	b0 08       	sbc	r11, r0
      8a:	82 08       	sbc	r8, r2

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e4 e9       	ldi	r30, 0x94	; 148
      b8:	fa e1       	ldi	r31, 0x1A	; 26
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	af 36       	cpi	r26, 0x6F	; 111
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 2a 0a 	call	0x1454	; 0x1454 <main>
      da:	0c 94 48 0d 	jmp	0x1a90	; 0x1a90 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:
#include "kilolib.h"

void setup() {
      e2:	08 95       	ret

000000e4 <loop>:
    // put your setup code here, will be run once at the beginning
}

void loop() {
	//test of getting a message direction
	if(get_direction() == NORTH)
      e4:	0e 94 c6 03 	call	0x78c	; 0x78c <get_direction>
      e8:	81 11       	cpse	r24, r1
      ea:	08 95       	ret
		set_color(RGB(1,0,0));
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	0c 94 04 07 	jmp	0xe08	; 0xe08 <set_color>

000000f2 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
      f2:	08 95       	ret

000000f4 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	08 95       	ret

000000fa <message_tx_success_dummy>:
void message_tx_success_dummy() {}
      fa:	08 95       	ret

000000fc <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
      fc:	df 92       	push	r13
      fe:	ef 92       	push	r14
     100:	ff 92       	push	r15
     102:	0f 93       	push	r16
     104:	1f 93       	push	r17
     106:	cf 93       	push	r28
     108:	df 93       	push	r29
    cli();
     10a:	f8 94       	cli

    ports_off();
     10c:	14 b8       	out	0x04, r1	; 4
     10e:	17 b8       	out	0x07, r1	; 7
     110:	1a b8       	out	0x0a, r1	; 10
     112:	15 b8       	out	0x05, r1	; 5
     114:	18 b8       	out	0x08, r1	; 8
     116:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     118:	52 9a       	sbi	0x0a, 2	; 10
     11a:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     11c:	14 bc       	out	0x24, r1	; 36
     11e:	85 e0       	ldi	r24, 0x05	; 5
     120:	85 bd       	out	0x25, r24	; 37
     122:	8f ef       	ldi	r24, 0xFF	; 255
     124:	87 bd       	out	0x27, r24	; 39
     126:	82 e0       	ldi	r24, 0x02	; 2
     128:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     12c:	10 92 80 00 	sts	0x0080, r1
     130:	10 92 81 00 	sts	0x0081, r1
     134:	2f e8       	ldi	r18, 0x8F	; 143
     136:	3b e0       	ldi	r19, 0x0B	; 11
     138:	30 93 89 00 	sts	0x0089, r19
     13c:	20 93 88 00 	sts	0x0088, r18
     140:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     144:	53 98       	cbi	0x0a, 3	; 10
     146:	23 98       	cbi	0x04, 3	; 4
     148:	91 ea       	ldi	r25, 0xA1	; 161
     14a:	90 93 b0 00 	sts	0x00B0, r25
     14e:	80 93 b1 00 	sts	0x00B1, r24
     152:	10 92 b4 00 	sts	0x00B4, r1
     156:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     15a:	8b e0       	ldi	r24, 0x0B	; 11
     15c:	80 bf       	out	0x30, r24	; 48
     15e:	83 e0       	ldi	r24, 0x03	; 3
     160:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     164:	86 e0       	ldi	r24, 0x06	; 6
     166:	80 93 7c 00 	sts	0x007C, r24
     16a:	83 e8       	ldi	r24, 0x83	; 131
     16c:	80 93 7a 00 	sts	0x007A, r24
     170:	80 91 7a 00 	lds	r24, 0x007A
     174:	80 64       	ori	r24, 0x40	; 64
     176:	80 93 7a 00 	sts	0x007A, r24
     17a:	80 91 7a 00 	lds	r24, 0x007A
     17e:	86 fd       	sbrc	r24, 6
     180:	fc cf       	rjmp	.-8      	; 0x17a <kilo_init+0x7e>
    adc_trigger_high_gain();
     182:	10 92 7c 00 	sts	0x007C, r1
     186:	83 ea       	ldi	r24, 0xA3	; 163
     188:	80 93 7a 00 	sts	0x007A, r24
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 de 0c 	call	0x19bc	; 0x19bc <eeprom_read_byte>
    if (osccal != 0xFF)
     19a:	8f 3f       	cpi	r24, 0xFF	; 255
     19c:	11 f0       	breq	.+4      	; 0x1a2 <kilo_init+0xa6>
        OSCCAL = osccal;
     19e:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     1a2:	10 92 37 01 	sts	0x0137, r1
    rx_leadingbit = 1;
     1a6:	c1 e0       	ldi	r28, 0x01	; 1
     1a8:	c0 93 10 01 	sts	0x0110, r28
    rx_leadingbyte = 1;
     1ac:	c0 93 54 01 	sts	0x0154, r28
    rx_byteindex = 0;
     1b0:	10 92 2e 01 	sts	0x012E, r1
    rx_bytevalue = 0;
     1b4:	10 92 68 01 	sts	0x0168, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     1b8:	80 e9       	ldi	r24, 0x90	; 144
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	0e 94 de 0c 	call	0x19bc	; 0x19bc <eeprom_read_byte>
     1c0:	80 93 2d 01 	sts	0x012D, r24
    if (tx_mask & ~TX_MASK_MAX)
     1c4:	80 91 2d 01 	lds	r24, 0x012D
     1c8:	88 73       	andi	r24, 0x38	; 56
     1ca:	11 f0       	breq	.+4      	; 0x1d0 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     1cc:	c0 93 2d 01 	sts	0x012D, r28
    tx_clock = 0;
     1d0:	10 92 58 01 	sts	0x0158, r1
     1d4:	10 92 57 01 	sts	0x0157, r1
    tx_increment = 255;
     1d8:	8f ef       	ldi	r24, 0xFF	; 255
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	90 93 56 01 	sts	0x0156, r25
     1e0:	80 93 55 01 	sts	0x0155, r24
    kilo_ticks = 0;
     1e4:	10 92 33 01 	sts	0x0133, r1
     1e8:	10 92 34 01 	sts	0x0134, r1
     1ec:	10 92 35 01 	sts	0x0135, r1
     1f0:	10 92 36 01 	sts	0x0136, r1
    kilo_state = IDLE;
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	80 93 0f 01 	sts	0x010F, r24
    kilo_tx_period = 3906;
     1fa:	82 e4       	ldi	r24, 0x42	; 66
     1fc:	9f e0       	ldi	r25, 0x0F	; 15
     1fe:	90 93 67 01 	sts	0x0167, r25
     202:	80 93 66 01 	sts	0x0166, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     206:	80 eb       	ldi	r24, 0xB0	; 176
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 de 0c 	call	0x19bc	; 0x19bc <eeprom_read_byte>
     20e:	c8 2f       	mov	r28, r24
     210:	81 eb       	ldi	r24, 0xB1	; 177
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 de 0c 	call	0x19bc	; 0x19bc <eeprom_read_byte>
     218:	2c 2f       	mov	r18, r28
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	38 2b       	or	r19, r24
     21e:	30 93 6a 01 	sts	0x016A, r19
     222:	20 93 69 01 	sts	0x0169, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     226:	85 e0       	ldi	r24, 0x05	; 5
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 de 0c 	call	0x19bc	; 0x19bc <eeprom_read_byte>
     22e:	80 93 6e 01 	sts	0x016E, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     232:	89 e0       	ldi	r24, 0x09	; 9
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 de 0c 	call	0x19bc	; 0x19bc <eeprom_read_byte>
     23a:	80 93 59 01 	sts	0x0159, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     23e:	8c e0       	ldi	r24, 0x0C	; 12
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0e 94 de 0c 	call	0x19bc	; 0x19bc <eeprom_read_byte>
     246:	80 93 6c 01 	sts	0x016C, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     24a:	84 e1       	ldi	r24, 0x14	; 20
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 de 0c 	call	0x19bc	; 0x19bc <eeprom_read_byte>
     252:	80 93 6d 01 	sts	0x016D, r24
     256:	58 e3       	ldi	r21, 0x38	; 56
     258:	e5 2e       	mov	r14, r21
     25a:	51 e0       	ldi	r21, 0x01	; 1
     25c:	f5 2e       	mov	r15, r21
     25e:	01 e1       	ldi	r16, 0x11	; 17
     260:	11 e0       	ldi	r17, 0x01	; 1
     262:	c0 e2       	ldi	r28, 0x20	; 32
     264:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     266:	ce 01       	movw	r24, r28
     268:	0e 94 de 0c 	call	0x19bc	; 0x19bc <eeprom_read_byte>
     26c:	d8 2e       	mov	r13, r24
     26e:	ce 01       	movw	r24, r28
     270:	01 96       	adiw	r24, 0x01	; 1
     272:	0e 94 de 0c 	call	0x19bc	; 0x19bc <eeprom_read_byte>
     276:	2d 2d       	mov	r18, r13
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	32 2f       	mov	r19, r18
     27c:	22 27       	eor	r18, r18
     27e:	28 2b       	or	r18, r24
     280:	f7 01       	movw	r30, r14
     282:	21 93       	st	Z+, r18
     284:	31 93       	st	Z+, r19
     286:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     288:	ce 01       	movw	r24, r28
     28a:	c0 96       	adiw	r24, 0x30	; 48
     28c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <eeprom_read_byte>
     290:	d8 2e       	mov	r13, r24
     292:	ce 01       	movw	r24, r28
     294:	c1 96       	adiw	r24, 0x31	; 49
     296:	0e 94 de 0c 	call	0x19bc	; 0x19bc <eeprom_read_byte>
     29a:	2d 2d       	mov	r18, r13
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	32 2f       	mov	r19, r18
     2a0:	22 27       	eor	r18, r18
     2a2:	28 2b       	or	r18, r24
     2a4:	f8 01       	movw	r30, r16
     2a6:	21 93       	st	Z+, r18
     2a8:	31 93       	st	Z+, r19
     2aa:	8f 01       	movw	r16, r30
     2ac:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     2ae:	cc 33       	cpi	r28, 0x3C	; 60
     2b0:	d1 05       	cpc	r29, r1
     2b2:	c9 f6       	brne	.-78     	; 0x266 <kilo_init+0x16a>
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif

    /*ISIR*/
    rx_direction = NONE;
     2b4:	86 e0       	ldi	r24, 0x06	; 6
     2b6:	80 93 6b 01 	sts	0x016B, r24
    sei();
     2ba:	78 94       	sei
}
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	1f 91       	pop	r17
     2c2:	0f 91       	pop	r16
     2c4:	ff 90       	pop	r15
     2c6:	ef 90       	pop	r14
     2c8:	df 90       	pop	r13
     2ca:	08 95       	ret

000002cc <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     2cc:	1f 92       	push	r1
     2ce:	0f 92       	push	r0
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	0f 92       	push	r0
     2d4:	11 24       	eor	r1, r1
     2d6:	8f 93       	push	r24
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	f8 94       	cli
     2dc:	a8 95       	wdr
     2de:	80 91 60 00 	lds	r24, 0x0060
     2e2:	88 61       	ori	r24, 0x18	; 24
     2e4:	80 93 60 00 	sts	0x0060, r24
     2e8:	10 92 60 00 	sts	0x0060, r1
     2ec:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     2ee:	8f 91       	pop	r24
     2f0:	0f 90       	pop	r0
     2f2:	0f be       	out	0x3f, r0	; 63
     2f4:	0f 90       	pop	r0
     2f6:	1f 90       	pop	r1
     2f8:	18 95       	reti

000002fa <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     2fa:	3c 01       	movw	r6, r24
     2fc:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     2fe:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     300:	99 24       	eor	r9, r9
     302:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     304:	84 e0       	ldi	r24, 0x04	; 4
     306:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     308:	96 e0       	ldi	r25, 0x06	; 6
     30a:	a9 2e       	mov	r10, r25
     30c:	23 e8       	ldi	r18, 0x83	; 131
     30e:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     310:	38 e1       	ldi	r19, 0x18	; 24
     312:	d3 2e       	mov	r13, r19
     314:	49 e2       	ldi	r20, 0x29	; 41
     316:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     318:	90 91 0f 01 	lds	r25, 0x010F
     31c:	e9 2f       	mov	r30, r25
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	e7 30       	cpi	r30, 0x07	; 7
     322:	f1 05       	cpc	r31, r1
     324:	c8 f7       	brcc	.-14     	; 0x318 <kilo_start+0x1e>
     326:	ec 5c       	subi	r30, 0xCC	; 204
     328:	ff 4f       	sbci	r31, 0xFF	; 255
     32a:	0c 94 49 0a 	jmp	0x1492	; 0x1492 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     32e:	11 23       	and	r17, r17
     330:	09 f4       	brne	.+2      	; 0x334 <kilo_start+0x3a>
     332:	fc c0       	rjmp	.+504    	; 0x52c <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     334:	c0 92 0f 01 	sts	0x010F, r12
     338:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     33a:	fe 01       	movw	r30, r28
     33c:	09 95       	icall
                break;
     33e:	ec cf       	rjmp	.-40     	; 0x318 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     340:	80 91 37 01 	lds	r24, 0x0137
     344:	81 11       	cpse	r24, r1
     346:	eb c0       	rjmp	.+470    	; 0x51e <kilo_start+0x224>
        cli();                                    // disable interrupts
     348:	f8 94       	cli
        adc_setup_conversion(6);
     34a:	a0 92 7c 00 	sts	0x007C, r10
     34e:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     352:	80 91 7a 00 	lds	r24, 0x007A
     356:	80 64       	ori	r24, 0x40	; 64
     358:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     35c:	90 91 7a 00 	lds	r25, 0x007A
     360:	96 fd       	sbrc	r25, 6
     362:	fc cf       	rjmp	.-8      	; 0x35c <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     364:	80 91 78 00 	lds	r24, 0x0078
     368:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     36c:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     36e:	8b 3a       	cpi	r24, 0xAB	; 171
     370:	e2 e0       	ldi	r30, 0x02	; 2
     372:	9e 07       	cpc	r25, r30
     374:	0c f0       	brlt	.+2      	; 0x378 <kilo_start+0x7e>
     376:	ed c0       	rjmp	.+474    	; 0x552 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     378:	89 38       	cpi	r24, 0x89	; 137
     37a:	f2 e0       	ldi	r31, 0x02	; 2
     37c:	9f 07       	cpc	r25, r31
     37e:	0c f0       	brlt	.+2      	; 0x382 <kilo_start+0x88>
     380:	ef c0       	rjmp	.+478    	; 0x560 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     382:	87 36       	cpi	r24, 0x67	; 103
     384:	92 40       	sbci	r25, 0x02	; 2
     386:	0c f4       	brge	.+2      	; 0x38a <kilo_start+0x90>
     388:	ca c0       	rjmp	.+404    	; 0x51e <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     38a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     38c:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     38e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     390:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     392:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     394:	3c 98       	cbi	0x07, 4	; 7
     396:	c0 cf       	rjmp	.-128    	; 0x318 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     398:	f8 94       	cli
                acomp_off();
     39a:	80 b7       	in	r24, 0x30	; 48
     39c:	87 7f       	andi	r24, 0xF7	; 247
     39e:	80 bf       	out	0x30, r24	; 48
                adc_off();
     3a0:	80 91 7a 00 	lds	r24, 0x007A
     3a4:	8f 77       	andi	r24, 0x7F	; 127
     3a6:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     3aa:	14 b8       	out	0x04, r1	; 4
     3ac:	17 b8       	out	0x07, r1	; 7
     3ae:	1a b8       	out	0x0a, r1	; 10
     3b0:	15 b8       	out	0x05, r1	; 5
     3b2:	18 b8       	out	0x08, r1	; 8
     3b4:	1b b8       	out	0x0b, r1	; 11
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	f8 94       	cli
     3ba:	a8 95       	wdr
     3bc:	d0 92 60 00 	sts	0x0060, r13
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     3c6:	80 91 60 00 	lds	r24, 0x0060
     3ca:	80 64       	ori	r24, 0x40	; 64
     3cc:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     3d0:	93 b7       	in	r25, 0x33	; 51
     3d2:	91 7f       	andi	r25, 0xF1	; 241
     3d4:	94 60       	ori	r25, 0x04	; 4
     3d6:	93 bf       	out	0x33, r25	; 51
                cli();
     3d8:	f8 94       	cli
                sleep_enable();
     3da:	83 b7       	in	r24, 0x33	; 51
     3dc:	81 60       	ori	r24, 0x01	; 1
     3de:	83 bf       	out	0x33, r24	; 51
                sei();
     3e0:	78 94       	sei
                sleep_cpu();
     3e2:	88 95       	sleep
                sleep_disable();
     3e4:	83 b7       	in	r24, 0x33	; 51
     3e6:	8e 7f       	andi	r24, 0xFE	; 254
     3e8:	83 bf       	out	0x33, r24	; 51
                sei();
     3ea:	78 94       	sei
                rx_busy = 0;
     3ec:	10 92 37 01 	sts	0x0137, r1
                ports_on();
     3f0:	52 9a       	sbi	0x0a, 2	; 10
     3f2:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     3f4:	80 91 7a 00 	lds	r24, 0x007A
     3f8:	80 68       	ori	r24, 0x80	; 128
     3fa:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3fe:	87 e5       	ldi	r24, 0x57	; 87
     400:	92 e0       	ldi	r25, 0x02	; 2
     402:	01 97       	sbiw	r24, 0x01	; 1
     404:	f1 f7       	brne	.-4      	; 0x402 <kilo_start+0x108>
     406:	00 c0       	rjmp	.+0      	; 0x408 <kilo_start+0x10e>
     408:	00 00       	nop
                _delay_us(300);
                acomp_on();
     40a:	80 b7       	in	r24, 0x30	; 48
     40c:	88 61       	ori	r24, 0x18	; 24
     40e:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     410:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     412:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     414:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     416:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     418:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     41a:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     41c:	ef e1       	ldi	r30, 0x1F	; 31
     41e:	fe e4       	ldi	r31, 0x4E	; 78
     420:	31 97       	sbiw	r30, 0x01	; 1
     422:	f1 f7       	brne	.-4      	; 0x420 <kilo_start+0x126>
     424:	00 c0       	rjmp	.+0      	; 0x426 <kilo_start+0x12c>
     426:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     428:	80 91 37 01 	lds	r24, 0x0137
     42c:	81 11       	cpse	r24, r1
     42e:	81 c0       	rjmp	.+258    	; 0x532 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     430:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     432:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     434:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     436:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     438:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     43a:	3c 98       	cbi	0x07, 4	; 7
     43c:	6d cf       	rjmp	.-294    	; 0x318 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     43e:	80 91 0d 01 	lds	r24, 0x010D
     442:	81 11       	cpse	r24, r1
     444:	41 c0       	rjmp	.+130    	; 0x4c8 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     446:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     44a:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     44e:	10 92 0e 01 	sts	0x010E, r1
     452:	62 cf       	rjmp	.-316    	; 0x318 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     454:	48 99       	sbic	0x09, 0	; 9
     456:	ec cf       	rjmp	.-40     	; 0x430 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     458:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     45a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     45c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     45e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     460:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     462:	3c 98       	cbi	0x07, 4	; 7
     464:	8f ec       	ldi	r24, 0xCF	; 207
     466:	97 e0       	ldi	r25, 0x07	; 7
     468:	01 97       	sbiw	r24, 0x01	; 1
     46a:	f1 f7       	brne	.-4      	; 0x468 <kilo_start+0x16e>
     46c:	00 c0       	rjmp	.+0      	; 0x46e <kilo_start+0x174>
     46e:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     470:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     472:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     474:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     476:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     478:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     47a:	3c 98       	cbi	0x07, 4	; 7
     47c:	9f ef       	ldi	r25, 0xFF	; 255
     47e:	e1 ee       	ldi	r30, 0xE1	; 225
     480:	f4 e0       	ldi	r31, 0x04	; 4
     482:	91 50       	subi	r25, 0x01	; 1
     484:	e0 40       	sbci	r30, 0x00	; 0
     486:	f0 40       	sbci	r31, 0x00	; 0
     488:	e1 f7       	brne	.-8      	; 0x482 <kilo_start+0x188>
     48a:	00 c0       	rjmp	.+0      	; 0x48c <kilo_start+0x192>
     48c:	00 00       	nop
     48e:	44 cf       	rjmp	.-376    	; 0x318 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     490:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     492:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     494:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     496:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     498:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     49a:	3c 98       	cbi	0x07, 4	; 7
     49c:	ef ec       	ldi	r30, 0xCF	; 207
     49e:	f7 e0       	ldi	r31, 0x07	; 7
     4a0:	31 97       	sbiw	r30, 0x01	; 1
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <kilo_start+0x1a6>
     4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <kilo_start+0x1ac>
     4a6:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4a8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4aa:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4ac:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4ae:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4b0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4b2:	3c 98       	cbi	0x07, 4	; 7
     4b4:	ff ef       	ldi	r31, 0xFF	; 255
     4b6:	21 ee       	ldi	r18, 0xE1	; 225
     4b8:	84 e0       	ldi	r24, 0x04	; 4
     4ba:	f1 50       	subi	r31, 0x01	; 1
     4bc:	20 40       	sbci	r18, 0x00	; 0
     4be:	80 40       	sbci	r24, 0x00	; 0
     4c0:	e1 f7       	brne	.-8      	; 0x4ba <kilo_start+0x1c0>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <kilo_start+0x1ca>
     4c4:	00 00       	nop
     4c6:	28 cf       	rjmp	.-432    	; 0x318 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     4c8:	90 91 0d 01 	lds	r25, 0x010D
     4cc:	80 91 0e 01 	lds	r24, 0x010E
     4d0:	98 17       	cp	r25, r24
     4d2:	09 f4       	brne	.+2      	; 0x4d6 <kilo_start+0x1dc>
     4d4:	21 cf       	rjmp	.-446    	; 0x318 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     4d6:	80 91 0d 01 	lds	r24, 0x010D
     4da:	80 93 0e 01 	sts	0x010E, r24
                        if (cur_motion == MOVE_LEFT) {
     4de:	80 91 0d 01 	lds	r24, 0x010D
     4e2:	81 30       	cpi	r24, 0x01	; 1
     4e4:	09 f4       	brne	.+2      	; 0x4e8 <kilo_start+0x1ee>
     4e6:	50 c0       	rjmp	.+160    	; 0x588 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     4e8:	80 91 0d 01 	lds	r24, 0x010D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     4ec:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     4f0:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     4f4:	82 30       	cpi	r24, 0x02	; 2
     4f6:	d9 f1       	breq	.+118    	; 0x56e <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     4f8:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     4fc:	90 92 b4 00 	sts	0x00B4, r9
     500:	8f e2       	ldi	r24, 0x2F	; 47
     502:	95 e7       	ldi	r25, 0x75	; 117
     504:	01 97       	sbiw	r24, 0x01	; 1
     506:	f1 f7       	brne	.-4      	; 0x504 <kilo_start+0x20a>
     508:	00 c0       	rjmp	.+0      	; 0x50a <kilo_start+0x210>
     50a:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     50c:	80 91 6d 01 	lds	r24, 0x016D
     510:	90 91 6c 01 	lds	r25, 0x016C
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     514:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     518:	80 93 b4 00 	sts	0x00B4, r24
     51c:	fd ce       	rjmp	.-518    	; 0x318 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     51e:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     520:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     522:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     524:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     526:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     528:	3c 98       	cbi	0x07, 4	; 7
     52a:	f6 ce       	rjmp	.-532    	; 0x318 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     52c:	f3 01       	movw	r30, r6
     52e:	09 95       	icall
     530:	01 cf       	rjmp	.-510    	; 0x334 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     532:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     534:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     536:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     538:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     53a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     53c:	3c 98       	cbi	0x07, 4	; 7
     53e:	ff ef       	ldi	r31, 0xFF	; 255
     540:	20 e7       	ldi	r18, 0x70	; 112
     542:	82 e0       	ldi	r24, 0x02	; 2
     544:	f1 50       	subi	r31, 0x01	; 1
     546:	20 40       	sbci	r18, 0x00	; 0
     548:	80 40       	sbci	r24, 0x00	; 0
     54a:	e1 f7       	brne	.-8      	; 0x544 <kilo_start+0x24a>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <kilo_start+0x254>
     54e:	00 00       	nop
     550:	6f cf       	rjmp	.-290    	; 0x430 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     552:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     554:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     556:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     558:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     55a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     55c:	3c 98       	cbi	0x07, 4	; 7
     55e:	dc ce       	rjmp	.-584    	; 0x318 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     560:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     562:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     564:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     566:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     568:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     56a:	3c 9a       	sbi	0x07, 4	; 7
     56c:	d5 ce       	rjmp	.-598    	; 0x318 <kilo_start+0x1e>
     56e:	ef e2       	ldi	r30, 0x2F	; 47
     570:	f5 e7       	ldi	r31, 0x75	; 117
     572:	31 97       	sbiw	r30, 0x01	; 1
     574:	f1 f7       	brne	.-4      	; 0x572 <kilo_start+0x278>
     576:	00 c0       	rjmp	.+0      	; 0x578 <kilo_start+0x27e>
     578:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     57a:	80 91 59 01 	lds	r24, 0x0159
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     57e:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     582:	80 93 b4 00 	sts	0x00B4, r24
     586:	c8 ce       	rjmp	.-624    	; 0x318 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     588:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     58c:	10 92 b4 00 	sts	0x00B4, r1
     590:	8f e2       	ldi	r24, 0x2F	; 47
     592:	95 e7       	ldi	r25, 0x75	; 117
     594:	01 97       	sbiw	r24, 0x01	; 1
     596:	f1 f7       	brne	.-4      	; 0x594 <kilo_start+0x29a>
     598:	00 c0       	rjmp	.+0      	; 0x59a <kilo_start+0x2a0>
     59a:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     59c:	80 91 6e 01 	lds	r24, 0x016E
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5a0:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     5a4:	10 92 b4 00 	sts	0x00B4, r1
     5a8:	b7 ce       	rjmp	.-658    	; 0x318 <kilo_start+0x1e>

000005aa <delay>:
		default:
			rx_direction = NONE;
	}			
}

void delay(uint16_t ms) {
     5aa:	07 c0       	rjmp	.+14     	; 0x5ba <delay+0x10>
     5ac:	ef ec       	ldi	r30, 0xCF	; 207
     5ae:	f7 e0       	ldi	r31, 0x07	; 7
     5b0:	31 97       	sbiw	r30, 0x01	; 1
     5b2:	f1 f7       	brne	.-4      	; 0x5b0 <delay+0x6>
     5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <delay+0xc>
     5b6:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     5b8:	01 97       	sbiw	r24, 0x01	; 1
			rx_direction = NONE;
	}			
}

void delay(uint16_t ms) {
    while (ms > 0) {
     5ba:	00 97       	sbiw	r24, 0x00	; 0
     5bc:	b9 f7       	brne	.-18     	; 0x5ac <delay+0x2>
     5be:	08 95       	ret

000005c0 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5c0:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     5c4:	60 93 b4 00 	sts	0x00B4, r22
     5c8:	08 95       	ret

000005ca <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5ca:	8f ef       	ldi	r24, 0xFF	; 255
     5cc:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     5d0:	80 93 b4 00 	sts	0x00B4, r24
     5d4:	8f e0       	ldi	r24, 0x0F	; 15
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	ef ec       	ldi	r30, 0xCF	; 207
     5da:	f7 e0       	ldi	r31, 0x07	; 7
     5dc:	31 97       	sbiw	r30, 0x01	; 1
     5de:	f1 f7       	brne	.-4      	; 0x5dc <spinup_motors+0x12>
     5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <spinup_motors+0x18>
     5e2:	00 00       	nop
     5e4:	01 97       	sbiw	r24, 0x01	; 1
			rx_direction = NONE;
	}			
}

void delay(uint16_t ms) {
    while (ms > 0) {
     5e6:	c1 f7       	brne	.-16     	; 0x5d8 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     5e8:	08 95       	ret

000005ea <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     5ea:	80 91 37 01 	lds	r24, 0x0137
     5ee:	81 11       	cpse	r24, r1
     5f0:	1e c0       	rjmp	.+60     	; 0x62e <get_ambientlight+0x44>
        cli();
     5f2:	f8 94       	cli
        adc_setup_conversion(7);
     5f4:	87 e0       	ldi	r24, 0x07	; 7
     5f6:	80 93 7c 00 	sts	0x007C, r24
     5fa:	83 e8       	ldi	r24, 0x83	; 131
     5fc:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     600:	80 91 7a 00 	lds	r24, 0x007A
     604:	80 64       	ori	r24, 0x40	; 64
     606:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     60a:	80 91 7a 00 	lds	r24, 0x007A
     60e:	86 fd       	sbrc	r24, 6
     610:	fc cf       	rjmp	.-8      	; 0x60a <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     612:	80 91 78 00 	lds	r24, 0x0078
     616:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     61a:	10 92 7c 00 	sts	0x007C, r1
     61e:	23 ea       	ldi	r18, 0xA3	; 163
     620:	20 93 7a 00 	sts	0x007A, r18
     624:	21 e0       	ldi	r18, 0x01	; 1
     626:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     62a:	78 94       	sei
     62c:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     62e:	8f ef       	ldi	r24, 0xFF	; 255
     630:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     632:	08 95       	ret

00000634 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     634:	80 91 37 01 	lds	r24, 0x0137
     638:	81 11       	cpse	r24, r1
     63a:	1e c0       	rjmp	.+60     	; 0x678 <get_temperature+0x44>
        cli();
     63c:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     63e:	88 ec       	ldi	r24, 0xC8	; 200
     640:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     644:	87 e8       	ldi	r24, 0x87	; 135
     646:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     64a:	80 91 7a 00 	lds	r24, 0x007A
     64e:	80 64       	ori	r24, 0x40	; 64
     650:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     654:	80 91 7a 00 	lds	r24, 0x007A
     658:	86 fd       	sbrc	r24, 6
     65a:	fc cf       	rjmp	.-8      	; 0x654 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     65c:	80 91 78 00 	lds	r24, 0x0078
     660:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     664:	10 92 7c 00 	sts	0x007C, r1
     668:	23 ea       	ldi	r18, 0xA3	; 163
     66a:	20 93 7a 00 	sts	0x007A, r18
     66e:	21 e0       	ldi	r18, 0x01	; 1
     670:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     674:	78 94       	sei
     676:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     67c:	08 95       	ret

0000067e <rand_hard>:

uint8_t rand_hard() {
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	e0 e0       	ldi	r30, 0x00	; 0
     688:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     68a:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     68c:	03 ea       	ldi	r16, 0xA3	; 163
     68e:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     690:	d6 e0       	ldi	r29, 0x06	; 6
     692:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     694:	a1 e0       	ldi	r26, 0x01	; 1
     696:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     698:	60 e8       	ldi	r22, 0x80	; 128
     69a:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     69c:	f8 94       	cli
            adc_setup_conversion(6);
     69e:	d0 93 7c 00 	sts	0x007C, r29
     6a2:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     6a6:	90 91 7a 00 	lds	r25, 0x007A
     6aa:	90 64       	ori	r25, 0x40	; 64
     6ac:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     6b0:	90 91 7a 00 	lds	r25, 0x007A
     6b4:	96 fd       	sbrc	r25, 6
     6b6:	fc cf       	rjmp	.-8      	; 0x6b0 <rand_hard+0x32>
            a = ADCW&0x1;
     6b8:	20 91 78 00 	lds	r18, 0x0078
     6bc:	30 91 79 00 	lds	r19, 0x0079
     6c0:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     6c2:	90 91 7a 00 	lds	r25, 0x007A
     6c6:	90 64       	ori	r25, 0x40	; 64
     6c8:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     6cc:	90 91 7a 00 	lds	r25, 0x007A
     6d0:	96 fd       	sbrc	r25, 6
     6d2:	fc cf       	rjmp	.-8      	; 0x6cc <rand_hard+0x4e>
            b = ADCW&0x1;
     6d4:	40 91 78 00 	lds	r20, 0x0078
     6d8:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     6dc:	10 92 7c 00 	sts	0x007C, r1
     6e0:	00 93 7a 00 	sts	0x007A, r16
     6e4:	10 93 7b 00 	sts	0x007B, r17
            sei();
     6e8:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     6ea:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     6ec:	24 13       	cpse	r18, r20
     6ee:	03 c0       	rjmp	.+6      	; 0x6f6 <rand_hard+0x78>
     6f0:	61 50       	subi	r22, 0x01	; 1
     6f2:	71 09       	sbc	r23, r1
     6f4:	99 f6       	brne	.-90     	; 0x69c <rand_hard+0x1e>
        if (a)
     6f6:	22 23       	and	r18, r18
     6f8:	39 f0       	breq	.+14     	; 0x708 <rand_hard+0x8a>
            num |= (1<<i);
     6fa:	9d 01       	movw	r18, r26
     6fc:	0e 2e       	mov	r0, r30
     6fe:	01 c0       	rjmp	.+2      	; 0x702 <rand_hard+0x84>
     700:	22 0f       	add	r18, r18
     702:	0a 94       	dec	r0
     704:	ea f7       	brpl	.-6      	; 0x700 <rand_hard+0x82>
     706:	82 2b       	or	r24, r18
     708:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     70a:	e8 30       	cpi	r30, 0x08	; 8
     70c:	f1 05       	cpc	r31, r1
     70e:	09 f0       	breq	.+2      	; 0x712 <rand_hard+0x94>
     710:	c3 cf       	rjmp	.-122    	; 0x698 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	1f 91       	pop	r17
     718:	0f 91       	pop	r16
     71a:	08 95       	ret

0000071c <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     71c:	80 91 00 01 	lds	r24, 0x0100
     720:	98 2f       	mov	r25, r24
     722:	99 0f       	add	r25, r25
     724:	99 0f       	add	r25, r25
     726:	99 0f       	add	r25, r25
     728:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     72a:	90 91 0c 01 	lds	r25, 0x010C
     72e:	21 e0       	ldi	r18, 0x01	; 1
     730:	29 0f       	add	r18, r25
     732:	20 93 0c 01 	sts	0x010C, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     736:	28 2f       	mov	r18, r24
     738:	22 95       	swap	r18
     73a:	26 95       	lsr	r18
     73c:	27 70       	andi	r18, 0x07	; 7
     73e:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     740:	96 95       	lsr	r25
     742:	96 95       	lsr	r25
     744:	89 27       	eor	r24, r25
     746:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     74a:	08 95       	ret

0000074c <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     74c:	80 93 00 01 	sts	0x0100, r24
     750:	08 95       	ret

00000752 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     752:	80 91 37 01 	lds	r24, 0x0137
     756:	81 11       	cpse	r24, r1
     758:	16 c0       	rjmp	.+44     	; 0x786 <get_voltage+0x34>
        cli();                                    // disable interrupts
     75a:	f8 94       	cli
        adc_setup_conversion(6);
     75c:	86 e0       	ldi	r24, 0x06	; 6
     75e:	80 93 7c 00 	sts	0x007C, r24
     762:	83 e8       	ldi	r24, 0x83	; 131
     764:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     768:	80 91 7a 00 	lds	r24, 0x007A
     76c:	80 64       	ori	r24, 0x40	; 64
     76e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     772:	80 91 7a 00 	lds	r24, 0x007A
     776:	86 fd       	sbrc	r24, 6
     778:	fc cf       	rjmp	.-8      	; 0x772 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     77a:	80 91 78 00 	lds	r24, 0x0078
     77e:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     782:	78 94       	sei
     784:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     786:	8f ef       	ldi	r24, 0xFF	; 255
     788:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     78a:	08 95       	ret

0000078c <get_direction>:

direction get_direction(){ return rx_direction;}
     78c:	80 91 6b 01 	lds	r24, 0x016B
     790:	08 95       	ret

00000792 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     792:	2f 92       	push	r2
     794:	3f 92       	push	r3
     796:	4f 92       	push	r4
     798:	5f 92       	push	r5
     79a:	6f 92       	push	r6
     79c:	7f 92       	push	r7
     79e:	8f 92       	push	r8
     7a0:	9f 92       	push	r9
     7a2:	af 92       	push	r10
     7a4:	bf 92       	push	r11
     7a6:	cf 92       	push	r12
     7a8:	df 92       	push	r13
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	00 d0       	rcall	.+0      	; 0x7b8 <estimate_distance+0x26>
     7b8:	00 d0       	rcall	.+0      	; 0x7ba <estimate_distance+0x28>
     7ba:	00 d0       	rcall	.+0      	; 0x7bc <estimate_distance+0x2a>
     7bc:	cd b7       	in	r28, 0x3d	; 61
     7be:	de b7       	in	r29, 0x3e	; 62
     7c0:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     7c2:	dc 01       	movw	r26, r24
     7c4:	12 96       	adiw	r26, 0x02	; 2
     7c6:	0d 90       	ld	r0, X+
     7c8:	bc 91       	ld	r27, X
     7ca:	a0 2d       	mov	r26, r0
     7cc:	be 83       	std	Y+6, r27	; 0x06
     7ce:	ad 83       	std	Y+5, r26	; 0x05
     7d0:	a4 38       	cpi	r26, 0x84	; 132
     7d2:	e3 e0       	ldi	r30, 0x03	; 3
     7d4:	be 07       	cpc	r27, r30
     7d6:	0c f0       	brlt	.+2      	; 0x7da <estimate_distance+0x48>
     7d8:	c9 c0       	rjmp	.+402    	; 0x96c <__stack+0x6d>
        if (dist->high_gain > kilo_irhigh[0]) {
     7da:	80 91 11 01 	lds	r24, 0x0111
     7de:	90 91 12 01 	lds	r25, 0x0112
     7e2:	8a 17       	cp	r24, r26
     7e4:	9b 07       	cpc	r25, r27
     7e6:	08 f4       	brcc	.+2      	; 0x7ea <estimate_distance+0x58>
     7e8:	37 c1       	rjmp	.+622    	; 0xa58 <__stack+0x159>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     7ea:	00 91 13 01 	lds	r16, 0x0113
     7ee:	10 91 14 01 	lds	r17, 0x0114
     7f2:	0a 17       	cp	r16, r26
     7f4:	1b 07       	cpc	r17, r27
     7f6:	08 f4       	brcc	.+2      	; 0x7fa <estimate_distance+0x68>
     7f8:	2f c2       	rjmp	.+1118   	; 0xc58 <__stack+0x359>
     7fa:	00 91 15 01 	lds	r16, 0x0115
     7fe:	10 91 16 01 	lds	r17, 0x0116
     802:	0a 17       	cp	r16, r26
     804:	1b 07       	cpc	r17, r27
     806:	08 f4       	brcc	.+2      	; 0x80a <estimate_distance+0x78>
     808:	2f c2       	rjmp	.+1118   	; 0xc68 <__stack+0x369>
     80a:	00 91 17 01 	lds	r16, 0x0117
     80e:	10 91 18 01 	lds	r17, 0x0118
     812:	0a 17       	cp	r16, r26
     814:	1b 07       	cpc	r17, r27
     816:	08 f4       	brcc	.+2      	; 0x81a <estimate_distance+0x88>
     818:	2f c2       	rjmp	.+1118   	; 0xc78 <__stack+0x379>
     81a:	00 91 19 01 	lds	r16, 0x0119
     81e:	10 91 1a 01 	lds	r17, 0x011A
     822:	0a 17       	cp	r16, r26
     824:	1b 07       	cpc	r17, r27
     826:	08 f4       	brcc	.+2      	; 0x82a <estimate_distance+0x98>
     828:	2f c2       	rjmp	.+1118   	; 0xc88 <__stack+0x389>
     82a:	00 91 1b 01 	lds	r16, 0x011B
     82e:	10 91 1c 01 	lds	r17, 0x011C
     832:	0a 17       	cp	r16, r26
     834:	1b 07       	cpc	r17, r27
     836:	08 f4       	brcc	.+2      	; 0x83a <estimate_distance+0xa8>
     838:	ef c1       	rjmp	.+990    	; 0xc18 <__stack+0x319>
     83a:	00 91 1d 01 	lds	r16, 0x011D
     83e:	10 91 1e 01 	lds	r17, 0x011E
     842:	0a 17       	cp	r16, r26
     844:	1b 07       	cpc	r17, r27
     846:	08 f4       	brcc	.+2      	; 0x84a <estimate_distance+0xb8>
     848:	27 c2       	rjmp	.+1102   	; 0xc98 <__stack+0x399>
     84a:	00 91 1f 01 	lds	r16, 0x011F
     84e:	10 91 20 01 	lds	r17, 0x0120
     852:	0a 17       	cp	r16, r26
     854:	1b 07       	cpc	r17, r27
     856:	08 f4       	brcc	.+2      	; 0x85a <estimate_distance+0xc8>
     858:	27 c2       	rjmp	.+1102   	; 0xca8 <__stack+0x3a9>
     85a:	00 91 21 01 	lds	r16, 0x0121
     85e:	10 91 22 01 	lds	r17, 0x0122
     862:	0a 17       	cp	r16, r26
     864:	1b 07       	cpc	r17, r27
     866:	08 f4       	brcc	.+2      	; 0x86a <estimate_distance+0xd8>
     868:	27 c2       	rjmp	.+1102   	; 0xcb8 <__stack+0x3b9>
     86a:	00 91 23 01 	lds	r16, 0x0123
     86e:	10 91 24 01 	lds	r17, 0x0124
     872:	0a 17       	cp	r16, r26
     874:	1b 07       	cpc	r17, r27
     876:	08 f4       	brcc	.+2      	; 0x87a <estimate_distance+0xe8>
     878:	27 c2       	rjmp	.+1102   	; 0xcc8 <__stack+0x3c9>
     87a:	00 91 25 01 	lds	r16, 0x0125
     87e:	10 91 26 01 	lds	r17, 0x0126
     882:	0a 17       	cp	r16, r26
     884:	1b 07       	cpc	r17, r27
     886:	08 f4       	brcc	.+2      	; 0x88a <estimate_distance+0xf8>
     888:	27 c2       	rjmp	.+1102   	; 0xcd8 <__stack+0x3d9>
     88a:	00 91 27 01 	lds	r16, 0x0127
     88e:	10 91 28 01 	lds	r17, 0x0128
     892:	0a 17       	cp	r16, r26
     894:	1b 07       	cpc	r17, r27
     896:	08 f4       	brcc	.+2      	; 0x89a <estimate_distance+0x108>
     898:	23 c2       	rjmp	.+1094   	; 0xce0 <__stack+0x3e1>
     89a:	00 91 29 01 	lds	r16, 0x0129
     89e:	10 91 2a 01 	lds	r17, 0x012A
     8a2:	0a 17       	cp	r16, r26
     8a4:	1b 07       	cpc	r17, r27
     8a6:	08 f4       	brcc	.+2      	; 0x8aa <estimate_distance+0x118>
     8a8:	23 c2       	rjmp	.+1094   	; 0xcf0 <__stack+0x3f1>
     8aa:	00 91 2b 01 	lds	r16, 0x012B
     8ae:	10 91 2c 01 	lds	r17, 0x012C
     8b2:	0a 17       	cp	r16, r26
     8b4:	1b 07       	cpc	r17, r27
     8b6:	08 f4       	brcc	.+2      	; 0x8ba <estimate_distance+0x128>
     8b8:	23 c2       	rjmp	.+1094   	; 0xd00 <__stack+0x401>
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	a0 ed       	ldi	r26, 0xD0	; 208
     8c0:	b0 e4       	ldi	r27, 0x40	; 64
     8c2:	89 83       	std	Y+1, r24	; 0x01
     8c4:	9a 83       	std	Y+2, r25	; 0x02
     8c6:	ab 83       	std	Y+3, r26	; 0x03
     8c8:	bc 83       	std	Y+4, r27	; 0x04
     8ca:	4c e0       	ldi	r20, 0x0C	; 12
     8cc:	e4 2e       	mov	r14, r20
     8ce:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     8d0:	f7 01       	movw	r30, r14
     8d2:	ee 0f       	add	r30, r30
     8d4:	ff 1f       	adc	r31, r31
     8d6:	ef 5e       	subi	r30, 0xEF	; 239
     8d8:	fe 4f       	sbci	r31, 0xFE	; 254
     8da:	80 81       	ld	r24, Z
     8dc:	91 81       	ldd	r25, Z+1	; 0x01
     8de:	b8 01       	movw	r22, r16
     8e0:	68 1b       	sub	r22, r24
     8e2:	79 0b       	sbc	r23, r25
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 87 0b 	call	0x170e	; 0x170e <__floatunsisf>
     8ec:	9b 01       	movw	r18, r22
     8ee:	ac 01       	movw	r20, r24
     8f0:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__addsf3>
     8f4:	6b 01       	movw	r12, r22
     8f6:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     8f8:	ad 81       	ldd	r26, Y+5	; 0x05
     8fa:	be 81       	ldd	r27, Y+6	; 0x06
     8fc:	bd 01       	movw	r22, r26
     8fe:	bb 0f       	add	r27, r27
     900:	88 0b       	sbc	r24, r24
     902:	99 0b       	sbc	r25, r25
     904:	0e 94 89 0b 	call	0x1712	; 0x1712 <__floatsisf>
     908:	4b 01       	movw	r8, r22
     90a:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     90c:	b8 01       	movw	r22, r16
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 87 0b 	call	0x170e	; 0x170e <__floatunsisf>
     916:	2b 01       	movw	r4, r22
     918:	3c 01       	movw	r6, r24
     91a:	29 81       	ldd	r18, Y+1	; 0x01
     91c:	3a 81       	ldd	r19, Y+2	; 0x02
     91e:	4b 81       	ldd	r20, Y+3	; 0x03
     920:	5c 81       	ldd	r21, Y+4	; 0x04
     922:	c7 01       	movw	r24, r14
     924:	b6 01       	movw	r22, r12
     926:	0e 94 15 0c 	call	0x182a	; 0x182a <__mulsf3>
     92a:	9b 01       	movw	r18, r22
     92c:	ac 01       	movw	r20, r24
     92e:	c3 01       	movw	r24, r6
     930:	b2 01       	movw	r22, r4
     932:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__subsf3>
     936:	9b 01       	movw	r18, r22
     938:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     93a:	c5 01       	movw	r24, r10
     93c:	b4 01       	movw	r22, r8
     93e:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__subsf3>
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	40 e2       	ldi	r20, 0x20	; 32
     948:	51 e4       	ldi	r21, 0x41	; 65
     94a:	0e 94 15 0c 	call	0x182a	; 0x182a <__mulsf3>
            b=((int)((int)b/(int)slope));
     94e:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__fixsfsi>
     952:	8b 01       	movw	r16, r22
     954:	c7 01       	movw	r24, r14
     956:	b6 01       	movw	r22, r12
     958:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__fixsfsi>
     95c:	ab 01       	movw	r20, r22
     95e:	bc 01       	movw	r22, r24
     960:	c8 01       	movw	r24, r16
     962:	ba 01       	movw	r22, r20
     964:	0e 94 35 0a 	call	0x146a	; 0x146a <__divmodhi4>
            dist_high=b;
     968:	16 2f       	mov	r17, r22
     96a:	77 c0       	rjmp	.+238    	; 0xa5a <__stack+0x15b>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     96c:	dc 01       	movw	r26, r24
     96e:	cd 90       	ld	r12, X+
     970:	dc 90       	ld	r13, X
     972:	80 91 38 01 	lds	r24, 0x0138
     976:	90 91 39 01 	lds	r25, 0x0139
     97a:	8c 15       	cp	r24, r12
     97c:	9d 05       	cpc	r25, r13
     97e:	08 f4       	brcc	.+2      	; 0x982 <__stack+0x83>
     980:	8c c0       	rjmp	.+280    	; 0xa9a <__stack+0x19b>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     982:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     984:	e0 90 3a 01 	lds	r14, 0x013A
     988:	f0 90 3b 01 	lds	r15, 0x013B
     98c:	ec 14       	cp	r14, r12
     98e:	fd 04       	cpc	r15, r13
     990:	08 f4       	brcc	.+2      	; 0x994 <__stack+0x95>
     992:	5e c1       	rjmp	.+700    	; 0xc50 <__stack+0x351>
     994:	e0 90 3c 01 	lds	r14, 0x013C
     998:	f0 90 3d 01 	lds	r15, 0x013D
     99c:	ec 14       	cp	r14, r12
     99e:	fd 04       	cpc	r15, r13
     9a0:	08 f4       	brcc	.+2      	; 0x9a4 <__stack+0xa5>
     9a2:	5e c1       	rjmp	.+700    	; 0xc60 <__stack+0x361>
     9a4:	e0 90 3e 01 	lds	r14, 0x013E
     9a8:	f0 90 3f 01 	lds	r15, 0x013F
     9ac:	ec 14       	cp	r14, r12
     9ae:	fd 04       	cpc	r15, r13
     9b0:	08 f4       	brcc	.+2      	; 0x9b4 <__stack+0xb5>
     9b2:	5e c1       	rjmp	.+700    	; 0xc70 <__stack+0x371>
     9b4:	e0 90 40 01 	lds	r14, 0x0140
     9b8:	f0 90 41 01 	lds	r15, 0x0141
     9bc:	ec 14       	cp	r14, r12
     9be:	fd 04       	cpc	r15, r13
     9c0:	08 f4       	brcc	.+2      	; 0x9c4 <__stack+0xc5>
     9c2:	5e c1       	rjmp	.+700    	; 0xc80 <__stack+0x381>
     9c4:	e0 90 42 01 	lds	r14, 0x0142
     9c8:	f0 90 43 01 	lds	r15, 0x0143
     9cc:	ec 14       	cp	r14, r12
     9ce:	fd 04       	cpc	r15, r13
     9d0:	08 f4       	brcc	.+2      	; 0x9d4 <__stack+0xd5>
     9d2:	c3 c0       	rjmp	.+390    	; 0xb5a <__stack+0x25b>
     9d4:	e0 90 44 01 	lds	r14, 0x0144
     9d8:	f0 90 45 01 	lds	r15, 0x0145
     9dc:	ec 14       	cp	r14, r12
     9de:	fd 04       	cpc	r15, r13
     9e0:	08 f4       	brcc	.+2      	; 0x9e4 <__stack+0xe5>
     9e2:	56 c1       	rjmp	.+684    	; 0xc90 <__stack+0x391>
     9e4:	e0 90 46 01 	lds	r14, 0x0146
     9e8:	f0 90 47 01 	lds	r15, 0x0147
     9ec:	ec 14       	cp	r14, r12
     9ee:	fd 04       	cpc	r15, r13
     9f0:	08 f4       	brcc	.+2      	; 0x9f4 <__stack+0xf5>
     9f2:	56 c1       	rjmp	.+684    	; 0xca0 <__stack+0x3a1>
     9f4:	e0 90 48 01 	lds	r14, 0x0148
     9f8:	f0 90 49 01 	lds	r15, 0x0149
     9fc:	ec 14       	cp	r14, r12
     9fe:	fd 04       	cpc	r15, r13
     a00:	08 f4       	brcc	.+2      	; 0xa04 <__stack+0x105>
     a02:	56 c1       	rjmp	.+684    	; 0xcb0 <__stack+0x3b1>
     a04:	e0 90 4a 01 	lds	r14, 0x014A
     a08:	f0 90 4b 01 	lds	r15, 0x014B
     a0c:	ec 14       	cp	r14, r12
     a0e:	fd 04       	cpc	r15, r13
     a10:	08 f4       	brcc	.+2      	; 0xa14 <__stack+0x115>
     a12:	56 c1       	rjmp	.+684    	; 0xcc0 <__stack+0x3c1>
     a14:	e0 90 4c 01 	lds	r14, 0x014C
     a18:	f0 90 4d 01 	lds	r15, 0x014D
     a1c:	ec 14       	cp	r14, r12
     a1e:	fd 04       	cpc	r15, r13
     a20:	08 f4       	brcc	.+2      	; 0xa24 <__stack+0x125>
     a22:	56 c1       	rjmp	.+684    	; 0xcd0 <__stack+0x3d1>
     a24:	e0 90 4e 01 	lds	r14, 0x014E
     a28:	f0 90 4f 01 	lds	r15, 0x014F
     a2c:	ec 14       	cp	r14, r12
     a2e:	fd 04       	cpc	r15, r13
     a30:	08 f4       	brcc	.+2      	; 0xa34 <__stack+0x135>
     a32:	5a c1       	rjmp	.+692    	; 0xce8 <__stack+0x3e9>
     a34:	e0 90 50 01 	lds	r14, 0x0150
     a38:	f0 90 51 01 	lds	r15, 0x0151
     a3c:	ec 14       	cp	r14, r12
     a3e:	fd 04       	cpc	r15, r13
     a40:	08 f4       	brcc	.+2      	; 0xa44 <__stack+0x145>
     a42:	5a c1       	rjmp	.+692    	; 0xcf8 <__stack+0x3f9>
     a44:	e0 90 52 01 	lds	r14, 0x0152
     a48:	f0 90 53 01 	lds	r15, 0x0153
     a4c:	ec 14       	cp	r14, r12
     a4e:	fd 04       	cpc	r15, r13
     a50:	08 f4       	brcc	.+2      	; 0xa54 <__stack+0x155>
     a52:	5a c1       	rjmp	.+692    	; 0xd08 <__stack+0x409>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     a54:	0a e5       	ldi	r16, 0x5A	; 90
     a56:	31 c0       	rjmp	.+98     	; 0xaba <__stack+0x1bb>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     a58:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     a5a:	ed 81       	ldd	r30, Y+5	; 0x05
     a5c:	fe 81       	ldd	r31, Y+6	; 0x06
     a5e:	ed 3b       	cpi	r30, 0xBD	; 189
     a60:	f2 40       	sbci	r31, 0x02	; 2
     a62:	fc f4       	brge	.+62     	; 0xaa2 <__stack+0x1a3>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     a64:	81 e2       	ldi	r24, 0x21	; 33
     a66:	81 0f       	add	r24, r17
    }
}
     a68:	26 96       	adiw	r28, 0x06	; 6
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	f8 94       	cli
     a6e:	de bf       	out	0x3e, r29	; 62
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	cd bf       	out	0x3d, r28	; 61
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	df 90       	pop	r13
     a82:	cf 90       	pop	r12
     a84:	bf 90       	pop	r11
     a86:	af 90       	pop	r10
     a88:	9f 90       	pop	r9
     a8a:	8f 90       	pop	r8
     a8c:	7f 90       	pop	r7
     a8e:	6f 90       	pop	r6
     a90:	5f 90       	pop	r5
     a92:	4f 90       	pop	r4
     a94:	3f 90       	pop	r3
     a96:	2f 90       	pop	r2
     a98:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     a9a:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     a9c:	81 e2       	ldi	r24, 0x21	; 33
     a9e:	80 0f       	add	r24, r16
     aa0:	e3 cf       	rjmp	.-58     	; 0xa68 <__stack+0x169>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     aa2:	d1 01       	movw	r26, r2
     aa4:	cd 90       	ld	r12, X+
     aa6:	dc 90       	ld	r13, X
     aa8:	80 91 38 01 	lds	r24, 0x0138
     aac:	90 91 39 01 	lds	r25, 0x0139
     ab0:	8c 15       	cp	r24, r12
     ab2:	9d 05       	cpc	r25, r13
     ab4:	08 f0       	brcs	.+2      	; 0xab8 <__stack+0x1b9>
     ab6:	66 cf       	rjmp	.-308    	; 0x984 <__stack+0x85>
            dist_low=0;
     ab8:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     aba:	1f 3f       	cpi	r17, 0xFF	; 255
     abc:	79 f3       	breq	.-34     	; 0xa9c <__stack+0x19d>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     abe:	ed 81       	ldd	r30, Y+5	; 0x05
     ac0:	fe 81       	ldd	r31, Y+6	; 0x06
     ac2:	bf 01       	movw	r22, r30
     ac4:	ff 0f       	add	r31, r31
     ac6:	88 0b       	sbc	r24, r24
     ac8:	99 0b       	sbc	r25, r25
     aca:	0e 94 89 0b 	call	0x1712	; 0x1712 <__floatsisf>
     ace:	6b 01       	movw	r12, r22
     ad0:	7c 01       	movw	r14, r24
     ad2:	61 2f       	mov	r22, r17
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e 94 87 0b 	call	0x170e	; 0x170e <__floatunsisf>
     ade:	4b 01       	movw	r8, r22
     ae0:	5c 01       	movw	r10, r24
     ae2:	a7 01       	movw	r20, r14
     ae4:	96 01       	movw	r18, r12
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	81 e6       	ldi	r24, 0x61	; 97
     aec:	94 e4       	ldi	r25, 0x44	; 68
     aee:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__subsf3>
     af2:	9b 01       	movw	r18, r22
     af4:	ac 01       	movw	r20, r24
     af6:	c5 01       	movw	r24, r10
     af8:	b4 01       	movw	r22, r8
     afa:	0e 94 15 0c 	call	0x182a	; 0x182a <__mulsf3>
     afe:	4b 01       	movw	r8, r22
     b00:	5c 01       	movw	r10, r24
     b02:	60 2f       	mov	r22, r16
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 87 0b 	call	0x170e	; 0x170e <__floatunsisf>
     b0e:	2b 01       	movw	r4, r22
     b10:	3c 01       	movw	r6, r24
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	4f e2       	ldi	r20, 0x2F	; 47
     b18:	54 e4       	ldi	r21, 0x44	; 68
     b1a:	c7 01       	movw	r24, r14
     b1c:	b6 01       	movw	r22, r12
     b1e:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__subsf3>
     b22:	9b 01       	movw	r18, r22
     b24:	ac 01       	movw	r20, r24
     b26:	c3 01       	movw	r24, r6
     b28:	b2 01       	movw	r22, r4
     b2a:	0e 94 15 0c 	call	0x182a	; 0x182a <__mulsf3>
     b2e:	9b 01       	movw	r18, r22
     b30:	ac 01       	movw	r20, r24
     b32:	c5 01       	movw	r24, r10
     b34:	b4 01       	movw	r22, r8
     b36:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__addsf3>
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	48 e4       	ldi	r20, 0x48	; 72
     b40:	53 e4       	ldi	r21, 0x43	; 67
     b42:	0e 94 df 0a 	call	0x15be	; 0x15be <__divsf3>
     b46:	20 e0       	ldi	r18, 0x00	; 0
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	44 e0       	ldi	r20, 0x04	; 4
     b4c:	52 e4       	ldi	r21, 0x42	; 66
     b4e:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__addsf3>
     b52:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__fixunssfsi>
     b56:	86 2f       	mov	r24, r22
     b58:	87 cf       	rjmp	.-242    	; 0xa68 <__stack+0x169>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     b5a:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     b5c:	85 e0       	ldi	r24, 0x05	; 5
     b5e:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	fc 01       	movw	r30, r24
     b66:	ea 5c       	subi	r30, 0xCA	; 202
     b68:	fe 4f       	sbci	r31, 0xFE	; 254
     b6a:	80 81       	ld	r24, Z
     b6c:	91 81       	ldd	r25, Z+1	; 0x01
     b6e:	b7 01       	movw	r22, r14
     b70:	68 1b       	sub	r22, r24
     b72:	79 0b       	sbc	r23, r25
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 87 0b 	call	0x170e	; 0x170e <__floatunsisf>
     b7c:	9b 01       	movw	r18, r22
     b7e:	ac 01       	movw	r20, r24
     b80:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__addsf3>
     b84:	4b 01       	movw	r8, r22
     b86:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     b88:	b6 01       	movw	r22, r12
     b8a:	dd 0c       	add	r13, r13
     b8c:	88 0b       	sbc	r24, r24
     b8e:	99 0b       	sbc	r25, r25
     b90:	0e 94 89 0b 	call	0x1712	; 0x1712 <__floatsisf>
     b94:	2b 01       	movw	r4, r22
     b96:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     b98:	b7 01       	movw	r22, r14
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 87 0b 	call	0x170e	; 0x170e <__floatunsisf>
     ba2:	6b 01       	movw	r12, r22
     ba4:	7c 01       	movw	r14, r24
     ba6:	60 2f       	mov	r22, r16
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 87 0b 	call	0x170e	; 0x170e <__floatunsisf>
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	5f e3       	ldi	r21, 0x3F	; 63
     bba:	0e 94 15 0c 	call	0x182a	; 0x182a <__mulsf3>
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	a9 01       	movw	r20, r18
     bc4:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__addsf3>
     bc8:	a5 01       	movw	r20, r10
     bca:	94 01       	movw	r18, r8
     bcc:	0e 94 15 0c 	call	0x182a	; 0x182a <__mulsf3>
     bd0:	9b 01       	movw	r18, r22
     bd2:	ac 01       	movw	r20, r24
     bd4:	c7 01       	movw	r24, r14
     bd6:	b6 01       	movw	r22, r12
     bd8:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__subsf3>
     bdc:	9b 01       	movw	r18, r22
     bde:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     be0:	c3 01       	movw	r24, r6
     be2:	b2 01       	movw	r22, r4
     be4:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__subsf3>
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	40 e2       	ldi	r20, 0x20	; 32
     bee:	51 e4       	ldi	r21, 0x41	; 65
     bf0:	0e 94 15 0c 	call	0x182a	; 0x182a <__mulsf3>
                b=((int)((int)b/(int)slope));
     bf4:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__fixsfsi>
     bf8:	7b 01       	movw	r14, r22
     bfa:	c5 01       	movw	r24, r10
     bfc:	b4 01       	movw	r22, r8
     bfe:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__fixsfsi>
     c02:	ab 01       	movw	r20, r22
     c04:	bc 01       	movw	r22, r24
     c06:	c7 01       	movw	r24, r14
     c08:	ba 01       	movw	r22, r20
     c0a:	0e 94 35 0a 	call	0x146a	; 0x146a <__divmodhi4>
                dist_low=b;
     c0e:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     c10:	6f 3f       	cpi	r22, 0xFF	; 255
     c12:	09 f0       	breq	.+2      	; 0xc16 <__stack+0x317>
     c14:	52 cf       	rjmp	.-348    	; 0xaba <__stack+0x1bb>
     c16:	26 cf       	rjmp	.-436    	; 0xa64 <__stack+0x165>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c18:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     c1a:	85 e0       	ldi	r24, 0x05	; 5
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	7c 01       	movw	r14, r24
     c20:	f1 e0       	ldi	r31, 0x01	; 1
     c22:	ef 1a       	sub	r14, r31
     c24:	f1 08       	sbc	r15, r1
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	0e 94 87 0b 	call	0x170e	; 0x170e <__floatunsisf>
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	40 e0       	ldi	r20, 0x00	; 0
     c36:	5f e3       	ldi	r21, 0x3F	; 63
     c38:	0e 94 15 0c 	call	0x182a	; 0x182a <__mulsf3>
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	a9 01       	movw	r20, r18
     c42:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__addsf3>
     c46:	69 83       	std	Y+1, r22	; 0x01
     c48:	7a 83       	std	Y+2, r23	; 0x02
     c4a:	8b 83       	std	Y+3, r24	; 0x03
     c4c:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     c4e:	40 ce       	rjmp	.-896    	; 0x8d0 <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     c50:	01 e0       	ldi	r16, 0x01	; 1
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	84 cf       	rjmp	.-248    	; 0xb60 <__stack+0x261>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     c58:	61 e0       	ldi	r22, 0x01	; 1
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	df cf       	rjmp	.-66     	; 0xc1e <__stack+0x31f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c60:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     c62:	82 e0       	ldi	r24, 0x02	; 2
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	7c cf       	rjmp	.-264    	; 0xb60 <__stack+0x261>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c68:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	d7 cf       	rjmp	.-82     	; 0xc1e <__stack+0x31f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c70:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     c72:	83 e0       	ldi	r24, 0x03	; 3
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	74 cf       	rjmp	.-280    	; 0xb60 <__stack+0x261>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c78:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     c7a:	83 e0       	ldi	r24, 0x03	; 3
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	cf cf       	rjmp	.-98     	; 0xc1e <__stack+0x31f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c80:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     c82:	84 e0       	ldi	r24, 0x04	; 4
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	6c cf       	rjmp	.-296    	; 0xb60 <__stack+0x261>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c88:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     c8a:	84 e0       	ldi	r24, 0x04	; 4
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	c7 cf       	rjmp	.-114    	; 0xc1e <__stack+0x31f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c90:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     c92:	86 e0       	ldi	r24, 0x06	; 6
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	64 cf       	rjmp	.-312    	; 0xb60 <__stack+0x261>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c98:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     c9a:	86 e0       	ldi	r24, 0x06	; 6
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	bf cf       	rjmp	.-130    	; 0xc1e <__stack+0x31f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ca0:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     ca2:	87 e0       	ldi	r24, 0x07	; 7
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	5c cf       	rjmp	.-328    	; 0xb60 <__stack+0x261>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ca8:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     caa:	87 e0       	ldi	r24, 0x07	; 7
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	b7 cf       	rjmp	.-146    	; 0xc1e <__stack+0x31f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cb0:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     cb2:	88 e0       	ldi	r24, 0x08	; 8
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	54 cf       	rjmp	.-344    	; 0xb60 <__stack+0x261>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cb8:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     cba:	88 e0       	ldi	r24, 0x08	; 8
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	af cf       	rjmp	.-162    	; 0xc1e <__stack+0x31f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cc0:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     cc2:	89 e0       	ldi	r24, 0x09	; 9
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	4c cf       	rjmp	.-360    	; 0xb60 <__stack+0x261>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cc8:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     cca:	89 e0       	ldi	r24, 0x09	; 9
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	a7 cf       	rjmp	.-178    	; 0xc1e <__stack+0x31f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cd0:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     cd2:	8a e0       	ldi	r24, 0x0A	; 10
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	44 cf       	rjmp	.-376    	; 0xb60 <__stack+0x261>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cd8:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     cda:	8a e0       	ldi	r24, 0x0A	; 10
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	9f cf       	rjmp	.-194    	; 0xc1e <__stack+0x31f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ce0:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     ce2:	8b e0       	ldi	r24, 0x0B	; 11
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	9b cf       	rjmp	.-202    	; 0xc1e <__stack+0x31f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ce8:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     cea:	8b e0       	ldi	r24, 0x0B	; 11
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	38 cf       	rjmp	.-400    	; 0xb60 <__stack+0x261>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cf0:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     cf2:	8c e0       	ldi	r24, 0x0C	; 12
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	93 cf       	rjmp	.-218    	; 0xc1e <__stack+0x31f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cf8:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     cfa:	8c e0       	ldi	r24, 0x0C	; 12
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	30 cf       	rjmp	.-416    	; 0xb60 <__stack+0x261>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d00:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     d02:	8d e0       	ldi	r24, 0x0D	; 13
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	8b cf       	rjmp	.-234    	; 0xc1e <__stack+0x31f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d08:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     d0a:	8d e0       	ldi	r24, 0x0D	; 13
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	28 cf       	rjmp	.-432    	; 0xb60 <__stack+0x261>

00000d10 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     d10:	1f 92       	push	r1
     d12:	0f 92       	push	r0
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	0f 92       	push	r0
     d18:	11 24       	eor	r1, r1
     d1a:	2f 93       	push	r18
     d1c:	3f 93       	push	r19
     d1e:	4f 93       	push	r20
     d20:	5f 93       	push	r21
     d22:	6f 93       	push	r22
     d24:	7f 93       	push	r23
     d26:	8f 93       	push	r24
     d28:	9f 93       	push	r25
     d2a:	af 93       	push	r26
     d2c:	bf 93       	push	r27
     d2e:	ef 93       	push	r30
     d30:	ff 93       	push	r31
    tx_clock += tx_increment;
     d32:	20 91 57 01 	lds	r18, 0x0157
     d36:	30 91 58 01 	lds	r19, 0x0158
     d3a:	80 91 55 01 	lds	r24, 0x0155
     d3e:	90 91 56 01 	lds	r25, 0x0156
     d42:	82 0f       	add	r24, r18
     d44:	93 1f       	adc	r25, r19
     d46:	90 93 58 01 	sts	0x0158, r25
     d4a:	80 93 57 01 	sts	0x0157, r24
    tx_increment = 0xFF;
     d4e:	8f ef       	ldi	r24, 0xFF	; 255
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	90 93 56 01 	sts	0x0156, r25
     d56:	80 93 55 01 	sts	0x0155, r24
    OCR0A = tx_increment;
     d5a:	8f ef       	ldi	r24, 0xFF	; 255
     d5c:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     d5e:	80 91 33 01 	lds	r24, 0x0133
     d62:	90 91 34 01 	lds	r25, 0x0134
     d66:	a0 91 35 01 	lds	r26, 0x0135
     d6a:	b0 91 36 01 	lds	r27, 0x0136
     d6e:	01 96       	adiw	r24, 0x01	; 1
     d70:	a1 1d       	adc	r26, r1
     d72:	b1 1d       	adc	r27, r1
     d74:	80 93 33 01 	sts	0x0133, r24
     d78:	90 93 34 01 	sts	0x0134, r25
     d7c:	a0 93 35 01 	sts	0x0135, r26
     d80:	b0 93 36 01 	sts	0x0136, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     d84:	80 91 37 01 	lds	r24, 0x0137
     d88:	81 11       	cpse	r24, r1
     d8a:	0f c0       	rjmp	.+30     	; 0xdaa <__vector_14+0x9a>
     d8c:	80 91 66 01 	lds	r24, 0x0166
     d90:	90 91 67 01 	lds	r25, 0x0167
     d94:	20 91 57 01 	lds	r18, 0x0157
     d98:	30 91 58 01 	lds	r19, 0x0158
     d9c:	82 17       	cp	r24, r18
     d9e:	93 07       	cpc	r25, r19
     da0:	20 f4       	brcc	.+8      	; 0xdaa <__vector_14+0x9a>
     da2:	80 91 0f 01 	lds	r24, 0x010F
     da6:	84 30       	cpi	r24, 0x04	; 4
     da8:	89 f0       	breq	.+34     	; 0xdcc <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     daa:	ff 91       	pop	r31
     dac:	ef 91       	pop	r30
     dae:	bf 91       	pop	r27
     db0:	af 91       	pop	r26
     db2:	9f 91       	pop	r25
     db4:	8f 91       	pop	r24
     db6:	7f 91       	pop	r23
     db8:	6f 91       	pop	r22
     dba:	5f 91       	pop	r21
     dbc:	4f 91       	pop	r20
     dbe:	3f 91       	pop	r19
     dc0:	2f 91       	pop	r18
     dc2:	0f 90       	pop	r0
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	0f 90       	pop	r0
     dc8:	1f 90       	pop	r1
     dca:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     dcc:	e0 91 03 01 	lds	r30, 0x0103
     dd0:	f0 91 04 01 	lds	r31, 0x0104
     dd4:	09 95       	icall
        if (msg) {
     dd6:	00 97       	sbiw	r24, 0x00	; 0
     dd8:	41 f3       	breq	.-48     	; 0xdaa <__vector_14+0x9a>
            if (message_send(msg)) {
     dda:	0e 94 a7 09 	call	0x134e	; 0x134e <message_send>
     dde:	81 11       	cpse	r24, r1
     de0:	09 c0       	rjmp	.+18     	; 0xdf4 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     de2:	0e 94 ce 0c 	call	0x199c	; 0x199c <rand>
     de6:	99 27       	eor	r25, r25
     de8:	90 93 56 01 	sts	0x0156, r25
     dec:	80 93 55 01 	sts	0x0155, r24
                OCR0A = tx_increment;
     df0:	87 bd       	out	0x27, r24	; 39
     df2:	db cf       	rjmp	.-74     	; 0xdaa <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     df4:	e0 91 01 01 	lds	r30, 0x0101
     df8:	f0 91 02 01 	lds	r31, 0x0102
     dfc:	09 95       	icall
                tx_clock = 0;
     dfe:	10 92 58 01 	sts	0x0158, r1
     e02:	10 92 57 01 	sts	0x0157, r1
     e06:	d1 cf       	rjmp	.-94     	; 0xdaa <__vector_14+0x9a>

00000e08 <set_color>:
}

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     e08:	80 ff       	sbrs	r24, 0
     e0a:	11 c0       	rjmp	.+34     	; 0xe2e <set_color+0x26>
        DDRD |= (1<<5);
     e0c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     e0e:	81 ff       	sbrs	r24, 1
     e10:	11 c0       	rjmp	.+34     	; 0xe34 <set_color+0x2c>
        DDRD |= (1<<4);
     e12:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     e14:	82 ff       	sbrs	r24, 2
     e16:	11 c0       	rjmp	.+34     	; 0xe3a <set_color+0x32>
        DDRC |= (1<<3);
     e18:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     e1a:	83 ff       	sbrs	r24, 3
     e1c:	11 c0       	rjmp	.+34     	; 0xe40 <set_color+0x38>
        DDRC |= (1<<2);
     e1e:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     e20:	84 ff       	sbrs	r24, 4
     e22:	11 c0       	rjmp	.+34     	; 0xe46 <set_color+0x3e>
        DDRC |= (1<<5);
     e24:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     e26:	85 fd       	sbrc	r24, 5
     e28:	11 c0       	rjmp	.+34     	; 0xe4c <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     e2a:	3c 98       	cbi	0x07, 4	; 7
     e2c:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     e2e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     e30:	81 fd       	sbrc	r24, 1
     e32:	ef cf       	rjmp	.-34     	; 0xe12 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     e34:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     e36:	82 fd       	sbrc	r24, 2
     e38:	ef cf       	rjmp	.-34     	; 0xe18 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     e3a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     e3c:	83 fd       	sbrc	r24, 3
     e3e:	ef cf       	rjmp	.-34     	; 0xe1e <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     e40:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     e42:	84 fd       	sbrc	r24, 4
     e44:	ef cf       	rjmp	.-34     	; 0xe24 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     e46:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     e48:	85 ff       	sbrs	r24, 5
     e4a:	ef cf       	rjmp	.-34     	; 0xe2a <set_color+0x22>
        DDRC |= (1<<4);
     e4c:	3c 9a       	sbi	0x07, 4	; 7
     e4e:	08 95       	ret

00000e50 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     e50:	1f 92       	push	r1
     e52:	0f 92       	push	r0
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	0f 92       	push	r0
     e58:	11 24       	eor	r1, r1
     e5a:	8f 93       	push	r24
     e5c:	9f 93       	push	r25
    rx_timer_off();
     e5e:	10 92 81 00 	sts	0x0081, r1
     e62:	10 92 85 00 	sts	0x0085, r1
     e66:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	80 93 10 01 	sts	0x0110, r24
    rx_leadingbyte = 1;
     e70:	80 93 54 01 	sts	0x0154, r24
    rx_busy = 0;
     e74:	10 92 37 01 	sts	0x0137, r1
    adc_trigger_high_gain();
     e78:	10 92 7c 00 	sts	0x007C, r1
     e7c:	93 ea       	ldi	r25, 0xA3	; 163
     e7e:	90 93 7a 00 	sts	0x007A, r25
     e82:	80 93 7b 00 	sts	0x007B, r24
}
     e86:	9f 91       	pop	r25
     e88:	8f 91       	pop	r24
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     e94:	1f 92       	push	r1
     e96:	0f 92       	push	r0
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	0f 92       	push	r0
     e9c:	11 24       	eor	r1, r1
     e9e:	2f 93       	push	r18
     ea0:	3f 93       	push	r19
     ea2:	4f 93       	push	r20
     ea4:	5f 93       	push	r21
     ea6:	6f 93       	push	r22
     ea8:	7f 93       	push	r23
     eaa:	8f 93       	push	r24
     eac:	9f 93       	push	r25
     eae:	af 93       	push	r26
     eb0:	bf 93       	push	r27
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	ef 93       	push	r30
     eb8:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     eba:	20 91 84 00 	lds	r18, 0x0084
     ebe:	30 91 85 00 	lds	r19, 0x0085
    }
}

/*ISIR*/
static inline void estimate_direction(){
	uint8_t pb = PORTB;
     ec2:	85 b1       	in	r24, 0x05	; 5

	switch(pb & 0x46){							  // see PB1, PB2, PB6
     ec4:	86 74       	andi	r24, 0x46	; 70
     ec6:	86 30       	cpi	r24, 0x06	; 6
     ec8:	09 f4       	brne	.+2      	; 0xecc <__vector_23+0x38>
     eca:	fa c0       	rjmp	.+500    	; 0x10c0 <__vector_23+0x22c>
     ecc:	08 f4       	brcc	.+2      	; 0xed0 <__vector_23+0x3c>
     ece:	6c c0       	rjmp	.+216    	; 0xfa8 <__vector_23+0x114>
     ed0:	82 34       	cpi	r24, 0x42	; 66
     ed2:	09 f4       	brne	.+2      	; 0xed6 <__vector_23+0x42>
     ed4:	af c0       	rjmp	.+350    	; 0x1034 <__vector_23+0x1a0>
     ed6:	84 34       	cpi	r24, 0x44	; 68
     ed8:	09 f4       	brne	.+2      	; 0xedc <__vector_23+0x48>
     eda:	ef c0       	rjmp	.+478    	; 0x10ba <__vector_23+0x226>
     edc:	80 34       	cpi	r24, 0x40	; 64
     ede:	09 f4       	brne	.+2      	; 0xee2 <__vector_23+0x4e>
     ee0:	ad c0       	rjmp	.+346    	; 0x103c <__vector_23+0x1a8>
			break;
		case 0x44:
			rx_direction = NORTH;
			break;
		default:
			rx_direction = NONE;
     ee2:	86 e0       	ldi	r24, 0x06	; 6
     ee4:	80 93 6b 01 	sts	0x016B, r24
ISR(ANALOG_COMP_vect) {
    uint16_t timer = TCNT1;
    /*ISIR*/
	estimate_direction();

    rx_busy = 1;
     ee8:	41 e0       	ldi	r20, 0x01	; 1
     eea:	40 93 37 01 	sts	0x0137, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     eee:	80 91 10 01 	lds	r24, 0x0110
     ef2:	81 11       	cpse	r24, r1
     ef4:	6a c0       	rjmp	.+212    	; 0xfca <__vector_23+0x136>
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     ef6:	c9 01       	movw	r24, r18
     ef8:	87 58       	subi	r24, 0x87	; 135
     efa:	91 09       	sbc	r25, r1
     efc:	84 37       	cpi	r24, 0x74	; 116
     efe:	99 40       	sbci	r25, 0x09	; 9
     f00:	08 f0       	brcs	.+2      	; 0xf04 <__vector_23+0x70>
     f02:	c3 c0       	rjmp	.+390    	; 0x108a <__vector_23+0x1f6>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     f04:	26 58       	subi	r18, 0x86	; 134
     f06:	31 09       	sbc	r19, r1
     f08:	a4 ef       	ldi	r26, 0xF4	; 244
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	0e 94 4f 0a 	call	0x149e	; 0x149e <__umulhisi3>
     f10:	aa 27       	eor	r26, r26
     f12:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
     f14:	88 30       	cpi	r24, 0x08	; 8
     f16:	91 05       	cpc	r25, r1
     f18:	a1 05       	cpc	r26, r1
     f1a:	b1 05       	cpc	r27, r1
     f1c:	08 f4       	brcc	.+2      	; 0xf20 <__vector_23+0x8c>
     f1e:	d4 c0       	rjmp	.+424    	; 0x10c8 <__vector_23+0x234>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     f20:	40 93 10 01 	sts	0x0110, r20
                if (rx_leadingbyte) {
     f24:	80 91 54 01 	lds	r24, 0x0154
     f28:	81 11       	cpse	r24, r1
     f2a:	8c c0       	rjmp	.+280    	; 0x1044 <__vector_23+0x1b0>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     f2c:	80 91 2e 01 	lds	r24, 0x012E
     f30:	e8 2f       	mov	r30, r24
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	e6 5a       	subi	r30, 0xA6	; 166
     f36:	fe 4f       	sbci	r31, 0xFE	; 254
     f38:	90 91 68 01 	lds	r25, 0x0168
     f3c:	90 83       	st	Z, r25
                    rx_byteindex++;
     f3e:	8f 5f       	subi	r24, 0xFF	; 255
     f40:	80 93 2e 01 	sts	0x012E, r24
                    if (rx_byteindex == sizeof(message_t)) {
     f44:	8c 30       	cpi	r24, 0x0C	; 12
     f46:	09 f0       	breq	.+2      	; 0xf4a <__vector_23+0xb6>
     f48:	62 c0       	rjmp	.+196    	; 0x100e <__vector_23+0x17a>
                        rx_timer_off();
     f4a:	10 92 81 00 	sts	0x0081, r1
     f4e:	10 92 85 00 	sts	0x0085, r1
     f52:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
     f56:	40 93 54 01 	sts	0x0154, r20
                        rx_busy = 0;
     f5a:	10 92 37 01 	sts	0x0137, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
     f5e:	c0 91 64 01 	lds	r28, 0x0164
     f62:	d0 91 65 01 	lds	r29, 0x0165
     f66:	8a e5       	ldi	r24, 0x5A	; 90
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	0e 94 8b 09 	call	0x1316	; 0x1316 <message_crc>
     f6e:	c8 17       	cp	r28, r24
     f70:	d9 07       	cpc	r29, r25
     f72:	09 f0       	breq	.+2      	; 0xf76 <__vector_23+0xe2>
     f74:	4c c0       	rjmp	.+152    	; 0x100e <__vector_23+0x17a>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     f76:	80 91 63 01 	lds	r24, 0x0163
     f7a:	87 ff       	sbrs	r24, 7
     f7c:	b9 c0       	rjmp	.+370    	; 0x10f0 <__vector_23+0x25c>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     f7e:	98 e7       	ldi	r25, 0x78	; 120
     f80:	98 0f       	add	r25, r24
     f82:	93 30       	cpi	r25, 0x03	; 3
     f84:	30 f0       	brcs	.+12     	; 0xf92 <__vector_23+0xfe>
        motors_off();
     f86:	53 98       	cbi	0x0a, 3	; 10
     f88:	23 98       	cbi	0x04, 3	; 4
     f8a:	10 92 b4 00 	sts	0x00B4, r1
     f8e:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	fc 01       	movw	r30, r24
     f96:	e0 58       	subi	r30, 0x80	; 128
     f98:	f1 09       	sbc	r31, r1
     f9a:	eb 30       	cpi	r30, 0x0B	; 11
     f9c:	f1 05       	cpc	r31, r1
     f9e:	b8 f5       	brcc	.+110    	; 0x100e <__vector_23+0x17a>
     fa0:	e5 5c       	subi	r30, 0xC5	; 197
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
     fa4:	0c 94 49 0a 	jmp	0x1492	; 0x1492 <__tablejump2__>

/*ISIR*/
static inline void estimate_direction(){
	uint8_t pb = PORTB;

	switch(pb & 0x46){							  // see PB1, PB2, PB6
     fa8:	82 30       	cpi	r24, 0x02	; 2
     faa:	09 f4       	brne	.+2      	; 0xfae <__vector_23+0x11a>
     fac:	82 c0       	rjmp	.+260    	; 0x10b2 <__vector_23+0x21e>
     fae:	84 30       	cpi	r24, 0x04	; 4
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <__vector_23+0x120>
     fb2:	97 cf       	rjmp	.-210    	; 0xee2 <__vector_23+0x4e>
		case 0x02:
			rx_direction = SOUTH;
			break;
		case 0x04:
			rx_direction = NORTH_EAST;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	80 93 6b 01 	sts	0x016B, r24
ISR(ANALOG_COMP_vect) {
    uint16_t timer = TCNT1;
    /*ISIR*/
	estimate_direction();

    rx_busy = 1;
     fba:	41 e0       	ldi	r20, 0x01	; 1
     fbc:	40 93 37 01 	sts	0x0137, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     fc0:	80 91 10 01 	lds	r24, 0x0110
     fc4:	88 23       	and	r24, r24
     fc6:	09 f4       	brne	.+2      	; 0xfca <__vector_23+0x136>
     fc8:	96 cf       	rjmp	.-212    	; 0xef6 <__vector_23+0x62>
        rx_timer_on();
     fca:	10 92 85 00 	sts	0x0085, r1
     fce:	10 92 84 00 	sts	0x0084, r1
     fd2:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
     fd6:	10 92 68 01 	sts	0x0168, r1
        rx_leadingbit = 0;
     fda:	10 92 10 01 	sts	0x0110, r1
        if (rx_leadingbyte) {
     fde:	80 91 54 01 	lds	r24, 0x0154
     fe2:	88 23       	and	r24, r24
     fe4:	a1 f0       	breq	.+40     	; 0x100e <__vector_23+0x17a>
            adc_finish_conversion();
     fe6:	80 91 7a 00 	lds	r24, 0x007A
     fea:	86 fd       	sbrc	r24, 6
     fec:	fc cf       	rjmp	.-8      	; 0xfe6 <__vector_23+0x152>
            rx_dist.high_gain = ADCW;
     fee:	80 91 78 00 	lds	r24, 0x0078
     ff2:	90 91 79 00 	lds	r25, 0x0079
     ff6:	90 93 32 01 	sts	0x0132, r25
     ffa:	80 93 31 01 	sts	0x0131, r24
            adc_trigger_low_gain();
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	80 93 7c 00 	sts	0x007C, r24
    1004:	93 ea       	ldi	r25, 0xA3	; 163
    1006:	90 93 7a 00 	sts	0x007A, r25
    100a:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    100e:	ff 91       	pop	r31
    1010:	ef 91       	pop	r30
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	bf 91       	pop	r27
    1018:	af 91       	pop	r26
    101a:	9f 91       	pop	r25
    101c:	8f 91       	pop	r24
    101e:	7f 91       	pop	r23
    1020:	6f 91       	pop	r22
    1022:	5f 91       	pop	r21
    1024:	4f 91       	pop	r20
    1026:	3f 91       	pop	r19
    1028:	2f 91       	pop	r18
    102a:	0f 90       	pop	r0
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	0f 90       	pop	r0
    1030:	1f 90       	pop	r1
    1032:	18 95       	reti
			break;
		case 0x40:
			rx_direction = NORTH_WEST;
			break;
		case 0x42:
			rx_direction = SOUTH_WEST;
    1034:	84 e0       	ldi	r24, 0x04	; 4
    1036:	80 93 6b 01 	sts	0x016B, r24
    103a:	bf cf       	rjmp	.-130    	; 0xfba <__vector_23+0x126>
			break;
		case 0x06:
			rx_direction = SOUTH_EAST;
			break;
		case 0x40:
			rx_direction = NORTH_WEST;
    103c:	85 e0       	ldi	r24, 0x05	; 5
    103e:	80 93 6b 01 	sts	0x016B, r24
    1042:	bb cf       	rjmp	.-138    	; 0xfba <__vector_23+0x126>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1044:	80 91 7a 00 	lds	r24, 0x007A
    1048:	86 fd       	sbrc	r24, 6
    104a:	fc cf       	rjmp	.-8      	; 0x1044 <__vector_23+0x1b0>
                    rx_dist.low_gain = ADCW;
    104c:	80 91 78 00 	lds	r24, 0x0078
    1050:	90 91 79 00 	lds	r25, 0x0079
    1054:	90 93 30 01 	sts	0x0130, r25
    1058:	80 93 2f 01 	sts	0x012F, r24
                    adc_trigger_high_gain();
    105c:	10 92 7c 00 	sts	0x007C, r1
    1060:	83 ea       	ldi	r24, 0xA3	; 163
    1062:	80 93 7a 00 	sts	0x007A, r24
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    106c:	90 91 68 01 	lds	r25, 0x0168
    1070:	99 23       	and	r25, r25
    1072:	c9 f1       	breq	.+114    	; 0x10e6 <__vector_23+0x252>
                        rx_timer_off();
    1074:	10 92 81 00 	sts	0x0081, r1
    1078:	10 92 85 00 	sts	0x0085, r1
    107c:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1080:	80 93 54 01 	sts	0x0154, r24
                        rx_busy = 0;
    1084:	10 92 37 01 	sts	0x0137, r1
    1088:	c2 cf       	rjmp	.-124    	; 0x100e <__vector_23+0x17a>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    108a:	10 92 81 00 	sts	0x0081, r1
    108e:	10 92 85 00 	sts	0x0085, r1
    1092:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    1096:	40 93 10 01 	sts	0x0110, r20
            rx_leadingbyte = 1;
    109a:	40 93 54 01 	sts	0x0154, r20
            rx_busy = 0;
    109e:	10 92 37 01 	sts	0x0137, r1
            adc_trigger_high_gain();
    10a2:	10 92 7c 00 	sts	0x007C, r1
    10a6:	83 ea       	ldi	r24, 0xA3	; 163
    10a8:	80 93 7a 00 	sts	0x007A, r24
    10ac:	40 93 7b 00 	sts	0x007B, r20
    10b0:	ae cf       	rjmp	.-164    	; 0x100e <__vector_23+0x17a>
static inline void estimate_direction(){
	uint8_t pb = PORTB;

	switch(pb & 0x46){							  // see PB1, PB2, PB6
		case 0x02:
			rx_direction = SOUTH;
    10b2:	83 e0       	ldi	r24, 0x03	; 3
    10b4:	80 93 6b 01 	sts	0x016B, r24
    10b8:	80 cf       	rjmp	.-256    	; 0xfba <__vector_23+0x126>
			break;
		case 0x42:
			rx_direction = SOUTH_WEST;
			break;
		case 0x44:
			rx_direction = NORTH;
    10ba:	10 92 6b 01 	sts	0x016B, r1
    10be:	7d cf       	rjmp	.-262    	; 0xfba <__vector_23+0x126>
			break;
		case 0x04:
			rx_direction = NORTH_EAST;
			break;
		case 0x06:
			rx_direction = SOUTH_EAST;
    10c0:	82 e0       	ldi	r24, 0x02	; 2
    10c2:	80 93 6b 01 	sts	0x016B, r24
    10c6:	79 cf       	rjmp	.-270    	; 0xfba <__vector_23+0x126>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    10c8:	21 e0       	ldi	r18, 0x01	; 1
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	f9 01       	movw	r30, r18
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <__vector_23+0x240>
    10d0:	ee 0f       	add	r30, r30
    10d2:	ff 1f       	adc	r31, r31
    10d4:	8a 95       	dec	r24
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <__vector_23+0x23c>
    10d8:	cf 01       	movw	r24, r30
    10da:	90 91 68 01 	lds	r25, 0x0168
    10de:	89 2b       	or	r24, r25
    10e0:	80 93 68 01 	sts	0x0168, r24
    10e4:	94 cf       	rjmp	.-216    	; 0x100e <__vector_23+0x17a>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    10e6:	10 92 54 01 	sts	0x0154, r1
                        rx_byteindex = 0;
    10ea:	10 92 2e 01 	sts	0x012E, r1
    10ee:	8f cf       	rjmp	.-226    	; 0x100e <__vector_23+0x17a>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    10f0:	e0 91 05 01 	lds	r30, 0x0105
    10f4:	f0 91 06 01 	lds	r31, 0x0106
    10f8:	6f e2       	ldi	r22, 0x2F	; 47
    10fa:	71 e0       	ldi	r23, 0x01	; 1
    10fc:	8a e5       	ldi	r24, 0x5A	; 90
    10fe:	91 e0       	ldi	r25, 0x01	; 1
    1100:	09 95       	icall
    1102:	85 cf       	rjmp	.-246    	; 0x100e <__vector_23+0x17a>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1104:	80 91 5a 01 	lds	r24, 0x015A
    1108:	82 30       	cpi	r24, 0x02	; 2
    110a:	09 f4       	brne	.+2      	; 0x110e <__vector_23+0x27a>
    110c:	dd c0       	rjmp	.+442    	; 0x12c8 <__vector_23+0x434>
    110e:	08 f4       	brcc	.+2      	; 0x1112 <__vector_23+0x27e>
    1110:	ba c0       	rjmp	.+372    	; 0x1286 <__vector_23+0x3f2>
    1112:	83 30       	cpi	r24, 0x03	; 3
    1114:	09 f4       	brne	.+2      	; 0x1118 <__vector_23+0x284>
    1116:	c6 c0       	rjmp	.+396    	; 0x12a4 <__vector_23+0x410>
    1118:	84 30       	cpi	r24, 0x04	; 4
    111a:	09 f0       	breq	.+2      	; 0x111e <__vector_23+0x28a>
    111c:	b1 c0       	rjmp	.+354    	; 0x1280 <__vector_23+0x3ec>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    111e:	80 91 0d 01 	lds	r24, 0x010D
    1122:	90 91 60 01 	lds	r25, 0x0160
    1126:	83 30       	cpi	r24, 0x03	; 3
    1128:	09 f4       	brne	.+2      	; 0x112c <__vector_23+0x298>
    112a:	e3 c0       	rjmp	.+454    	; 0x12f2 <__vector_23+0x45e>
    112c:	80 91 5f 01 	lds	r24, 0x015F
                        prev_motion = MOVE_STOP;
    1130:	10 92 0e 01 	sts	0x010E, r1
                        cur_motion = MOVE_STRAIGHT;
    1134:	23 e0       	ldi	r18, 0x03	; 3
    1136:	20 93 0d 01 	sts	0x010D, r18
                        kilo_straight_left = calibmsg->straight_left;
    113a:	80 93 6c 01 	sts	0x016C, r24
                        kilo_straight_right = calibmsg->straight_right;
    113e:	90 93 6d 01 	sts	0x016D, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1142:	80 91 0f 01 	lds	r24, 0x010F
    1146:	86 30       	cpi	r24, 0x06	; 6
    1148:	09 f4       	brne	.+2      	; 0x114c <__vector_23+0x2b8>
    114a:	61 cf       	rjmp	.-318    	; 0x100e <__vector_23+0x17a>
                motors_on();
    114c:	53 9a       	sbi	0x0a, 3	; 10
    114e:	23 9a       	sbi	0x04, 3	; 4
    1150:	10 92 b4 00 	sts	0x00B4, r1
    1154:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    1158:	86 e0       	ldi	r24, 0x06	; 6
    115a:	80 93 0f 01 	sts	0x010F, r24
    115e:	57 cf       	rjmp	.-338    	; 0x100e <__vector_23+0x17a>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1160:	80 91 0f 01 	lds	r24, 0x010F
    1164:	86 30       	cpi	r24, 0x06	; 6
    1166:	99 f0       	breq	.+38     	; 0x118e <__vector_23+0x2fa>
                motors_on();
    1168:	53 9a       	sbi	0x0a, 3	; 10
    116a:	23 9a       	sbi	0x04, 3	; 4
    116c:	10 92 b4 00 	sts	0x00B4, r1
    1170:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1174:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1176:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1178:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    117a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    117c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    117e:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1180:	10 92 0d 01 	sts	0x010D, r1
    1184:	10 92 0e 01 	sts	0x010E, r1
                kilo_state = MOVING;
    1188:	86 e0       	ldi	r24, 0x06	; 6
    118a:	80 93 0f 01 	sts	0x010F, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	9c 01       	movw	r18, r24
    1194:	00 90 5a 01 	lds	r0, 0x015A
    1198:	02 c0       	rjmp	.+4      	; 0x119e <__vector_23+0x30a>
    119a:	22 0f       	add	r18, r18
    119c:	33 1f       	adc	r19, r19
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <__vector_23+0x306>
    11a2:	80 91 69 01 	lds	r24, 0x0169
    11a6:	90 91 6a 01 	lds	r25, 0x016A
    11aa:	82 23       	and	r24, r18
    11ac:	93 23       	and	r25, r19
    11ae:	89 2b       	or	r24, r25
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <__vector_23+0x320>
    11b2:	86 c0       	rjmp	.+268    	; 0x12c0 <__vector_23+0x42c>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    11b4:	10 92 0d 01 	sts	0x010D, r1
    11b8:	2a cf       	rjmp	.-428    	; 0x100e <__vector_23+0x17a>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	80 93 0f 01 	sts	0x010F, r24
    11c0:	26 cf       	rjmp	.-436    	; 0x100e <__vector_23+0x17a>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    11c2:	e0 e0       	ldi	r30, 0x00	; 0
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    11c8:	80 91 6e 00 	lds	r24, 0x006E
    11cc:	8d 7f       	andi	r24, 0xFD	; 253
    11ce:	80 93 6e 00 	sts	0x006E, r24
    11d2:	16 bc       	out	0x26, r1	; 38
            bootload();
    11d4:	e0 e0       	ldi	r30, 0x00	; 0
    11d6:	f0 e7       	ldi	r31, 0x70	; 112
    11d8:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    11da:	10 92 0f 01 	sts	0x010F, r1
    11de:	17 cf       	rjmp	.-466    	; 0x100e <__vector_23+0x17a>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    11e0:	82 e0       	ldi	r24, 0x02	; 2
    11e2:	80 93 0f 01 	sts	0x010F, r24
    11e6:	13 cf       	rjmp	.-474    	; 0x100e <__vector_23+0x17a>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    11e8:	85 e0       	ldi	r24, 0x05	; 5
    11ea:	80 93 0f 01 	sts	0x010F, r24
    11ee:	0f cf       	rjmp	.-482    	; 0x100e <__vector_23+0x17a>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    11f0:	80 91 0f 01 	lds	r24, 0x010F
    11f4:	83 30       	cpi	r24, 0x03	; 3
    11f6:	09 f4       	brne	.+2      	; 0x11fa <__vector_23+0x366>
    11f8:	0a cf       	rjmp	.-492    	; 0x100e <__vector_23+0x17a>
    11fa:	80 91 0f 01 	lds	r24, 0x010F
    11fe:	84 30       	cpi	r24, 0x04	; 4
    1200:	09 f4       	brne	.+2      	; 0x1204 <__vector_23+0x370>
    1202:	05 cf       	rjmp	.-502    	; 0x100e <__vector_23+0x17a>
                motors_on();
    1204:	53 9a       	sbi	0x0a, 3	; 10
    1206:	23 9a       	sbi	0x04, 3	; 4
    1208:	10 92 b4 00 	sts	0x00B4, r1
    120c:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    1210:	83 e0       	ldi	r24, 0x03	; 3
    1212:	80 93 0f 01 	sts	0x010F, r24
    1216:	fb ce       	rjmp	.-522    	; 0x100e <__vector_23+0x17a>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1218:	80 91 0f 01 	lds	r24, 0x010F
    121c:	86 30       	cpi	r24, 0x06	; 6
    121e:	09 f0       	breq	.+2      	; 0x1222 <__vector_23+0x38e>
    1220:	f6 ce       	rjmp	.-532    	; 0x100e <__vector_23+0x17a>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1222:	60 91 69 01 	lds	r22, 0x0169
    1226:	80 eb       	ldi	r24, 0xB0	; 176
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    122e:	60 91 6a 01 	lds	r22, 0x016A
    1232:	81 eb       	ldi	r24, 0xB1	; 177
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    123a:	60 91 6e 01 	lds	r22, 0x016E
    123e:	85 e0       	ldi	r24, 0x05	; 5
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    1246:	60 91 59 01 	lds	r22, 0x0159
    124a:	89 e0       	ldi	r24, 0x09	; 9
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1252:	60 91 6c 01 	lds	r22, 0x016C
    1256:	8c e0       	ldi	r24, 0x0C	; 12
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    125e:	60 91 6d 01 	lds	r22, 0x016D
    1262:	84 e1       	ldi	r24, 0x14	; 20
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <eeprom_write_byte>
                        motors_off();
    126a:	53 98       	cbi	0x0a, 3	; 10
    126c:	23 98       	cbi	0x04, 3	; 4
    126e:	10 92 b4 00 	sts	0x00B4, r1
    1272:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	80 93 0f 01 	sts	0x010F, r24
    127c:	80 91 5a 01 	lds	r24, 0x015A
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1280:	81 11       	cpse	r24, r1
    1282:	5f cf       	rjmp	.-322    	; 0x1142 <__vector_23+0x2ae>
    1284:	c4 ce       	rjmp	.-632    	; 0x100e <__vector_23+0x17a>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1286:	88 23       	and	r24, r24
    1288:	39 f2       	breq	.-114    	; 0x1218 <__vector_23+0x384>
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	c9 f7       	brne	.-14     	; 0x1280 <__vector_23+0x3ec>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    128e:	80 91 5b 01 	lds	r24, 0x015B
    1292:	90 91 5c 01 	lds	r25, 0x015C
    1296:	90 93 6a 01 	sts	0x016A, r25
    129a:	80 93 69 01 	sts	0x0169, r24
                    cur_motion = MOVE_STOP;
    129e:	10 92 0d 01 	sts	0x010D, r1
    12a2:	4f cf       	rjmp	.-354    	; 0x1142 <__vector_23+0x2ae>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    12a4:	80 91 0d 01 	lds	r24, 0x010D
    12a8:	82 30       	cpi	r24, 0x02	; 2
    12aa:	71 f1       	breq	.+92     	; 0x1308 <__vector_23+0x474>
    12ac:	80 91 5e 01 	lds	r24, 0x015E
                        prev_motion = MOVE_STOP;
    12b0:	10 92 0e 01 	sts	0x010E, r1
                        cur_motion = MOVE_RIGHT;
    12b4:	92 e0       	ldi	r25, 0x02	; 2
    12b6:	90 93 0d 01 	sts	0x010D, r25
                        kilo_turn_right = calibmsg->turn_right;
    12ba:	80 93 59 01 	sts	0x0159, r24
    12be:	41 cf       	rjmp	.-382    	; 0x1142 <__vector_23+0x2ae>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	80 93 0d 01 	sts	0x010D, r24
    12c6:	a3 ce       	rjmp	.-698    	; 0x100e <__vector_23+0x17a>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    12c8:	80 91 0d 01 	lds	r24, 0x010D
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	51 f0       	breq	.+20     	; 0x12e4 <__vector_23+0x450>
    12d0:	80 91 5d 01 	lds	r24, 0x015D
                        prev_motion = MOVE_STOP;
    12d4:	10 92 0e 01 	sts	0x010E, r1
                        cur_motion = MOVE_LEFT;
    12d8:	91 e0       	ldi	r25, 0x01	; 1
    12da:	90 93 0d 01 	sts	0x010D, r25
                        kilo_turn_left = calibmsg->turn_left;
    12de:	80 93 6e 01 	sts	0x016E, r24
    12e2:	2f cf       	rjmp	.-418    	; 0x1142 <__vector_23+0x2ae>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    12e4:	80 91 5d 01 	lds	r24, 0x015D
    12e8:	90 91 6e 01 	lds	r25, 0x016E
    12ec:	89 13       	cpse	r24, r25
    12ee:	f2 cf       	rjmp	.-28     	; 0x12d4 <__vector_23+0x440>
    12f0:	28 cf       	rjmp	.-432    	; 0x1142 <__vector_23+0x2ae>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    12f2:	80 91 6d 01 	lds	r24, 0x016D
    12f6:	98 13       	cpse	r25, r24
    12f8:	19 cf       	rjmp	.-462    	; 0x112c <__vector_23+0x298>
    12fa:	80 91 5f 01 	lds	r24, 0x015F
    12fe:	20 91 6c 01 	lds	r18, 0x016C
    1302:	82 13       	cpse	r24, r18
    1304:	15 cf       	rjmp	.-470    	; 0x1130 <__vector_23+0x29c>
    1306:	1d cf       	rjmp	.-454    	; 0x1142 <__vector_23+0x2ae>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1308:	80 91 5e 01 	lds	r24, 0x015E
    130c:	90 91 59 01 	lds	r25, 0x0159
    1310:	89 13       	cpse	r24, r25
    1312:	ce cf       	rjmp	.-100    	; 0x12b0 <__vector_23+0x41c>
    1314:	16 cf       	rjmp	.-468    	; 0x1142 <__vector_23+0x2ae>

00001316 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1316:	fc 01       	movw	r30, r24
    1318:	ac 01       	movw	r20, r24
    131a:	46 5f       	subi	r20, 0xF6	; 246
    131c:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    131e:	8f ef       	ldi	r24, 0xFF	; 255
    1320:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1322:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1324:	82 27       	eor	r24, r18
    1326:	08 2e       	mov	r0, r24
    1328:	82 95       	swap	r24
    132a:	80 7f       	andi	r24, 0xF0	; 240
    132c:	80 25       	eor	r24, r0
    132e:	09 2e       	mov	r0, r25
    1330:	98 2f       	mov	r25, r24
    1332:	82 95       	swap	r24
    1334:	8f 70       	andi	r24, 0x0F	; 15
    1336:	08 26       	eor	r0, r24
    1338:	86 95       	lsr	r24
    133a:	98 27       	eor	r25, r24
    133c:	89 27       	eor	r24, r25
    133e:	88 0f       	add	r24, r24
    1340:	88 0f       	add	r24, r24
    1342:	88 0f       	add	r24, r24
    1344:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1346:	e4 17       	cp	r30, r20
    1348:	f5 07       	cpc	r31, r21
    134a:	59 f7       	brne	.-42     	; 0x1322 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    134c:	08 95       	ret

0000134e <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    134e:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1350:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1352:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1354:	20 91 2d 01 	lds	r18, 0x012D
    or tmpreg1, ddrreg
    1358:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    135a:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    135c:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    135e:	30 91 2d 01 	lds	r19, 0x012D
    1362:	20 30       	cpi	r18, 0x00	; 0
    1364:	29 f0       	breq	.+10     	; 0x1370 <message_send+0x22>
    1366:	00 00       	nop
    1368:	25 b1       	in	r18, 0x05	; 5
    136a:	23 2b       	or	r18, r19
    136c:	25 b9       	out	0x05, r18	; 5
    136e:	04 c0       	rjmp	.+8      	; 0x1378 <message_send+0x2a>
    1370:	00 00       	nop
    1372:	00 00       	nop
    1374:	00 00       	nop
    1376:	00 c0       	rjmp	.+0      	; 0x1378 <message_send+0x2a>
    1378:	00 00       	nop
    137a:	00 00       	nop
    137c:	00 00       	nop
    137e:	30 95       	com	r19
    1380:	25 b1       	in	r18, 0x05	; 5
    1382:	23 23       	and	r18, r19
    1384:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1386:	2e ea       	ldi	r18, 0xAE	; 174
    1388:	2a 95       	dec	r18
    138a:	f1 f7       	brne	.-4      	; 0x1388 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    138c:	2b ee       	ldi	r18, 0xEB	; 235

0000138e <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    138e:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1390:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1392:	0a c0       	rjmp	.+20     	; 0x13a8 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1394:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1396:	30 91 2d 01 	lds	r19, 0x012D
    com tmpreg2
    139a:	30 95       	com	r19
    in tmpreg1, IR_PORT
    139c:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    139e:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    13a0:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    13a2:	0f be       	out	0x3f, r0	; 63
    return 0
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	08 95       	ret

000013a8 <nocollision>:
nocollision:
    nop
    13a8:	00 00       	nop
    dec tmpreg1
    13aa:	2a 95       	dec	r18
    brne checkcollision
    13ac:	81 f7       	brne	.-32     	; 0x138e <checkcollision>

    ldi tmpreg1, 0x01
    13ae:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    13b0:	30 91 2d 01 	lds	r19, 0x012D
    13b4:	20 30       	cpi	r18, 0x00	; 0
    13b6:	29 f0       	breq	.+10     	; 0x13c2 <nocollision+0x1a>
    13b8:	00 00       	nop
    13ba:	25 b1       	in	r18, 0x05	; 5
    13bc:	23 2b       	or	r18, r19
    13be:	25 b9       	out	0x05, r18	; 5
    13c0:	04 c0       	rjmp	.+8      	; 0x13ca <nocollision+0x22>
    13c2:	00 00       	nop
    13c4:	00 00       	nop
    13c6:	00 00       	nop
    13c8:	00 c0       	rjmp	.+0      	; 0x13ca <nocollision+0x22>
    13ca:	00 00       	nop
    13cc:	00 00       	nop
    13ce:	00 00       	nop
    13d0:	30 95       	com	r19
    13d2:	25 b1       	in	r18, 0x05	; 5
    13d4:	23 23       	and	r18, r19
    13d6:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    13d8:	00 00       	nop
    13da:	24 e5       	ldi	r18, 0x54	; 84
    13dc:	2a 95       	dec	r18
    13de:	f1 f7       	brne	.-4      	; 0x13dc <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    13e0:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    13e2:	8c e0       	ldi	r24, 0x0C	; 12

000013e4 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    13e4:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    13e8:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    13ea:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    13ec:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    13ee:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    13f0:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    13f2:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    13f4:	50 e0       	ldi	r21, 0x00	; 0

000013f6 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    13f6:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    13f8:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    13fa:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    13fc:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    13fe:	30 91 2d 01 	lds	r19, 0x012D
    1402:	20 30       	cpi	r18, 0x00	; 0
    1404:	29 f0       	breq	.+10     	; 0x1410 <sendbit+0x1a>
    1406:	00 00       	nop
    1408:	25 b1       	in	r18, 0x05	; 5
    140a:	23 2b       	or	r18, r19
    140c:	25 b9       	out	0x05, r18	; 5
    140e:	04 c0       	rjmp	.+8      	; 0x1418 <sendbit+0x22>
    1410:	00 00       	nop
    1412:	00 00       	nop
    1414:	00 00       	nop
    1416:	00 c0       	rjmp	.+0      	; 0x1418 <sendbit+0x22>
    1418:	00 00       	nop
    141a:	00 00       	nop
    141c:	00 00       	nop
    141e:	30 95       	com	r19
    1420:	25 b1       	in	r18, 0x05	; 5
    1422:	23 23       	and	r18, r19
    1424:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1426:	00 00       	nop
    1428:	21 e5       	ldi	r18, 0x51	; 81
    142a:	2a 95       	dec	r18
    142c:	f1 f7       	brne	.-4      	; 0x142a <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    142e:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1430:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1432:	9a 95       	dec	r25
    brne sendbit
    1434:	01 f7       	brne	.-64     	; 0x13f6 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1436:	8a 95       	dec	r24
    brne sendbyte
    1438:	a9 f6       	brne	.-86     	; 0x13e4 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    143a:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    143c:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    143e:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1440:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1442:	30 91 2d 01 	lds	r19, 0x012D
    com tmpreg2
    1446:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1448:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    144a:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    144c:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    144e:	0f be       	out	0x3f, r0	; 63
    return 1
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	08 95       	ret

00001454 <main>:
}

int main() {
    kilo_init();
    1454:	0e 94 7e 00 	call	0xfc	; 0xfc <kilo_init>
    kilo_start(setup, loop);
    1458:	62 e7       	ldi	r22, 0x72	; 114
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	81 e7       	ldi	r24, 0x71	; 113
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0e 94 7d 01 	call	0x2fa	; 0x2fa <kilo_start>

    return 0;
}
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	08 95       	ret

0000146a <__divmodhi4>:
    146a:	97 fb       	bst	r25, 7
    146c:	07 2e       	mov	r0, r23
    146e:	16 f4       	brtc	.+4      	; 0x1474 <__divmodhi4+0xa>
    1470:	00 94       	com	r0
    1472:	07 d0       	rcall	.+14     	; 0x1482 <__divmodhi4_neg1>
    1474:	77 fd       	sbrc	r23, 7
    1476:	09 d0       	rcall	.+18     	; 0x148a <__divmodhi4_neg2>
    1478:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__udivmodhi4>
    147c:	07 fc       	sbrc	r0, 7
    147e:	05 d0       	rcall	.+10     	; 0x148a <__divmodhi4_neg2>
    1480:	3e f4       	brtc	.+14     	; 0x1490 <__divmodhi4_exit>

00001482 <__divmodhi4_neg1>:
    1482:	90 95       	com	r25
    1484:	81 95       	neg	r24
    1486:	9f 4f       	sbci	r25, 0xFF	; 255
    1488:	08 95       	ret

0000148a <__divmodhi4_neg2>:
    148a:	70 95       	com	r23
    148c:	61 95       	neg	r22
    148e:	7f 4f       	sbci	r23, 0xFF	; 255

00001490 <__divmodhi4_exit>:
    1490:	08 95       	ret

00001492 <__tablejump2__>:
    1492:	ee 0f       	add	r30, r30
    1494:	ff 1f       	adc	r31, r31
    1496:	05 90       	lpm	r0, Z+
    1498:	f4 91       	lpm	r31, Z
    149a:	e0 2d       	mov	r30, r0
    149c:	09 94       	ijmp

0000149e <__umulhisi3>:
    149e:	a2 9f       	mul	r26, r18
    14a0:	b0 01       	movw	r22, r0
    14a2:	b3 9f       	mul	r27, r19
    14a4:	c0 01       	movw	r24, r0
    14a6:	a3 9f       	mul	r26, r19
    14a8:	70 0d       	add	r23, r0
    14aa:	81 1d       	adc	r24, r1
    14ac:	11 24       	eor	r1, r1
    14ae:	91 1d       	adc	r25, r1
    14b0:	b2 9f       	mul	r27, r18
    14b2:	70 0d       	add	r23, r0
    14b4:	81 1d       	adc	r24, r1
    14b6:	11 24       	eor	r1, r1
    14b8:	91 1d       	adc	r25, r1
    14ba:	08 95       	ret

000014bc <__udivmodhi4>:
    14bc:	aa 1b       	sub	r26, r26
    14be:	bb 1b       	sub	r27, r27
    14c0:	51 e1       	ldi	r21, 0x11	; 17
    14c2:	07 c0       	rjmp	.+14     	; 0x14d2 <__udivmodhi4_ep>

000014c4 <__udivmodhi4_loop>:
    14c4:	aa 1f       	adc	r26, r26
    14c6:	bb 1f       	adc	r27, r27
    14c8:	a6 17       	cp	r26, r22
    14ca:	b7 07       	cpc	r27, r23
    14cc:	10 f0       	brcs	.+4      	; 0x14d2 <__udivmodhi4_ep>
    14ce:	a6 1b       	sub	r26, r22
    14d0:	b7 0b       	sbc	r27, r23

000014d2 <__udivmodhi4_ep>:
    14d2:	88 1f       	adc	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	5a 95       	dec	r21
    14d8:	a9 f7       	brne	.-22     	; 0x14c4 <__udivmodhi4_loop>
    14da:	80 95       	com	r24
    14dc:	90 95       	com	r25
    14de:	bc 01       	movw	r22, r24
    14e0:	cd 01       	movw	r24, r26
    14e2:	08 95       	ret

000014e4 <__subsf3>:
    14e4:	50 58       	subi	r21, 0x80	; 128

000014e6 <__addsf3>:
    14e6:	bb 27       	eor	r27, r27
    14e8:	aa 27       	eor	r26, r26
    14ea:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__addsf3x>
    14ee:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__fp_round>
    14f2:	0e 94 cd 0b 	call	0x179a	; 0x179a <__fp_pscA>
    14f6:	38 f0       	brcs	.+14     	; 0x1506 <__addsf3+0x20>
    14f8:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__fp_pscB>
    14fc:	20 f0       	brcs	.+8      	; 0x1506 <__addsf3+0x20>
    14fe:	39 f4       	brne	.+14     	; 0x150e <__addsf3+0x28>
    1500:	9f 3f       	cpi	r25, 0xFF	; 255
    1502:	19 f4       	brne	.+6      	; 0x150a <__addsf3+0x24>
    1504:	26 f4       	brtc	.+8      	; 0x150e <__addsf3+0x28>
    1506:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <__fp_nan>
    150a:	0e f4       	brtc	.+2      	; 0x150e <__addsf3+0x28>
    150c:	e0 95       	com	r30
    150e:	e7 fb       	bst	r30, 7
    1510:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <__fp_inf>

00001514 <__addsf3x>:
    1514:	e9 2f       	mov	r30, r25
    1516:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__fp_split3>
    151a:	58 f3       	brcs	.-42     	; 0x14f2 <__addsf3+0xc>
    151c:	ba 17       	cp	r27, r26
    151e:	62 07       	cpc	r22, r18
    1520:	73 07       	cpc	r23, r19
    1522:	84 07       	cpc	r24, r20
    1524:	95 07       	cpc	r25, r21
    1526:	20 f0       	brcs	.+8      	; 0x1530 <__addsf3x+0x1c>
    1528:	79 f4       	brne	.+30     	; 0x1548 <__addsf3x+0x34>
    152a:	a6 f5       	brtc	.+104    	; 0x1594 <__addsf3x+0x80>
    152c:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__fp_zero>
    1530:	0e f4       	brtc	.+2      	; 0x1534 <__addsf3x+0x20>
    1532:	e0 95       	com	r30
    1534:	0b 2e       	mov	r0, r27
    1536:	ba 2f       	mov	r27, r26
    1538:	a0 2d       	mov	r26, r0
    153a:	0b 01       	movw	r0, r22
    153c:	b9 01       	movw	r22, r18
    153e:	90 01       	movw	r18, r0
    1540:	0c 01       	movw	r0, r24
    1542:	ca 01       	movw	r24, r20
    1544:	a0 01       	movw	r20, r0
    1546:	11 24       	eor	r1, r1
    1548:	ff 27       	eor	r31, r31
    154a:	59 1b       	sub	r21, r25
    154c:	99 f0       	breq	.+38     	; 0x1574 <__addsf3x+0x60>
    154e:	59 3f       	cpi	r21, 0xF9	; 249
    1550:	50 f4       	brcc	.+20     	; 0x1566 <__addsf3x+0x52>
    1552:	50 3e       	cpi	r21, 0xE0	; 224
    1554:	68 f1       	brcs	.+90     	; 0x15b0 <__addsf3x+0x9c>
    1556:	1a 16       	cp	r1, r26
    1558:	f0 40       	sbci	r31, 0x00	; 0
    155a:	a2 2f       	mov	r26, r18
    155c:	23 2f       	mov	r18, r19
    155e:	34 2f       	mov	r19, r20
    1560:	44 27       	eor	r20, r20
    1562:	58 5f       	subi	r21, 0xF8	; 248
    1564:	f3 cf       	rjmp	.-26     	; 0x154c <__addsf3x+0x38>
    1566:	46 95       	lsr	r20
    1568:	37 95       	ror	r19
    156a:	27 95       	ror	r18
    156c:	a7 95       	ror	r26
    156e:	f0 40       	sbci	r31, 0x00	; 0
    1570:	53 95       	inc	r21
    1572:	c9 f7       	brne	.-14     	; 0x1566 <__addsf3x+0x52>
    1574:	7e f4       	brtc	.+30     	; 0x1594 <__addsf3x+0x80>
    1576:	1f 16       	cp	r1, r31
    1578:	ba 0b       	sbc	r27, r26
    157a:	62 0b       	sbc	r22, r18
    157c:	73 0b       	sbc	r23, r19
    157e:	84 0b       	sbc	r24, r20
    1580:	ba f0       	brmi	.+46     	; 0x15b0 <__addsf3x+0x9c>
    1582:	91 50       	subi	r25, 0x01	; 1
    1584:	a1 f0       	breq	.+40     	; 0x15ae <__addsf3x+0x9a>
    1586:	ff 0f       	add	r31, r31
    1588:	bb 1f       	adc	r27, r27
    158a:	66 1f       	adc	r22, r22
    158c:	77 1f       	adc	r23, r23
    158e:	88 1f       	adc	r24, r24
    1590:	c2 f7       	brpl	.-16     	; 0x1582 <__addsf3x+0x6e>
    1592:	0e c0       	rjmp	.+28     	; 0x15b0 <__addsf3x+0x9c>
    1594:	ba 0f       	add	r27, r26
    1596:	62 1f       	adc	r22, r18
    1598:	73 1f       	adc	r23, r19
    159a:	84 1f       	adc	r24, r20
    159c:	48 f4       	brcc	.+18     	; 0x15b0 <__addsf3x+0x9c>
    159e:	87 95       	ror	r24
    15a0:	77 95       	ror	r23
    15a2:	67 95       	ror	r22
    15a4:	b7 95       	ror	r27
    15a6:	f7 95       	ror	r31
    15a8:	9e 3f       	cpi	r25, 0xFE	; 254
    15aa:	08 f0       	brcs	.+2      	; 0x15ae <__addsf3x+0x9a>
    15ac:	b0 cf       	rjmp	.-160    	; 0x150e <__addsf3+0x28>
    15ae:	93 95       	inc	r25
    15b0:	88 0f       	add	r24, r24
    15b2:	08 f0       	brcs	.+2      	; 0x15b6 <__addsf3x+0xa2>
    15b4:	99 27       	eor	r25, r25
    15b6:	ee 0f       	add	r30, r30
    15b8:	97 95       	ror	r25
    15ba:	87 95       	ror	r24
    15bc:	08 95       	ret

000015be <__divsf3>:
    15be:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__divsf3x>
    15c2:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__fp_round>
    15c6:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__fp_pscB>
    15ca:	58 f0       	brcs	.+22     	; 0x15e2 <__divsf3+0x24>
    15cc:	0e 94 cd 0b 	call	0x179a	; 0x179a <__fp_pscA>
    15d0:	40 f0       	brcs	.+16     	; 0x15e2 <__divsf3+0x24>
    15d2:	29 f4       	brne	.+10     	; 0x15de <__divsf3+0x20>
    15d4:	5f 3f       	cpi	r21, 0xFF	; 255
    15d6:	29 f0       	breq	.+10     	; 0x15e2 <__divsf3+0x24>
    15d8:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <__fp_inf>
    15dc:	51 11       	cpse	r21, r1
    15de:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__fp_szero>
    15e2:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <__fp_nan>

000015e6 <__divsf3x>:
    15e6:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__fp_split3>
    15ea:	68 f3       	brcs	.-38     	; 0x15c6 <__divsf3+0x8>

000015ec <__divsf3_pse>:
    15ec:	99 23       	and	r25, r25
    15ee:	b1 f3       	breq	.-20     	; 0x15dc <__divsf3+0x1e>
    15f0:	55 23       	and	r21, r21
    15f2:	91 f3       	breq	.-28     	; 0x15d8 <__divsf3+0x1a>
    15f4:	95 1b       	sub	r25, r21
    15f6:	55 0b       	sbc	r21, r21
    15f8:	bb 27       	eor	r27, r27
    15fa:	aa 27       	eor	r26, r26
    15fc:	62 17       	cp	r22, r18
    15fe:	73 07       	cpc	r23, r19
    1600:	84 07       	cpc	r24, r20
    1602:	38 f0       	brcs	.+14     	; 0x1612 <__divsf3_pse+0x26>
    1604:	9f 5f       	subi	r25, 0xFF	; 255
    1606:	5f 4f       	sbci	r21, 0xFF	; 255
    1608:	22 0f       	add	r18, r18
    160a:	33 1f       	adc	r19, r19
    160c:	44 1f       	adc	r20, r20
    160e:	aa 1f       	adc	r26, r26
    1610:	a9 f3       	breq	.-22     	; 0x15fc <__divsf3_pse+0x10>
    1612:	35 d0       	rcall	.+106    	; 0x167e <__divsf3_pse+0x92>
    1614:	0e 2e       	mov	r0, r30
    1616:	3a f0       	brmi	.+14     	; 0x1626 <__divsf3_pse+0x3a>
    1618:	e0 e8       	ldi	r30, 0x80	; 128
    161a:	32 d0       	rcall	.+100    	; 0x1680 <__divsf3_pse+0x94>
    161c:	91 50       	subi	r25, 0x01	; 1
    161e:	50 40       	sbci	r21, 0x00	; 0
    1620:	e6 95       	lsr	r30
    1622:	00 1c       	adc	r0, r0
    1624:	ca f7       	brpl	.-14     	; 0x1618 <__divsf3_pse+0x2c>
    1626:	2b d0       	rcall	.+86     	; 0x167e <__divsf3_pse+0x92>
    1628:	fe 2f       	mov	r31, r30
    162a:	29 d0       	rcall	.+82     	; 0x167e <__divsf3_pse+0x92>
    162c:	66 0f       	add	r22, r22
    162e:	77 1f       	adc	r23, r23
    1630:	88 1f       	adc	r24, r24
    1632:	bb 1f       	adc	r27, r27
    1634:	26 17       	cp	r18, r22
    1636:	37 07       	cpc	r19, r23
    1638:	48 07       	cpc	r20, r24
    163a:	ab 07       	cpc	r26, r27
    163c:	b0 e8       	ldi	r27, 0x80	; 128
    163e:	09 f0       	breq	.+2      	; 0x1642 <__divsf3_pse+0x56>
    1640:	bb 0b       	sbc	r27, r27
    1642:	80 2d       	mov	r24, r0
    1644:	bf 01       	movw	r22, r30
    1646:	ff 27       	eor	r31, r31
    1648:	93 58       	subi	r25, 0x83	; 131
    164a:	5f 4f       	sbci	r21, 0xFF	; 255
    164c:	3a f0       	brmi	.+14     	; 0x165c <__divsf3_pse+0x70>
    164e:	9e 3f       	cpi	r25, 0xFE	; 254
    1650:	51 05       	cpc	r21, r1
    1652:	78 f0       	brcs	.+30     	; 0x1672 <__divsf3_pse+0x86>
    1654:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <__fp_inf>
    1658:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__fp_szero>
    165c:	5f 3f       	cpi	r21, 0xFF	; 255
    165e:	e4 f3       	brlt	.-8      	; 0x1658 <__divsf3_pse+0x6c>
    1660:	98 3e       	cpi	r25, 0xE8	; 232
    1662:	d4 f3       	brlt	.-12     	; 0x1658 <__divsf3_pse+0x6c>
    1664:	86 95       	lsr	r24
    1666:	77 95       	ror	r23
    1668:	67 95       	ror	r22
    166a:	b7 95       	ror	r27
    166c:	f7 95       	ror	r31
    166e:	9f 5f       	subi	r25, 0xFF	; 255
    1670:	c9 f7       	brne	.-14     	; 0x1664 <__divsf3_pse+0x78>
    1672:	88 0f       	add	r24, r24
    1674:	91 1d       	adc	r25, r1
    1676:	96 95       	lsr	r25
    1678:	87 95       	ror	r24
    167a:	97 f9       	bld	r25, 7
    167c:	08 95       	ret
    167e:	e1 e0       	ldi	r30, 0x01	; 1
    1680:	66 0f       	add	r22, r22
    1682:	77 1f       	adc	r23, r23
    1684:	88 1f       	adc	r24, r24
    1686:	bb 1f       	adc	r27, r27
    1688:	62 17       	cp	r22, r18
    168a:	73 07       	cpc	r23, r19
    168c:	84 07       	cpc	r24, r20
    168e:	ba 07       	cpc	r27, r26
    1690:	20 f0       	brcs	.+8      	; 0x169a <__divsf3_pse+0xae>
    1692:	62 1b       	sub	r22, r18
    1694:	73 0b       	sbc	r23, r19
    1696:	84 0b       	sbc	r24, r20
    1698:	ba 0b       	sbc	r27, r26
    169a:	ee 1f       	adc	r30, r30
    169c:	88 f7       	brcc	.-30     	; 0x1680 <__divsf3_pse+0x94>
    169e:	e0 95       	com	r30
    16a0:	08 95       	ret

000016a2 <__fixsfsi>:
    16a2:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__fixunssfsi>
    16a6:	68 94       	set
    16a8:	b1 11       	cpse	r27, r1
    16aa:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__fp_szero>
    16ae:	08 95       	ret

000016b0 <__fixunssfsi>:
    16b0:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__fp_splitA>
    16b4:	88 f0       	brcs	.+34     	; 0x16d8 <__fixunssfsi+0x28>
    16b6:	9f 57       	subi	r25, 0x7F	; 127
    16b8:	98 f0       	brcs	.+38     	; 0x16e0 <__fixunssfsi+0x30>
    16ba:	b9 2f       	mov	r27, r25
    16bc:	99 27       	eor	r25, r25
    16be:	b7 51       	subi	r27, 0x17	; 23
    16c0:	b0 f0       	brcs	.+44     	; 0x16ee <__fixunssfsi+0x3e>
    16c2:	e1 f0       	breq	.+56     	; 0x16fc <__fixunssfsi+0x4c>
    16c4:	66 0f       	add	r22, r22
    16c6:	77 1f       	adc	r23, r23
    16c8:	88 1f       	adc	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	1a f0       	brmi	.+6      	; 0x16d4 <__fixunssfsi+0x24>
    16ce:	ba 95       	dec	r27
    16d0:	c9 f7       	brne	.-14     	; 0x16c4 <__fixunssfsi+0x14>
    16d2:	14 c0       	rjmp	.+40     	; 0x16fc <__fixunssfsi+0x4c>
    16d4:	b1 30       	cpi	r27, 0x01	; 1
    16d6:	91 f0       	breq	.+36     	; 0x16fc <__fixunssfsi+0x4c>
    16d8:	0e 94 0e 0c 	call	0x181c	; 0x181c <__fp_zero>
    16dc:	b1 e0       	ldi	r27, 0x01	; 1
    16de:	08 95       	ret
    16e0:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__fp_zero>
    16e4:	67 2f       	mov	r22, r23
    16e6:	78 2f       	mov	r23, r24
    16e8:	88 27       	eor	r24, r24
    16ea:	b8 5f       	subi	r27, 0xF8	; 248
    16ec:	39 f0       	breq	.+14     	; 0x16fc <__fixunssfsi+0x4c>
    16ee:	b9 3f       	cpi	r27, 0xF9	; 249
    16f0:	cc f3       	brlt	.-14     	; 0x16e4 <__fixunssfsi+0x34>
    16f2:	86 95       	lsr	r24
    16f4:	77 95       	ror	r23
    16f6:	67 95       	ror	r22
    16f8:	b3 95       	inc	r27
    16fa:	d9 f7       	brne	.-10     	; 0x16f2 <__fixunssfsi+0x42>
    16fc:	3e f4       	brtc	.+14     	; 0x170c <__fixunssfsi+0x5c>
    16fe:	90 95       	com	r25
    1700:	80 95       	com	r24
    1702:	70 95       	com	r23
    1704:	61 95       	neg	r22
    1706:	7f 4f       	sbci	r23, 0xFF	; 255
    1708:	8f 4f       	sbci	r24, 0xFF	; 255
    170a:	9f 4f       	sbci	r25, 0xFF	; 255
    170c:	08 95       	ret

0000170e <__floatunsisf>:
    170e:	e8 94       	clt
    1710:	09 c0       	rjmp	.+18     	; 0x1724 <__floatsisf+0x12>

00001712 <__floatsisf>:
    1712:	97 fb       	bst	r25, 7
    1714:	3e f4       	brtc	.+14     	; 0x1724 <__floatsisf+0x12>
    1716:	90 95       	com	r25
    1718:	80 95       	com	r24
    171a:	70 95       	com	r23
    171c:	61 95       	neg	r22
    171e:	7f 4f       	sbci	r23, 0xFF	; 255
    1720:	8f 4f       	sbci	r24, 0xFF	; 255
    1722:	9f 4f       	sbci	r25, 0xFF	; 255
    1724:	99 23       	and	r25, r25
    1726:	a9 f0       	breq	.+42     	; 0x1752 <__floatsisf+0x40>
    1728:	f9 2f       	mov	r31, r25
    172a:	96 e9       	ldi	r25, 0x96	; 150
    172c:	bb 27       	eor	r27, r27
    172e:	93 95       	inc	r25
    1730:	f6 95       	lsr	r31
    1732:	87 95       	ror	r24
    1734:	77 95       	ror	r23
    1736:	67 95       	ror	r22
    1738:	b7 95       	ror	r27
    173a:	f1 11       	cpse	r31, r1
    173c:	f8 cf       	rjmp	.-16     	; 0x172e <__floatsisf+0x1c>
    173e:	fa f4       	brpl	.+62     	; 0x177e <__floatsisf+0x6c>
    1740:	bb 0f       	add	r27, r27
    1742:	11 f4       	brne	.+4      	; 0x1748 <__floatsisf+0x36>
    1744:	60 ff       	sbrs	r22, 0
    1746:	1b c0       	rjmp	.+54     	; 0x177e <__floatsisf+0x6c>
    1748:	6f 5f       	subi	r22, 0xFF	; 255
    174a:	7f 4f       	sbci	r23, 0xFF	; 255
    174c:	8f 4f       	sbci	r24, 0xFF	; 255
    174e:	9f 4f       	sbci	r25, 0xFF	; 255
    1750:	16 c0       	rjmp	.+44     	; 0x177e <__floatsisf+0x6c>
    1752:	88 23       	and	r24, r24
    1754:	11 f0       	breq	.+4      	; 0x175a <__floatsisf+0x48>
    1756:	96 e9       	ldi	r25, 0x96	; 150
    1758:	11 c0       	rjmp	.+34     	; 0x177c <__floatsisf+0x6a>
    175a:	77 23       	and	r23, r23
    175c:	21 f0       	breq	.+8      	; 0x1766 <__floatsisf+0x54>
    175e:	9e e8       	ldi	r25, 0x8E	; 142
    1760:	87 2f       	mov	r24, r23
    1762:	76 2f       	mov	r23, r22
    1764:	05 c0       	rjmp	.+10     	; 0x1770 <__floatsisf+0x5e>
    1766:	66 23       	and	r22, r22
    1768:	71 f0       	breq	.+28     	; 0x1786 <__floatsisf+0x74>
    176a:	96 e8       	ldi	r25, 0x86	; 134
    176c:	86 2f       	mov	r24, r22
    176e:	70 e0       	ldi	r23, 0x00	; 0
    1770:	60 e0       	ldi	r22, 0x00	; 0
    1772:	2a f0       	brmi	.+10     	; 0x177e <__floatsisf+0x6c>
    1774:	9a 95       	dec	r25
    1776:	66 0f       	add	r22, r22
    1778:	77 1f       	adc	r23, r23
    177a:	88 1f       	adc	r24, r24
    177c:	da f7       	brpl	.-10     	; 0x1774 <__floatsisf+0x62>
    177e:	88 0f       	add	r24, r24
    1780:	96 95       	lsr	r25
    1782:	87 95       	ror	r24
    1784:	97 f9       	bld	r25, 7
    1786:	08 95       	ret

00001788 <__fp_inf>:
    1788:	97 f9       	bld	r25, 7
    178a:	9f 67       	ori	r25, 0x7F	; 127
    178c:	80 e8       	ldi	r24, 0x80	; 128
    178e:	70 e0       	ldi	r23, 0x00	; 0
    1790:	60 e0       	ldi	r22, 0x00	; 0
    1792:	08 95       	ret

00001794 <__fp_nan>:
    1794:	9f ef       	ldi	r25, 0xFF	; 255
    1796:	80 ec       	ldi	r24, 0xC0	; 192
    1798:	08 95       	ret

0000179a <__fp_pscA>:
    179a:	00 24       	eor	r0, r0
    179c:	0a 94       	dec	r0
    179e:	16 16       	cp	r1, r22
    17a0:	17 06       	cpc	r1, r23
    17a2:	18 06       	cpc	r1, r24
    17a4:	09 06       	cpc	r0, r25
    17a6:	08 95       	ret

000017a8 <__fp_pscB>:
    17a8:	00 24       	eor	r0, r0
    17aa:	0a 94       	dec	r0
    17ac:	12 16       	cp	r1, r18
    17ae:	13 06       	cpc	r1, r19
    17b0:	14 06       	cpc	r1, r20
    17b2:	05 06       	cpc	r0, r21
    17b4:	08 95       	ret

000017b6 <__fp_round>:
    17b6:	09 2e       	mov	r0, r25
    17b8:	03 94       	inc	r0
    17ba:	00 0c       	add	r0, r0
    17bc:	11 f4       	brne	.+4      	; 0x17c2 <__fp_round+0xc>
    17be:	88 23       	and	r24, r24
    17c0:	52 f0       	brmi	.+20     	; 0x17d6 <__fp_round+0x20>
    17c2:	bb 0f       	add	r27, r27
    17c4:	40 f4       	brcc	.+16     	; 0x17d6 <__fp_round+0x20>
    17c6:	bf 2b       	or	r27, r31
    17c8:	11 f4       	brne	.+4      	; 0x17ce <__fp_round+0x18>
    17ca:	60 ff       	sbrs	r22, 0
    17cc:	04 c0       	rjmp	.+8      	; 0x17d6 <__fp_round+0x20>
    17ce:	6f 5f       	subi	r22, 0xFF	; 255
    17d0:	7f 4f       	sbci	r23, 0xFF	; 255
    17d2:	8f 4f       	sbci	r24, 0xFF	; 255
    17d4:	9f 4f       	sbci	r25, 0xFF	; 255
    17d6:	08 95       	ret

000017d8 <__fp_split3>:
    17d8:	57 fd       	sbrc	r21, 7
    17da:	90 58       	subi	r25, 0x80	; 128
    17dc:	44 0f       	add	r20, r20
    17de:	55 1f       	adc	r21, r21
    17e0:	59 f0       	breq	.+22     	; 0x17f8 <__fp_splitA+0x10>
    17e2:	5f 3f       	cpi	r21, 0xFF	; 255
    17e4:	71 f0       	breq	.+28     	; 0x1802 <__fp_splitA+0x1a>
    17e6:	47 95       	ror	r20

000017e8 <__fp_splitA>:
    17e8:	88 0f       	add	r24, r24
    17ea:	97 fb       	bst	r25, 7
    17ec:	99 1f       	adc	r25, r25
    17ee:	61 f0       	breq	.+24     	; 0x1808 <__fp_splitA+0x20>
    17f0:	9f 3f       	cpi	r25, 0xFF	; 255
    17f2:	79 f0       	breq	.+30     	; 0x1812 <__fp_splitA+0x2a>
    17f4:	87 95       	ror	r24
    17f6:	08 95       	ret
    17f8:	12 16       	cp	r1, r18
    17fa:	13 06       	cpc	r1, r19
    17fc:	14 06       	cpc	r1, r20
    17fe:	55 1f       	adc	r21, r21
    1800:	f2 cf       	rjmp	.-28     	; 0x17e6 <__fp_split3+0xe>
    1802:	46 95       	lsr	r20
    1804:	f1 df       	rcall	.-30     	; 0x17e8 <__fp_splitA>
    1806:	08 c0       	rjmp	.+16     	; 0x1818 <__fp_splitA+0x30>
    1808:	16 16       	cp	r1, r22
    180a:	17 06       	cpc	r1, r23
    180c:	18 06       	cpc	r1, r24
    180e:	99 1f       	adc	r25, r25
    1810:	f1 cf       	rjmp	.-30     	; 0x17f4 <__fp_splitA+0xc>
    1812:	86 95       	lsr	r24
    1814:	71 05       	cpc	r23, r1
    1816:	61 05       	cpc	r22, r1
    1818:	08 94       	sec
    181a:	08 95       	ret

0000181c <__fp_zero>:
    181c:	e8 94       	clt

0000181e <__fp_szero>:
    181e:	bb 27       	eor	r27, r27
    1820:	66 27       	eor	r22, r22
    1822:	77 27       	eor	r23, r23
    1824:	cb 01       	movw	r24, r22
    1826:	97 f9       	bld	r25, 7
    1828:	08 95       	ret

0000182a <__mulsf3>:
    182a:	0e 94 28 0c 	call	0x1850	; 0x1850 <__mulsf3x>
    182e:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__fp_round>
    1832:	0e 94 cd 0b 	call	0x179a	; 0x179a <__fp_pscA>
    1836:	38 f0       	brcs	.+14     	; 0x1846 <__mulsf3+0x1c>
    1838:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__fp_pscB>
    183c:	20 f0       	brcs	.+8      	; 0x1846 <__mulsf3+0x1c>
    183e:	95 23       	and	r25, r21
    1840:	11 f0       	breq	.+4      	; 0x1846 <__mulsf3+0x1c>
    1842:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <__fp_inf>
    1846:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <__fp_nan>
    184a:	11 24       	eor	r1, r1
    184c:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__fp_szero>

00001850 <__mulsf3x>:
    1850:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__fp_split3>
    1854:	70 f3       	brcs	.-36     	; 0x1832 <__mulsf3+0x8>

00001856 <__mulsf3_pse>:
    1856:	95 9f       	mul	r25, r21
    1858:	c1 f3       	breq	.-16     	; 0x184a <__mulsf3+0x20>
    185a:	95 0f       	add	r25, r21
    185c:	50 e0       	ldi	r21, 0x00	; 0
    185e:	55 1f       	adc	r21, r21
    1860:	62 9f       	mul	r22, r18
    1862:	f0 01       	movw	r30, r0
    1864:	72 9f       	mul	r23, r18
    1866:	bb 27       	eor	r27, r27
    1868:	f0 0d       	add	r31, r0
    186a:	b1 1d       	adc	r27, r1
    186c:	63 9f       	mul	r22, r19
    186e:	aa 27       	eor	r26, r26
    1870:	f0 0d       	add	r31, r0
    1872:	b1 1d       	adc	r27, r1
    1874:	aa 1f       	adc	r26, r26
    1876:	64 9f       	mul	r22, r20
    1878:	66 27       	eor	r22, r22
    187a:	b0 0d       	add	r27, r0
    187c:	a1 1d       	adc	r26, r1
    187e:	66 1f       	adc	r22, r22
    1880:	82 9f       	mul	r24, r18
    1882:	22 27       	eor	r18, r18
    1884:	b0 0d       	add	r27, r0
    1886:	a1 1d       	adc	r26, r1
    1888:	62 1f       	adc	r22, r18
    188a:	73 9f       	mul	r23, r19
    188c:	b0 0d       	add	r27, r0
    188e:	a1 1d       	adc	r26, r1
    1890:	62 1f       	adc	r22, r18
    1892:	83 9f       	mul	r24, r19
    1894:	a0 0d       	add	r26, r0
    1896:	61 1d       	adc	r22, r1
    1898:	22 1f       	adc	r18, r18
    189a:	74 9f       	mul	r23, r20
    189c:	33 27       	eor	r19, r19
    189e:	a0 0d       	add	r26, r0
    18a0:	61 1d       	adc	r22, r1
    18a2:	23 1f       	adc	r18, r19
    18a4:	84 9f       	mul	r24, r20
    18a6:	60 0d       	add	r22, r0
    18a8:	21 1d       	adc	r18, r1
    18aa:	82 2f       	mov	r24, r18
    18ac:	76 2f       	mov	r23, r22
    18ae:	6a 2f       	mov	r22, r26
    18b0:	11 24       	eor	r1, r1
    18b2:	9f 57       	subi	r25, 0x7F	; 127
    18b4:	50 40       	sbci	r21, 0x00	; 0
    18b6:	9a f0       	brmi	.+38     	; 0x18de <__mulsf3_pse+0x88>
    18b8:	f1 f0       	breq	.+60     	; 0x18f6 <__mulsf3_pse+0xa0>
    18ba:	88 23       	and	r24, r24
    18bc:	4a f0       	brmi	.+18     	; 0x18d0 <__mulsf3_pse+0x7a>
    18be:	ee 0f       	add	r30, r30
    18c0:	ff 1f       	adc	r31, r31
    18c2:	bb 1f       	adc	r27, r27
    18c4:	66 1f       	adc	r22, r22
    18c6:	77 1f       	adc	r23, r23
    18c8:	88 1f       	adc	r24, r24
    18ca:	91 50       	subi	r25, 0x01	; 1
    18cc:	50 40       	sbci	r21, 0x00	; 0
    18ce:	a9 f7       	brne	.-22     	; 0x18ba <__mulsf3_pse+0x64>
    18d0:	9e 3f       	cpi	r25, 0xFE	; 254
    18d2:	51 05       	cpc	r21, r1
    18d4:	80 f0       	brcs	.+32     	; 0x18f6 <__mulsf3_pse+0xa0>
    18d6:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <__fp_inf>
    18da:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__fp_szero>
    18de:	5f 3f       	cpi	r21, 0xFF	; 255
    18e0:	e4 f3       	brlt	.-8      	; 0x18da <__mulsf3_pse+0x84>
    18e2:	98 3e       	cpi	r25, 0xE8	; 232
    18e4:	d4 f3       	brlt	.-12     	; 0x18da <__mulsf3_pse+0x84>
    18e6:	86 95       	lsr	r24
    18e8:	77 95       	ror	r23
    18ea:	67 95       	ror	r22
    18ec:	b7 95       	ror	r27
    18ee:	f7 95       	ror	r31
    18f0:	e7 95       	ror	r30
    18f2:	9f 5f       	subi	r25, 0xFF	; 255
    18f4:	c1 f7       	brne	.-16     	; 0x18e6 <__mulsf3_pse+0x90>
    18f6:	fe 2b       	or	r31, r30
    18f8:	88 0f       	add	r24, r24
    18fa:	91 1d       	adc	r25, r1
    18fc:	96 95       	lsr	r25
    18fe:	87 95       	ror	r24
    1900:	97 f9       	bld	r25, 7
    1902:	08 95       	ret

00001904 <do_rand>:
    1904:	8f 92       	push	r8
    1906:	9f 92       	push	r9
    1908:	af 92       	push	r10
    190a:	bf 92       	push	r11
    190c:	cf 92       	push	r12
    190e:	df 92       	push	r13
    1910:	ef 92       	push	r14
    1912:	ff 92       	push	r15
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	ec 01       	movw	r28, r24
    191a:	68 81       	ld	r22, Y
    191c:	79 81       	ldd	r23, Y+1	; 0x01
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	9b 81       	ldd	r25, Y+3	; 0x03
    1922:	61 15       	cp	r22, r1
    1924:	71 05       	cpc	r23, r1
    1926:	81 05       	cpc	r24, r1
    1928:	91 05       	cpc	r25, r1
    192a:	21 f4       	brne	.+8      	; 0x1934 <do_rand+0x30>
    192c:	64 e2       	ldi	r22, 0x24	; 36
    192e:	79 ed       	ldi	r23, 0xD9	; 217
    1930:	8b e5       	ldi	r24, 0x5B	; 91
    1932:	97 e0       	ldi	r25, 0x07	; 7
    1934:	2d e1       	ldi	r18, 0x1D	; 29
    1936:	33 ef       	ldi	r19, 0xF3	; 243
    1938:	41 e0       	ldi	r20, 0x01	; 1
    193a:	50 e0       	ldi	r21, 0x00	; 0
    193c:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__divmodsi4>
    1940:	49 01       	movw	r8, r18
    1942:	5a 01       	movw	r10, r20
    1944:	9b 01       	movw	r18, r22
    1946:	ac 01       	movw	r20, r24
    1948:	a7 ea       	ldi	r26, 0xA7	; 167
    194a:	b1 e4       	ldi	r27, 0x41	; 65
    194c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__muluhisi3>
    1950:	6b 01       	movw	r12, r22
    1952:	7c 01       	movw	r14, r24
    1954:	ac ee       	ldi	r26, 0xEC	; 236
    1956:	b4 ef       	ldi	r27, 0xF4	; 244
    1958:	a5 01       	movw	r20, r10
    195a:	94 01       	movw	r18, r8
    195c:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__mulohisi3>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	8c 0d       	add	r24, r12
    1966:	9d 1d       	adc	r25, r13
    1968:	ae 1d       	adc	r26, r14
    196a:	bf 1d       	adc	r27, r15
    196c:	b7 ff       	sbrs	r27, 7
    196e:	03 c0       	rjmp	.+6      	; 0x1976 <do_rand+0x72>
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	a1 09       	sbc	r26, r1
    1974:	b0 48       	sbci	r27, 0x80	; 128
    1976:	88 83       	st	Y, r24
    1978:	99 83       	std	Y+1, r25	; 0x01
    197a:	aa 83       	std	Y+2, r26	; 0x02
    197c:	bb 83       	std	Y+3, r27	; 0x03
    197e:	9f 77       	andi	r25, 0x7F	; 127
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	ff 90       	pop	r15
    1986:	ef 90       	pop	r14
    1988:	df 90       	pop	r13
    198a:	cf 90       	pop	r12
    198c:	bf 90       	pop	r11
    198e:	af 90       	pop	r10
    1990:	9f 90       	pop	r9
    1992:	8f 90       	pop	r8
    1994:	08 95       	ret

00001996 <rand_r>:
    1996:	0e 94 82 0c 	call	0x1904	; 0x1904 <do_rand>
    199a:	08 95       	ret

0000199c <rand>:
    199c:	87 e0       	ldi	r24, 0x07	; 7
    199e:	91 e0       	ldi	r25, 0x01	; 1
    19a0:	0e 94 82 0c 	call	0x1904	; 0x1904 <do_rand>
    19a4:	08 95       	ret

000019a6 <srand>:
    19a6:	a0 e0       	ldi	r26, 0x00	; 0
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	80 93 07 01 	sts	0x0107, r24
    19ae:	90 93 08 01 	sts	0x0108, r25
    19b2:	a0 93 09 01 	sts	0x0109, r26
    19b6:	b0 93 0a 01 	sts	0x010A, r27
    19ba:	08 95       	ret

000019bc <eeprom_read_byte>:
    19bc:	f9 99       	sbic	0x1f, 1	; 31
    19be:	fe cf       	rjmp	.-4      	; 0x19bc <eeprom_read_byte>
    19c0:	92 bd       	out	0x22, r25	; 34
    19c2:	81 bd       	out	0x21, r24	; 33
    19c4:	f8 9a       	sbi	0x1f, 0	; 31
    19c6:	99 27       	eor	r25, r25
    19c8:	80 b5       	in	r24, 0x20	; 32
    19ca:	08 95       	ret

000019cc <eeprom_write_byte>:
    19cc:	26 2f       	mov	r18, r22

000019ce <eeprom_write_r18>:
    19ce:	f9 99       	sbic	0x1f, 1	; 31
    19d0:	fe cf       	rjmp	.-4      	; 0x19ce <eeprom_write_r18>
    19d2:	1f ba       	out	0x1f, r1	; 31
    19d4:	92 bd       	out	0x22, r25	; 34
    19d6:	81 bd       	out	0x21, r24	; 33
    19d8:	20 bd       	out	0x20, r18	; 32
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	fa 9a       	sbi	0x1f, 2	; 31
    19e0:	f9 9a       	sbi	0x1f, 1	; 31
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	01 96       	adiw	r24, 0x01	; 1
    19e6:	08 95       	ret

000019e8 <__divmodsi4>:
    19e8:	05 2e       	mov	r0, r21
    19ea:	97 fb       	bst	r25, 7
    19ec:	1e f4       	brtc	.+6      	; 0x19f4 <__divmodsi4+0xc>
    19ee:	00 94       	com	r0
    19f0:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__negsi2>
    19f4:	57 fd       	sbrc	r21, 7
    19f6:	07 d0       	rcall	.+14     	; 0x1a06 <__divmodsi4_neg2>
    19f8:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__udivmodsi4>
    19fc:	07 fc       	sbrc	r0, 7
    19fe:	03 d0       	rcall	.+6      	; 0x1a06 <__divmodsi4_neg2>
    1a00:	4e f4       	brtc	.+18     	; 0x1a14 <__divmodsi4_exit>
    1a02:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__negsi2>

00001a06 <__divmodsi4_neg2>:
    1a06:	50 95       	com	r21
    1a08:	40 95       	com	r20
    1a0a:	30 95       	com	r19
    1a0c:	21 95       	neg	r18
    1a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a10:	4f 4f       	sbci	r20, 0xFF	; 255
    1a12:	5f 4f       	sbci	r21, 0xFF	; 255

00001a14 <__divmodsi4_exit>:
    1a14:	08 95       	ret

00001a16 <__negsi2>:
    1a16:	90 95       	com	r25
    1a18:	80 95       	com	r24
    1a1a:	70 95       	com	r23
    1a1c:	61 95       	neg	r22
    1a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a20:	8f 4f       	sbci	r24, 0xFF	; 255
    1a22:	9f 4f       	sbci	r25, 0xFF	; 255
    1a24:	08 95       	ret

00001a26 <__muluhisi3>:
    1a26:	0e 94 4f 0a 	call	0x149e	; 0x149e <__umulhisi3>
    1a2a:	a5 9f       	mul	r26, r21
    1a2c:	90 0d       	add	r25, r0
    1a2e:	b4 9f       	mul	r27, r20
    1a30:	90 0d       	add	r25, r0
    1a32:	a4 9f       	mul	r26, r20
    1a34:	80 0d       	add	r24, r0
    1a36:	91 1d       	adc	r25, r1
    1a38:	11 24       	eor	r1, r1
    1a3a:	08 95       	ret

00001a3c <__mulshisi3>:
    1a3c:	b7 ff       	sbrs	r27, 7
    1a3e:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <__muluhisi3>

00001a42 <__mulohisi3>:
    1a42:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__muluhisi3>
    1a46:	82 1b       	sub	r24, r18
    1a48:	93 0b       	sbc	r25, r19
    1a4a:	08 95       	ret

00001a4c <__udivmodsi4>:
    1a4c:	a1 e2       	ldi	r26, 0x21	; 33
    1a4e:	1a 2e       	mov	r1, r26
    1a50:	aa 1b       	sub	r26, r26
    1a52:	bb 1b       	sub	r27, r27
    1a54:	fd 01       	movw	r30, r26
    1a56:	0d c0       	rjmp	.+26     	; 0x1a72 <__udivmodsi4_ep>

00001a58 <__udivmodsi4_loop>:
    1a58:	aa 1f       	adc	r26, r26
    1a5a:	bb 1f       	adc	r27, r27
    1a5c:	ee 1f       	adc	r30, r30
    1a5e:	ff 1f       	adc	r31, r31
    1a60:	a2 17       	cp	r26, r18
    1a62:	b3 07       	cpc	r27, r19
    1a64:	e4 07       	cpc	r30, r20
    1a66:	f5 07       	cpc	r31, r21
    1a68:	20 f0       	brcs	.+8      	; 0x1a72 <__udivmodsi4_ep>
    1a6a:	a2 1b       	sub	r26, r18
    1a6c:	b3 0b       	sbc	r27, r19
    1a6e:	e4 0b       	sbc	r30, r20
    1a70:	f5 0b       	sbc	r31, r21

00001a72 <__udivmodsi4_ep>:
    1a72:	66 1f       	adc	r22, r22
    1a74:	77 1f       	adc	r23, r23
    1a76:	88 1f       	adc	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	1a 94       	dec	r1
    1a7c:	69 f7       	brne	.-38     	; 0x1a58 <__udivmodsi4_loop>
    1a7e:	60 95       	com	r22
    1a80:	70 95       	com	r23
    1a82:	80 95       	com	r24
    1a84:	90 95       	com	r25
    1a86:	9b 01       	movw	r18, r22
    1a88:	ac 01       	movw	r20, r24
    1a8a:	bd 01       	movw	r22, r26
    1a8c:	cf 01       	movw	r24, r30
    1a8e:	08 95       	ret

00001a90 <_exit>:
    1a90:	f8 94       	cli

00001a92 <__stop_program>:
    1a92:	ff cf       	rjmp	.-2      	; 0x1a92 <__stop_program>
